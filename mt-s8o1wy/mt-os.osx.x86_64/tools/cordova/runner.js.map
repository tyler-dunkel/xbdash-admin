{"version":3,"sources":["/tools/cordova/runner.js"],"names":["_","buildmessage","runLog","Console","main","displayNameForPlatform","prepareProjectForBuild","CordovaRunner","cordovaProject","runTargets","started","checkPlatformsForRunTargets","ensurePlatformsAreSynchronized","satisfied","messages","capture","title","platformsForRunTargets","platform","checkPlatformRequirements","hasMessages","printMessages","ExitWithCode","printWarningsIfNeeded","projectContext","packageMap","getInfo","warn","labelWarn","url","findWhere","isDevice","prepareProject","bundlePath","pluginVersions","options","assertInCapture","enterJob","prepareFromAppBundle","jobHasMessages","prepareForPlatform","startRunTargets","runTarget","Promise","await","start","log","arrow","havePlatformsChangedSinceLastRun","cordovaPlatformsInApp","isEqual","intersection","havePluginsChangedSinceLastRun","uniq","map"],"mappings":"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","file":"tools/cordova/runner.js.map","sourcesContent":["import _ from 'underscore';\nimport buildmessage from '../utils/buildmessage.js';\nimport runLog from '../runners/run-log.js';\nimport { Console } from '../console/console.js';\nimport main from '../cli/main.js';\n\nimport { displayNameForPlatform, prepareProjectForBuild } from './index.js';\n\nexport class CordovaRunner {\n  constructor(cordovaProject, runTargets) {\n    this.cordovaProject = cordovaProject;\n    this.runTargets = runTargets;\n\n    this.started = false;\n  }\n\n  get projectContext() {\n    return this.cordovaProject.projectContext;\n  }\n\n  get platformsForRunTargets() {\n    return _.uniq(this.runTargets.map((runTarget) => runTarget.platform));\n  }\n\n  checkPlatformsForRunTargets() {\n    this.cordovaProject.ensurePlatformsAreSynchronized();\n\n    let satisfied = true;\n    const messages = buildmessage.capture(\n      { title: `checking platform requirements` }, () => {\n      for (platform of this.platformsForRunTargets) {\n        satisfied =\n          this.cordovaProject.checkPlatformRequirements(platform) &&\n          satisfied;\n      }\n    });\n\n    if (messages.hasMessages()) {\n      Console.printMessages(messages);\n      throw new main.ExitWithCode(1);\n    } else if (!satisfied) {\n      throw new main.ExitWithCode(1);\n    };\n  }\n\n  printWarningsIfNeeded() {\n    // OAuth2 packages don't work so well with any mobile platform except the\n    // iOS Simulator. Print a warning and direct users to the wiki page for help.\n    if (this.projectContext.packageMap.getInfo('oauth2')) {\n      Console.warn();\n      Console.labelWarn(\n        \"It looks like you are using OAuth2 login in your app. \" +\n        \"Meteor's OAuth2 implementation does not currently work with \" +\n        \"mobile apps in local development mode, except in the iOS \" +\n        \"simulator. You can run the iOS simulator with 'meteor run ios'. \" +\n        \"For additional workarounds, see \" +\n        Console.url(\n          \"https://github.com/meteor/meteor/wiki/\" +\n          \"OAuth-for-mobile-Meteor-clients.\"));\n    }\n\n    // If we are targeting remote devices, warn about ports and same network.\n    if (_.findWhere(this.runTargets, { isDevice: true })) {\n      Console.warn();\n      Console.labelWarn(\n        \"You are testing your app on a remote device. \" +\n        \"For the mobile app to be able to connect to the local server, make \" +\n        \"sure your device is on the same network, and that the network \" +\n        \"configuration allows clients to talk to each other \" +\n        \"(no client isolation).\");\n    }\n  }\n\n  prepareProject(bundlePath, pluginVersions, options) {\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob({ title: \"preparing Cordova project\" }, () => {\n      this.cordovaProject.prepareFromAppBundle(bundlePath,\n        pluginVersions, options);\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      for (platform of this.platformsForRunTargets) {\n        this.cordovaProject.prepareForPlatform(platform);\n      }\n    });\n\n    this.pluginVersions = pluginVersions;\n  }\n\n  startRunTargets() {\n    this.started = false;\n\n    for (runTarget of this.runTargets) {\n      const messages = buildmessage.capture({ title: `starting ${runTarget.title}` }, () => {\n        Promise.await(runTarget.start(this.cordovaProject));\n      });\n      if (messages.hasMessages()) {\n        Console.printMessages(messages);\n      } else {\n        runLog.log(`Started ${runTarget.title}.`, { arrow: true });\n      }\n    }\n\n    this.started = true;\n  }\n\n  havePlatformsChangedSinceLastRun() {\n    const platformsForRunTargets = this.platformsForRunTargets;\n    if (!platformsForRunTargets) {\n      return false;\n    }\n\n    const cordovaPlatformsInApp = this.cordovaProject.cordovaPlatformsInApp;\n\n    return !_.isEqual(platformsForRunTargets,\n      _.intersection(platformsForRunTargets, cordovaPlatformsInApp));\n  }\n\n  havePluginsChangedSinceLastRun(pluginVersions) {\n    return this.pluginVersions &&\n      !_.isEqual(this.pluginVersions, pluginVersions);\n  }\n}\n"]}