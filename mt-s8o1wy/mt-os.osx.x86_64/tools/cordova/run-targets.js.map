{"version":3,"sources":["/tools/cordova/run-targets.js"],"names":["_","chalk","child_process","eachline","load","loadIsopacket","runLog","Console","files","execFileSync","execFileAsync","CordovaRunTarget","displayName","iOSRunTarget","isDevice","platform","start","cordovaProject","openXcodeProject","pathJoin","projectRoot","run","undefined","projectDir","projectFilename","readdir","filter","entry","match","printFailure","convertToOSPath","projectFilePath","info","green","url","error","message","AndroidRunTarget","target","tailLogs","done","checkPlatformRequirementsAndSetEnv","check_reqs_path","check_reqs","require","Promise","all","check_java","check_android","then","check_android_target","runCommands","logLevel","verbose","filterExpressions","Log","logStream","line","logEntry","logFromAndroidLogcatLine","pipe","process","stdout","destination","priority","tag","pid","filename","lineNumber","logFromConsoleOutput","format","objFromText","metaColor","color","isDebugOutput","replace","time","Date","level","file","program","test"],"mappings":"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","file":"tools/cordova/run-targets.js.map","sourcesContent":["import _ from 'underscore';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport eachline from 'eachline';\n\nimport { load as loadIsopacket } from '../tool-env/isopackets.js';\nimport runLog from '../runners/run-log.js';\nimport { Console } from '../console/console.js';\nimport files from '../fs/files.js';\nimport { execFileSync, execFileAsync } from '../utils/processes.js';\n\nexport class CordovaRunTarget {\n  get title() {\n    return `app on ${this.displayName}`;\n  }\n}\n\nexport class iOSRunTarget extends CordovaRunTarget {\n  constructor(isDevice) {\n    super();\n    this.platform = 'ios';\n    this.isDevice = isDevice;\n  }\n\n  get displayName() {\n    return this.isDevice ? \"iOS Device\" : \"iOS Simulator\";\n  }\n\n  async start(cordovaProject) {\n    // ios-deploy is super buggy, so we just open Xcode and let the user\n    // start the app themselves.\n    if (this.isDevice) {\n      openXcodeProject(files.pathJoin(cordovaProject.projectRoot,\n        'platforms', 'ios'));\n    } else {\n      await cordovaProject.run(this.platform, this.isDevice, undefined);\n\n      // Bring iOS Simulator to front (it is called Simulator in Xcode 7)\n      execFileAsync('osascript', ['-e',\n`tell application \"System Events\"\n  set possibleSimulatorNames to {\"iOS Simulator\", \"Simulator\"}\n  repeat with possibleSimulatorName in possibleSimulatorNames\n    if application process possibleSimulatorName exists then\n      set frontmost of process possibleSimulatorName to true\n    end if\n  end repeat\nend tell`]);\n    }\n  }\n}\n\nfunction openXcodeProject(projectDir) {\n  const projectFilename =  files.readdir(projectDir).filter((entry) =>\n    { return entry.match(/\\.xcodeproj$/i) })[0];\n\n  if (!projectFilename) {\n    printFailure(`Couldn't find your Xcode project in directory \\\n'${files.convertToOSPath(projectDir)}'`);\n    return;\n  }\n\n  const projectFilePath = files.pathJoin(projectDir, projectFilename);\n\n  try {\n    execFileSync('open', [projectFilePath]);\n\n    Console.info();\n    Console.info(\n      chalk.green(\n        \"Your project has been opened in Xcode so that you can run your \" +\n        \"app on an iOS device. For further instructions, visit this \" +\n        \"wiki page: \") +\n      Console.url(\n        \"https://github.com/meteor/meteor/wiki/\" +\n        \"How-to-run-your-app-on-an-iOS-device\"\n    ));\n    Console.info();\n  } catch (error) {\n    printFailure(`Failed to open your project in Xcode:\n${error.message}`);\n  }\n\n  function printFailure(message) {\n    Console.error();\n    Console.error(message);\n    Console.error(\n      chalk.green(\"Instructions for running your app on an iOS device: \") +\n      Console.url(\"https://github.com/meteor/meteor/wiki/\" +\n        \"How-to-run-your-app-on-an-iOS-device\")\n    );\n    Console.error();\n  }\n}\n\nexport class AndroidRunTarget extends CordovaRunTarget {\n  constructor(isDevice) {\n    super();\n    this.platform = 'android';\n    this.isDevice = isDevice;\n  }\n\n  get displayName() {\n    return this.isDevice ? \"Android Device\" : \"Android Emulator\";\n  }\n\n  async start(cordovaProject) {\n    // XXX This only works if we have at most one device or one emulator\n    // connected. We should find a way to get the target ID from run and use\n    // it instead of -d or -e.\n    let target = this.isDevice ? \"-d\" : \"-e\";\n\n    // Clear logs\n    execFileAsync('adb', [target, 'logcat', '-c']);\n\n    await cordovaProject.run(this.platform, this.isDevice);\n\n    this.tailLogs(cordovaProject, target).done();\n  }\n\n  async checkPlatformRequirementsAndSetEnv(cordovaProject) {\n    // Cordova Android is fairly good at applying various heuristics to find\n    // suitable values for JAVA_HOME and ANDROID_HOME, and to augment the PATH\n    // with those variables.\n    // Unfortunately, this is intertwined with checking requirements, so the\n    // only way to get access to this functionality is to run check_reqs and\n    // let it modify process.env\n    var check_reqs_path = files.pathJoin(\n      cordovaProject.projectRoot, 'platforms', this.platform,\n      'cordova', 'lib', 'check_reqs');\n    check_reqs_path = files.convertToOSPath(check_reqs_path);\n    let check_reqs = require(check_reqs_path);\n    // We can't use check_reqs.run() because that will print the values of\n    // JAVA_HOME and ANDROID_HOME to stdout.\n    await Promise.all([check_reqs.check_java(),\n      check_reqs.check_android().then(check_reqs.check_android_target)]);\n  }\n\n  async tailLogs(cordovaProject, target) {\n    cordovaProject.runCommands(`tailing logs for ${this.displayName}`, async () => {\n      await this.checkPlatformRequirementsAndSetEnv(cordovaProject);\n\n      const logLevel = Console.verbose ? \"V\" : \"I\";\n\n      const filterExpressions = [`MeteorWebApp:${logLevel}`,\n        `CordovaLog:${logLevel}`, `chromium:${logLevel}`,\n        `SystemWebViewClient:${logLevel}`, '*:F'];\n\n      const { Log } =\n          loadIsopacket('cordova-support')['logging'];\n\n      const logStream = eachline((line) => {\n        const logEntry = logFromAndroidLogcatLine(Log, line);\n        if (logEntry) {\n          return `${logEntry}\\n`;\n        }\n      });\n      logStream.pipe(process.stdout);\n\n      // Asynchronously start tailing logs to stdout\n      execFileAsync('adb', [target, 'logcat',\n        ...filterExpressions],\n        { destination: logStream });\n    });\n  }\n}\n\nfunction logFromAndroidLogcatLine(Log, line) {\n  // Ignore lines indicating beginning of logging\n  if (line.match(/^--------- beginning of /)) {\n    return null;\n  }\n\n  // Matches logcat brief format\n  // \"I/Tag(  PID): message\"\n  let match =\n    line.match(/^([A-Z])\\/([^\\(]*?)\\(\\s*(\\d+)\\): (.*)$/);\n\n  if (match) {\n    [, priority, tag, pid, message] = match;\n\n    if (tag === 'chromium') {\n      // Matches Chromium log format\n      // [INFO:CONSOLE(23)] \"Bla!\", source: http://meteor.local/app/mobileapp.js (23)\n      match = message.match(/^\\[(.*):(.*)\\((\\d+)\\)\\] (.*)$/);\n\n      if (match) {\n        [, logLevel, filename, lineNumber, message] = match;\n\n        if (filename === 'CONSOLE') {\n          match = message.match(/^\\\"(.*)\\\", source: (.*) \\((\\d+)\\)$/);\n\n          if (match) {\n            [, message, filename, lineNumber] = match;\n            return logFromConsoleOutput(Log, message, filename, lineNumber);\n          }\n        }\n      }\n    } else if (tag === 'CordovaLog') {\n      // http://meteor.local/mobileappold.js?3c198a97a802ad2c6eab52da0244245e30b964ed: Line 15 : Clicked!\n\n      match = message.match(/^(.*): Line (\\d+) : (.*)$/);\n\n      if (match) {\n        [, filename, lineNumber, message] = match;\n        return logFromConsoleOutput(Log, message, filename, lineNumber);\n      }\n    }\n  }\n\n  return Log.format(Log.objFromText(line), { metaColor: 'green', color: true });\n};\n\nfunction logFromConsoleOutput(Log, message, filename, lineNumber) {\n  if (isDebugOutput(message) && !Console.verbose) {\n    return null;\n  }\n\n  filename = filename.replace(/\\?.*$/, '');\n\n  return Log.format({\n    time: new Date,\n    level: 'info',\n    file: filename,\n    line: lineNumber,\n    message: message,\n    program: 'android'\n  }, {\n    metaColor: 'green',\n    color: true\n  });\n}\n\nfunction isDebugOutput(message) {\n  // Skip the debug output produced by Meteor components.\n  return /^METEOR CORDOVA DEBUG /.test(message) ||\n    /^HTTPD DEBUG /.test(message);\n};\n"]}