{"version":3,"sources":["/tools/cordova/builder.js"],"names":["_","util","Console","buildmessage","files","bundler","archinfo","release","load","loadIsopacket","utils","CORDOVA_ARCH","iconsIosSizes","iconsAndroidSizes","launchIosSizes","launchAndroidSizes","CordovaBuilder","projectContext","projectRoot","options","resourcesPath","pathJoin","initalizeDefaults","appIdAsNumber","parseInt","appIdentifier","localServerPort","metadata","id","version","buildNumber","undefined","name","pathBasename","projectDir","description","author","email","website","contentUrl","additionalConfiguration","global","platform","ios","android","custom","packageMap","getInfo","AutoHideSplashScreen","SplashScreen","SplashScreenDelay","FadeSplashScreenDuration","ShowSplashScreenSpinner","StatusBarOverlaysWebView","StatusBarStyle","accessRules","type","mobileServerUrl","serverDomain","parseUrl","hostname","isIPv4Address","imagePaths","icon","splash","assetsPath","__dirname","iconsPath","launchScreensPath","setDefaultIcon","size","imageFile","exists","setDefaultLaunchScreen","each","pluginsConfiguration","processControlFile","controlFilePath","debug","enterJob","title","code","readFile","runJavaScript","filename","symbols","App","createAppConfiguration","error","exception","writeConfigXmlAndCopyResources","shouldCopyResources","XmlBuilder","config","create","xmlns","value","key","att","element","txt","href","toString","tag","raw","elementSet","src","pattern","omit","extend","origin","platformElement","prefs","rm_recursive","mkdir_p","configureAndCopyImages","configXmlPath","formattedXmlConfig","end","pretty","writeFile","sizes","xmlElement","imageAttributes","width","height","androidMatch","exec","attributes","density","substr","split","suppliedPath","suppliedFilename","last","pathSep","extension","match","copyFile","pathResolve","copyWWW","bundlePath","wwwPath","applicationPath","programPath","cp_r","programJsonPath","convertToOSPath","program","JSON","parse","settingsFile","settings","publicSettings","appendVersion","stringify","bootstrapPage","generateBootstrapPage","configDummy","PUBLIC_SETTINGS","WebAppHashing","calculateClientHash","manifest","meteorRelease","current","isCheckout","autoupdateVersion","process","env","AUTOUPDATE_VERSION","runtimeConfig","ROOT_URL","ROOT_URL_PATH_PREFIX","DDP_DEFAULT_CONNECTION_URL","autoupdateVersionCordova","appId","meteorEnv","NODE_ENV","TEST_METADATA","Boilerplate","boilerplate","urlMapper","identity","pathMapper","path","baseDataExtension","meteorRuntimeConfig","encodeURIComponent","toHTML","copyBuildOverride","buildOverridePath","stat","isDirectory","builder","info","has","Error","setPreference","contains","configurePlugin","icons","validDevices","keys","concat","include","labelWarn","launchScreens","accessRule","launchExternal","appendToConfig","xml","push"],"mappings":"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","file":"tools/cordova/builder.js.map","sourcesContent":["import _ from 'underscore';\nimport util from 'util';\nimport { Console } from '../console/console.js';\nimport buildmessage from '../utils/buildmessage.js';\nimport files from '../fs/files.js';\nimport bundler from '../isobuild/bundler.js';\nimport archinfo from '../utils/archinfo.js';\nimport release from '../packaging/release.js';\nimport { load as loadIsopacket } from '../tool-env/isopackets.js';\nimport utils from '../utils/utils.js';\n\nimport { CORDOVA_ARCH } from './index.js';\n\n// Hard-coded size constants\n\nconst iconsIosSizes = {\n  'iphone_2x': '120x120',\n  'iphone_3x': '180x180',\n  'ipad': '76x76',\n  'ipad_2x': '152x152',\n  'ipad_pro': '167x167',\n  'ios_settings': '29x29',\n  'ios_settings_2x': '58x58',\n  'ios_settings_3x': '87x87',\n  'ios_spotlight': '40x40',\n  'ios_spotlight_2x': '80x80'\n};\n\nconst iconsAndroidSizes = {\n  'android_mdpi': '48x48',\n  'android_hdpi': '72x72',\n  'android_xhdpi': '96x96',\n  'android_xxhdpi': '144x144',\n  'android_xxxhdpi': '192x192'\n};\n\nconst launchIosSizes = {\n  'iphone_2x': '640x960',\n  'iphone5': '640x1136',\n  'iphone6': '750x1334',\n  'iphone6p_portrait': '1242x2208',\n  'iphone6p_landscape': '2208x1242',\n  'ipad_portrait': '768x1024',\n  'ipad_portrait_2x': '1536x2048',\n  'ipad_landscape': '1024x768',\n  'ipad_landscape_2x': '2048x1536'\n};\n\nconst launchAndroidSizes = {\n  'android_mdpi_portrait': '320x470',\n  'android_mdpi_landscape': '470x320',\n  'android_hdpi_portrait': '480x640',\n  'android_hdpi_landscape': '640x480',\n  'android_xhdpi_portrait': '720x960',\n  'android_xhdpi_landscape': '960x720',\n  'android_xxhdpi_portrait': '1080x1440',\n  'android_xxhdpi_landscape': '1440x1080'\n};\n\nexport class CordovaBuilder {\n  constructor(projectContext, projectRoot, options) {\n    this.projectContext = projectContext;\n    this.projectRoot = projectRoot;\n    this.options = options;\n\n    this.resourcesPath = files.pathJoin(\n      this.projectRoot,\n      'resources');\n\n    this.initalizeDefaults();\n  }\n\n  initalizeDefaults() {\n    // Convert the appId (a base 36 string) to a number\n    const appIdAsNumber = parseInt(this.projectContext.appIdentifier, 36);\n    // We use the appId to choose a local server port between 12000-13000.\n    // This range should be large enough to avoid collisions with other\n    // Meteor apps, and has also been chosen to avoid collisions\n    // with other apps or services on the device (although this can never be\n    // guaranteed).\n    const localServerPort = 12000 + (appIdAsNumber % 1000);\n\n    this.metadata = {\n      id: 'com.id' + this.projectContext.appIdentifier,\n      version: '0.0.1',\n      buildNumber: undefined,\n      name: files.pathBasename(this.projectContext.projectDir),\n      description: 'New Meteor Mobile App',\n      author: 'A Meteor Developer',\n      email: 'n/a',\n      website: 'n/a',\n      contentUrl: `http://localhost:${localServerPort}/`\n    };\n\n    // Set some defaults different from the Cordova defaults\n    this.additionalConfiguration = {\n      global: {\n        'webviewbounce': false,\n        'DisallowOverscroll': true\n      },\n      platform: {\n          ios: {},\n          android: {}\n      }\n    };\n\n    // Custom elements that will be appended into config.xml's widgets\n    this.custom = [];\n\n    const packageMap = this.projectContext.packageMap;\n\n    if (packageMap && packageMap.getInfo('launch-screen')) {\n      this.additionalConfiguration.global.AutoHideSplashScreen = false;\n      this.additionalConfiguration.global.SplashScreen = 'screen';\n      this.additionalConfiguration.global.SplashScreenDelay = 5000;\n      this.additionalConfiguration.global.FadeSplashScreenDuration = 250;\n      this.additionalConfiguration.global.ShowSplashScreenSpinner = false;\n    }\n\n    if (packageMap && packageMap.getInfo('mobile-status-bar')) {\n      this.additionalConfiguration.global.StatusBarOverlaysWebView = false;\n      this.additionalConfiguration.global.StatusBarStyle = 'default';\n    }\n\n    // Default access rules.\n    // Rules can be extended with App.accesRule() in mobile-config.js.\n    this.accessRules = {\n      // Allow the app to ask the system to open these types of URLs.\n      // (e.g. in the phone app or an email client)\n      'tel:*': { type: 'intent' },\n      'geo:*': { type: 'intent' },\n      'mailto:*': { type: 'intent' },\n      'sms:*': { type: 'intent' },\n      'market:*': { type: 'intent' },\n      'itms:*': { type: 'intent' },\n      'itms-apps:*': { type: 'intent' },\n\n      // Allow navigation to localhost, which is needed for the local server\n      'http://localhost': { type: 'navigation' }\n    };\n\n    const mobileServerUrl = this.options.mobileServerUrl;\n    const serverDomain = mobileServerUrl ?\n      utils.parseUrl(mobileServerUrl).hostname : null;\n\n    // If the remote server domain is known, allow access to it for XHR and DDP\n    // connections.\n    if (serverDomain) {\n      // Application Transport Security (new in iOS 9) doesn't allow you\n      // to give access to IP addresses (just domains). So we allow access to\n      // everything if we don't have a domain, which sets NSAllowsArbitraryLoads.\n      if (utils.isIPv4Address(serverDomain)) {\n        this.accessRules['*'] = { type: 'network' };\n      } else {\n        this.accessRules['*://' + serverDomain] = { type: 'network' };\n\n        // Android talks to localhost over 10.0.2.2. This config file is used for\n        // multiple platforms, so any time that we say the server is on localhost we\n        // should also say it is on 10.0.2.2.\n        if (serverDomain === 'localhost') {\n          this.accessRules['*://10.0.2.2'] = { type: 'network' };\n        }\n      }\n    }\n\n    this.imagePaths = {\n      icon: {},\n      splash: {}\n    };\n\n    // Defaults are Meteor meatball images located in tools/cordova/assets directory\n    const assetsPath = files.pathJoin(__dirname, 'assets');\n    const iconsPath = files.pathJoin(assetsPath, 'icons');\n    const launchScreensPath = files.pathJoin(assetsPath, 'launchscreens');\n\n    const setDefaultIcon = (size, name) => {\n      const imageFile = files.pathJoin(iconsPath, size + '.png');\n      if (files.exists(imageFile)) {\n        this.imagePaths.icon[name] = imageFile;\n      }\n    };\n\n    const setDefaultLaunchScreen = (size, name) => {\n      const imageFile = files.pathJoin(launchScreensPath, `${size}.png`);\n      if (files.exists(imageFile)) {\n        this.imagePaths.splash[name] = imageFile;\n      }\n    };\n\n    _.each(iconsIosSizes, setDefaultIcon);\n    _.each(iconsAndroidSizes, setDefaultIcon);\n    _.each(launchIosSizes, setDefaultLaunchScreen);\n    _.each(launchAndroidSizes, setDefaultLaunchScreen);\n\n    this.pluginsConfiguration = {};\n  }\n\n  processControlFile() {\n    const controlFilePath =\n      files.pathJoin(this.projectContext.projectDir, 'mobile-config.js');\n\n\n    if (files.exists(controlFilePath)) {\n      Console.debug('Processing mobile-config.js');\n\n      buildmessage.enterJob({ title: `processing mobile-config.js` }, () => {\n        const code = files.readFile(controlFilePath, 'utf8');\n\n        try {\n          files.runJavaScript(code, {\n            filename: 'mobile-config.js',\n            symbols: { App: createAppConfiguration(this) }\n          });\n        } catch (error) {\n          buildmessage.exception(error);\n        }\n      });\n    }\n  }\n\n  writeConfigXmlAndCopyResources(shouldCopyResources = true) {\n    const { XmlBuilder } = loadIsopacket('cordova-support')['xmlbuilder'];\n\n    let config = XmlBuilder.create('widget');\n\n    // Set the root attributes\n    _.each({\n      id: this.metadata.id,\n      version: this.metadata.version,\n      'android-versionCode': this.metadata.buildNumber,\n      'ios-CFBundleVersion': this.metadata.buildNumber,\n      xmlns: 'http://www.w3.org/ns/widgets',\n      'xmlns:cdv': 'http://cordova.apache.org/ns/1.0'\n    }, (value, key) => {\n      if (value) {\n        config.att(key, value);\n      }\n    });\n\n    // Set the metadata\n    config.element('name').txt(this.metadata.name);\n    config.element('description').txt(this.metadata.description);\n    config.element('author', {\n      href: this.metadata.website,\n      email: this.metadata.email\n    }).txt(this.metadata.author);\n\n    // Set the additional global configuration preferences\n    _.each(this.additionalConfiguration.global, (value, key) => {\n      config.element('preference', {\n        name: key,\n        value: value.toString()\n      });\n    });\n\n    // Set custom tags into widget element\n    _.each(this.custom, elementSet => {\n      const tag = config.raw(elementSet);\n    });\n\n    config.element('content', { src: this.metadata.contentUrl });\n\n    // Copy all the access rules\n    _.each(this.accessRules, (options, pattern) => {\n      const type = options.type;\n      options = _.omit(options, 'type');\n\n      if (type === 'intent') {\n        config.element('allow-intent', { href: pattern });\n      } else if (type === 'navigation') {\n        config.element('allow-navigation', _.extend({ href: pattern }, options));\n      } else {\n        config.element('access', _.extend({ origin: pattern }, options));\n      }\n    });\n\n    const platformElement = {\n      ios: config.element('platform', {name: 'ios'}),\n      android: config.element('platform', {name: 'android'})\n    }\n\n    // Set the additional platform-specific configuration preferences\n    _.each(this.additionalConfiguration.platform, (prefs, platform) => {\n      _.each(prefs, (value, key) => {\n        platformElement[platform].element('preference', {\n          name: key,\n          value: value.toString()\n        });\n      });\n    });\n\n    if (shouldCopyResources) {\n      // Prepare the resources folder\n      files.rm_recursive(this.resourcesPath);\n      files.mkdir_p(this.resourcesPath);\n\n      Console.debug('Copying resources for mobile apps');\n\n      this.configureAndCopyImages(iconsIosSizes, platformElement.ios, 'icon');\n      this.configureAndCopyImages(iconsAndroidSizes, platformElement.android, 'icon');\n      this.configureAndCopyImages(launchIosSizes, platformElement.ios, 'splash');\n      this.configureAndCopyImages(launchAndroidSizes, platformElement.android, 'splash');\n    }\n\n    Console.debug('Writing new config.xml');\n\n    const configXmlPath = files.pathJoin(this.projectRoot, 'config.xml');\n    const formattedXmlConfig = config.end({ pretty: true });\n    files.writeFile(configXmlPath, formattedXmlConfig, 'utf8');\n  }\n\n  configureAndCopyImages(sizes, xmlElement, tag) {\n    const imageAttributes = (name, width, height, src) => {\n      const androidMatch = /android_(.?.dpi)_(landscape|portrait)/g.exec(name);\n\n      let attributes = {\n        src: src,\n        width: width,\n        height: height\n      };\n\n      // XXX special case for Android\n      if (androidMatch) {\n        attributes.density =\n          androidMatch[2].substr(0, 4) + '-' + androidMatch[1];\n      }\n\n      return attributes;\n    };\n\n    _.each(sizes, (size, name) => {\n      const [width, height] = size.split('x');\n\n      const suppliedPath = this.imagePaths[tag][name];\n      if (!suppliedPath) {\n        return;\n      }\n\n      const suppliedFilename = _.last(suppliedPath.split(files.pathSep));\n      let extension = _.last(suppliedFilename.split('.'));\n\n      // XXX special case for 9-patch png's\n      if (suppliedFilename.match(/\\.9\\.png$/)) {\n        extension = '9.png';\n      }\n\n      const filename = name + '.' + tag + '.' + extension;\n      const src = files.pathJoin('resources', filename);\n\n      // Copy the file to the build folder with a standardized name\n      files.copyFile(\n        files.pathResolve(this.projectContext.projectDir, suppliedPath),\n        files.pathJoin(this.resourcesPath, filename));\n\n      // Set it to the xml tree\n      xmlElement.element(tag, imageAttributes(name, width, height, src));\n    });\n  }\n\n  copyWWW(bundlePath) {\n    const wwwPath = files.pathJoin(this.projectRoot, 'www');\n\n    // Remove existing www\n    files.rm_recursive(wwwPath);\n\n    // Create www and www/application directories\n    const applicationPath = files.pathJoin(wwwPath, 'application');\n    files.mkdir_p(applicationPath);\n\n    // Copy Cordova arch program from bundle to www/application\n    const programPath = files.pathJoin(bundlePath, 'programs', CORDOVA_ARCH);\n    files.cp_r(programPath, applicationPath);\n\n    // Load program.json\n    const programJsonPath = files.convertToOSPath(\n      files.pathJoin(applicationPath, 'program.json'));\n    const program = JSON.parse(files.readFile(programJsonPath, 'utf8'));\n\n    // Load settings\n    const settingsFile = this.options.settingsFile;\n    const settings = settingsFile ?\n      JSON.parse(files.readFile(settingsFile, 'utf8')) : {};\n    const publicSettings = settings['public'];\n\n    // Calculate client hash and append to program\n    this.appendVersion(program, publicSettings);\n\n    // Write program.json\n    files.writeFile(programJsonPath, JSON.stringify(program), 'utf8');\n\n    const bootstrapPage = this.generateBootstrapPage(applicationPath, program, publicSettings);\n    files.writeFile(files.pathJoin(applicationPath, 'index.html'),\n      bootstrapPage, 'utf8');\n  }\n\n  appendVersion(program, publicSettings) {\n    let configDummy = {};\n    configDummy.PUBLIC_SETTINGS = publicSettings || {};\n\n    const { WebAppHashing } =\n      loadIsopacket('cordova-support')['webapp-hashing'];\n    program.version =\n      WebAppHashing.calculateClientHash(program.manifest, null, configDummy);\n  }\n\n  generateBootstrapPage(applicationPath, program, publicSettings) {\n    const meteorRelease =\n      release.current.isCheckout() ? \"none\" : release.current.name;\n\n    const manifest = program.manifest;\n    const autoupdateVersion = process.env.AUTOUPDATE_VERSION || program.version;\n\n    const mobileServerUrl = this.options.mobileServerUrl;\n\n    const runtimeConfig = {\n      meteorRelease: meteorRelease,\n      ROOT_URL: mobileServerUrl,\n      // XXX propagate it from this.options?\n      ROOT_URL_PATH_PREFIX: '',\n      DDP_DEFAULT_CONNECTION_URL: mobileServerUrl,\n      autoupdateVersionCordova: autoupdateVersion,\n      appId: this.projectContext.appIdentifier,\n      meteorEnv: {\n        NODE_ENV: process.env.NODE_ENV || \"production\",\n        TEST_METADATA: process.env.TEST_METADATA || \"{}\"\n      }\n    };\n\n    if (publicSettings) {\n      runtimeConfig.PUBLIC_SETTINGS = publicSettings;\n    }\n\n    const { Boilerplate } =\n      loadIsopacket('cordova-support')['boilerplate-generator'];\n    const boilerplate = new Boilerplate(CORDOVA_ARCH, manifest, {\n      urlMapper: _.identity,\n      pathMapper: (path) => files.convertToOSPath(\n        files.pathJoin(applicationPath, path)),\n      baseDataExtension: {\n        meteorRuntimeConfig: JSON.stringify(\n          encodeURIComponent(JSON.stringify(runtimeConfig)))\n      }\n    });\n\n    return boilerplate.toHTML();\n  }\n\n  copyBuildOverride() {\n    const buildOverridePath =\n      files.pathJoin(this.projectContext.projectDir, 'cordova-build-override');\n\n    if (files.exists(buildOverridePath) &&\n      files.stat(buildOverridePath).isDirectory()) {\n      Console.debug('Copying over the cordova-build-override directory');\n      files.cp_r(buildOverridePath, this.projectRoot);\n    }\n  }\n}\n\nfunction createAppConfiguration(builder) {\n  /**\n   * @namespace App\n   * @global\n   * @summary The App configuration object in mobile-config.js\n   */\n  return {\n    /**\n     * @summary Set your mobile app's core configuration information.\n     * @param {Object} options\n     * @param {String} [options.id,version,name,description,author,email,website]\n     * Each of the options correspond to a key in the app's core configuration\n     * as described in the [Cordova documentation](http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_core_configuration_elements).\n     * @memberOf App\n     */\n    info: function (options) {\n      // check that every key is meaningful\n      _.each(options, function (value, key) {\n        if (!_.has(builder.metadata, key)) {\n          throw new Error(\"Unknown key in App.info configuration: \" + key);\n        }\n      });\n\n      _.extend(builder.metadata, options);\n    },\n    /**\n     * @summary Add a preference for your build as described in the\n     * [Cordova documentation](http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_global_preferences).\n     * @param {String} name A preference name supported by Cordova's\n     * `config.xml`.\n     * @param {String} value The value for that preference.\n     * @param {String} [platform] Optional. A platform name (either `ios` or `android`) to add a platform-specific preference.\n     * @memberOf App\n     */\n    setPreference: function (key, value, platform) {\n      if (platform) {\n        if (!_.contains(['ios', 'android'], platform)) {\n          throw new Error(`Unknown platform in App.setPreference: ${platform}. \\\nValid platforms are: ios, android.`);\n        }\n\n        builder.additionalConfiguration.platform[platform][key] = value;\n      } else {\n        builder.additionalConfiguration.global[key] = value;\n      }\n    },\n\n    /**\n     * @summary Set the build-time configuration for a Cordova plugin.\n     * @param {String} id The identifier of the plugin you want to\n     * configure.\n     * @param {Object} config A set of key-value pairs which will be passed\n     * at build-time to configure the specified plugin.\n     * @memberOf App\n     */\n    configurePlugin: function (id, config) {\n      builder.pluginsConfiguration[id] = config;\n    },\n\n    /**\n     * @summary Set the icons for your mobile app.\n     * @param {Object} icons An Object where the keys are different\n     * devices and screen sizes, and values are image paths\n     * relative to the project root directory.\n     *\n     * Valid key values:\n     * - `iphone_2x` (120x120)\n     * - `iphone_3x` (180x180)\n     * - `ipad` (76x76)\n     * - `ipad_2x` (152x152)\n     * - `ipad_pro` (167x167)\n     * - `ios_settings` (29x29)\n     * - `ios_settings_2x` (58x58)\n     * - `ios_settings_3x` (87x87)\n     * - `ios_spotlight` (40x40)\n     * - `ios_spotlight_2x` (80x80)\n     * - `android_mdpi` (48x48)\n     * - `android_hdpi` (72x72)\n     * - `android_xhdpi` (96x96)\n     * - `android_xxhdpi` (144x144)\n     * - `android_xxxhdpi` (192x192)\n     * @memberOf App\n     */\n    icons: function (icons) {\n      var validDevices =\n        _.keys(iconsIosSizes).concat(_.keys(iconsAndroidSizes));\n      _.each(icons, function (value, key) {\n        if (!_.include(validDevices, key)) {\n          Console.labelWarn(`${key}: unknown key in App.icons \\\nconfiguration. The key may be deprecated.`);\n        }\n      });\n      _.extend(builder.imagePaths.icon, icons);\n    },\n\n    /**\n     * @summary Set the launch screen images for your mobile app.\n     * @param {Object} launchScreens A dictionary where keys are different\n     * devices, screen sizes, and orientations, and the values are image paths\n     * relative to the project root directory.\n     *\n     * For Android, launch screen images should\n     * be special \"Nine-patch\" image files that specify how they should be\n     * stretched. See the [Android docs](https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch).\n     *\n     * Valid key values:\n     * - `iphone_2x` (640x960)\n     * - `iphone5` (640x1136)\n     * - `iphone6` (750x1334)\n     * - `iphone6p_portrait` (1242x2208)\n     * - `iphone6p_landscape` (2208x1242)\n     * - `ipad_portrait` (768x1024)\n     * - `ipad_portrait_2x` (1536x2048)\n     * - `ipad_landscape` (1024x768)\n     * - `ipad_landscape_2x` (2048x1536)\n     * - `android_mdpi_portrait` (320x470)\n     * - `android_mdpi_landscape` (470x320)\n     * - `android_hdpi_portrait` (480x640)\n     * - `android_hdpi_landscape` (640x480)\n     * - `android_xhdpi_portrait` (720x960)\n     * - `android_xhdpi_landscape` (960x720)\n     * - `android_xxhdpi_portrait` (1080x1440)\n     * - `android_xxhdpi_landscape` (1440x1080)\n     *\n     * @memberOf App\n     */\n    launchScreens: function (launchScreens) {\n      var validDevices =\n        _.keys(launchIosSizes).concat(_.keys(launchAndroidSizes));\n\n      _.each(launchScreens, function (value, key) {\n        if (!_.include(validDevices, key)) {\n          Console.labelWarn(`${key}: unknown key in App.launchScreens \\\nconfiguration. The key may be deprecated.`);\n        }\n      });\n      _.extend(builder.imagePaths.splash, launchScreens);\n    },\n\n    /**\n     * @summary Set a new access rule based on origin domain for your app.\n     * By default your application has a limited list of servers it can contact.\n     * Use this method to extend this list.\n     *\n     * Default access rules:\n     *\n     * - `tel:*`, `geo:*`, `mailto:*`, `sms:*`, `market:*` are allowed and\n     *   are handled by the system (e.g. opened in the phone app or an email client)\n     * - `http://localhost:*` is used to serve the app's assets from.\n     * - The domain or address of the Meteor server to connect to for DDP and\n     *   hot code push of new versions.\n     *\n     * Read more about domain patterns in [Cordova\n     * docs](http://cordova.apache.org/docs/en/6.0.0/guide_appdev_whitelist_index.md.html).\n     *\n     * Starting with Meteor 1.0.4 access rule for all domains and protocols\n     * (`<access origin=\"*\"/>`) is no longer set by default due to\n     * [certain kind of possible\n     * attacks](http://cordova.apache.org/announcements/2014/08/04/android-351.html).\n     *\n     * @param {String} pattern The pattern defining affected domains or URLs.\n     * @param {Object} [options]\n     * @param {String} options.type Possible values:\n     * - **`'intent'`**: Controls which URLs the app is allowed to ask the system to open.\n     *  (e.g. in the phone app or an email client).\n     * - **`'navigation'`**: Controls which URLs the WebView itself can be navigated to\n     *  (can also needed for iframes).\n     * - **`'network'` or undefined**: Controls which network requests (images, XHRs, etc) are allowed to be made.\n     * @param {Boolean} options.launchExternal (Deprecated, use `type: 'intent'` instead.)\n     * @memberOf App\n     */\n    accessRule: function (pattern, options) {\n      options = options || {};\n\n      if (options.launchExternal) {\n        options.type = 'intent';\n      }\n\n      builder.accessRules[pattern] = options;\n    },\n\n    /**\n     * @summary Append custom tags into config's widget element.\n     *\n     * `App.appendToConfig('<any-xml-content/>');`\n     *\n     * @param  {String} element The XML you want to include \n     * @memberOf App\n     */\n    appendToConfig: function (xml) {\n      builder.custom.push(xml);\n    },\n  };\n}\n"]}