{"version":3,"sources":["/tools/cordova/index.js"],"names":["_","assert","utils","buildmessage","oldToNew","oldToNewPluginIds","newToOld","newToOldPluginIds","CORDOVA_ARCH","CORDOVA_PLATFORMS","CORDOVA_PLATFORM_VERSIONS","PLATFORM_TO_DISPLAY_NAME_MAP","displayNameForPlatform","platform","displayNamesForPlatforms","platforms","map","join","filterPlatforms","intersection","splitPluginsAndPackages","packages","result","plugins","pkg","split","namespace","rest","name","push","pluginVersionsFromStarManifest","star","cordovaProgram","findWhere","programs","arch","cordovaDependencies","newPluginId","id","convertPluginVersions","pluginVersions","assertInJob","newPluginVersions","each","version","isUrlWithSha","convertToGitUrl","newId","has","url","match","organization","repository","sha","test","error","displayNameForHostPlatform","process"],"mappings":"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","file":"tools/cordova/index.js.map","sourcesContent":["import _ from 'underscore';\nimport assert from 'assert';\nimport utils from '../utils/utils.js';\nimport buildmessage from '../utils/buildmessage.js';\n\nimport { oldToNew as oldToNewPluginIds, newToOld as newToOldPluginIds }\n  from 'cordova-registry-mapper';\n\nexport const CORDOVA_ARCH = \"web.cordova\";\n\nexport const CORDOVA_PLATFORMS = ['ios', 'android'];\n\nexport const CORDOVA_PLATFORM_VERSIONS = {\n  'android': '5.2.2',\n  'ios': '4.2.1'\n};\n\nconst PLATFORM_TO_DISPLAY_NAME_MAP = {\n  'ios': 'iOS',\n  'android': 'Android'\n};\n\nexport function displayNameForPlatform(platform) {\n  return PLATFORM_TO_DISPLAY_NAME_MAP[platform] || platform;\n};\n\nexport function displayNamesForPlatforms(platforms) {\n  return platforms.map((platform) =>\n    displayNameForPlatform(platform)).join(', ');\n}\n\n// This filters the Cordova platforms from a list of app-level platforms.\n// Right now, the only other platforms are the default browser and server\n// platforms.\nexport function filterPlatforms(platforms) {\n  return _.intersection(platforms, CORDOVA_PLATFORMS);\n}\n\nexport function splitPluginsAndPackages(packages) {\n  let result = {\n    plugins: [],\n    packages: []\n  };\n\n  for (let pkg of packages) {\n    const [namespace, ...rest] = pkg.split(':');\n    if (namespace === 'cordova') {\n      const name = rest.join(':');\n      result.plugins.push(name);\n    } else {\n      result.packages.push(pkg);\n    }\n  }\n\n  return result;\n}\n\n// Returns the cordovaDependencies of the Cordova arch from a star manifest.\nexport function pluginVersionsFromStarManifest(star) {\n  var cordovaProgram = _.findWhere(star.programs, { arch: CORDOVA_ARCH });\n  return cordovaProgram ? cordovaProgram.cordovaDependencies : {};\n}\n\nexport function newPluginId(id) {\n  return oldToNewPluginIds[id];\n}\n\nexport function convertPluginVersions(pluginVersions) {\n  assert(pluginVersions);\n  buildmessage.assertInJob();\n\n  let newPluginVersions = {};\n\n  _.each(pluginVersions, (version, id) => {\n    if (utils.isUrlWithSha(version)) {\n      version = convertToGitUrl(version);\n      if (!version) {\n        // convertToGitUrl will add an error to buildmessage messages\n        return;\n      }\n    }\n\n    const newId = newPluginId(id);\n\n    if (newId) {\n      // If the plugin has already been added using the new ID, we do not\n      // overwrite the version.\n      if (!_.has(pluginVersions, newId)) {\n        newPluginVersions[newId] = version;\n      }\n    } else {\n      newPluginVersions[id] = version;\n    }\n  });\n\n  return newPluginVersions;\n}\n\n// Convert old-style GitHub tarball URLs to new Git URLs, and check if other\n// Git URLs contain a SHA reference.\nexport function convertToGitUrl(url) {\n  buildmessage.assertInJob();\n\n  // Matches GitHub tarball URLs, like:\n  // https://github.com/meteor/com.meteor.cordova-update/tarball/92fe99b7248075318f6446b288995d4381d24cd2\n  const match =\n    url.match(/^https?:\\/\\/github.com\\/(.+?)\\/(.+?)\\/tarball\\/([0-9a-f]{40})/);\n  if (match) {\n      const [, organization, repository, sha] = match;\n    // Convert them to a Git URL\n    return `https://github.com/${organization}/${repository}.git#${sha}`;\n  // We only support Git URLs with a SHA reference to guarantee repeatability\n  // of builds\n  } else if (/\\.git#[0-9a-f]{40}/.test(url)) {\n    return url;\n  } else {\n    buildmessage.error(`Meteor no longer supports installing Cordova plugins \\\nfrom arbitrary tarball URLs. You can either add a plugin from a Git URL with \\\na SHA reference, or from a local path. (Attempting to install from ${url}.)`);\n    return null;\n  }\n}\n\nfunction displayNameForHostPlatform(platform = process.platform) {\n  switch (platform) {\n    case 'darwin':\n      return \"Mac\";\n    case 'linux':\n      return \"Linux\";\n    case 'win32':\n      return \"Windows\";\n  }\n}\n"]}