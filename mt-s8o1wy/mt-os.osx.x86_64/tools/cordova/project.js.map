{"version":3,"sources":["/tools/cordova/project.js"],"names":["_","util","assert","chalk","semver","files","utils","Console","buildmessage","main","httpHelpers","execFileSync","execFileAsync","cordova","cordova_lib","events","cordova_events","CordovaError","cordova_util","superspawn","PluginInfoProvider","CORDOVA_PLATFORMS","CORDOVA_PLATFORM_VERSIONS","displayNameForPlatform","displayNamesForPlatforms","newPluginId","convertPluginVersions","convertToGitUrl","CordovaBuilder","on","logIfVerbose","log","verbose","args","rawInfo","format","apply","pinnedPlatformVersions","pinnedPluginVersions","CordovaProject","projectContext","options","projectRoot","getProjectLocalDirectory","pluginsDir","pathJoin","createIfNeeded","assertInJob","exists","installedPlatforms","listInstalledPlatforms","outdated","some","pinnedVersion","platform","contains","installedVersion","installedVersionForPlatform","lt","debug","rm_recursive","templatePath","mkdtemp","mkdir_p","builder","mobileServerUrl","settingsFile","processControlFile","jobHasMessages","writeConfigXmlAndCopyResources","pathDirname","config","lib","www","url","convertToOSPath","template","runCommands","raw","create","undefined","prepareFromAppBundle","bundlePath","pluginVersions","copyWWW","ensurePlatformsAreSynchronized","ensurePluginsAreSynchronized","pluginsConfiguration","iosBuildExtrasPath","writeFile","copyBuildOverride","prepareForPlatform","require","cache","commandOptions","extend","defaultOptions","platforms","prepare","buildForPlatform","extraPaths","build","run","isDevice","push","env","defaultEnvWithPathsAdded","command","cwd","stdio","waitForClose","checkPlatformRequirements","process","warn","inProject","info","allRequirements","requirements","error","message","reject","requirement","id","satisfied","every","installed","name","success","reason","metadata","failInfo","listPlatforms","updatePlatforms","addPlatform","version","platformSpec","removePlatform","cordovaPlatformsInApp","assertInCapture","listInstalledPluginVersions","pluginInfoProvider","installedPluginVersions","getAllWithinSearchPath","fetchedPluginVersions","listFetchedPluginVersions","object","map","pluginInfo","fetchJsonPath","fetchedPluginsMetadata","JSON","parse","readFile","source","type","split","ref","path","targetForPlugin","isUrlWithSha","isUrlWithFileScheme","pluginPath","resolveLocalPluginPath","stat","statOrNull","isDirectory","substr","length","isPathRelative","pathResolve","projectDir","addPlugin","target","cli_variables","link","plugin","removePlugins","plugins","isEmpty","enterJob","title","ensurePinnedPluginVersions","newId","labelWarn","shouldReinstallAllPlugins","pluginsFromLocalPath","each","isPluginFromLocalPath","has","pluginsToRemove","Object","keys","intersection","pluginVersionsToInstall","pluginsToInstallCount","size","installedPluginsCount","reportProgress","current","end","paths","defaultPaths","unshift","currentEnvWithPathsAdded","promiseOrAsyncFunction","toUpperCase","slice","oldCwd","chdir","oldEnv","forEach","key","promise","Promise","await","arrowError","consoleOptions","indent","errorMessage","stack","green","ExitWithCode","platformList","getCordovaPlatforms","silent","nodeBinDir","getCurrentNodeBinDir","iosSimBinPath","getDevBundle"],"mappings":"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","file":"tools/cordova/project.js.map","sourcesContent":["import _ from 'underscore';\nimport util from 'util';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport semver from 'semver';\n\nimport files from '../fs/files.js';\nimport utils from '../utils/utils.js';\nimport { Console } from '../console/console.js';\nimport buildmessage from '../utils/buildmessage.js';\nimport main from '../cli/main.js';\nimport httpHelpers from '../utils/http-helpers.js';\nimport { execFileSync, execFileAsync } from '../utils/processes.js';\n\nimport './protect-string-proto.js'; // must always come before 'cordova-lib'\nimport { cordova as cordova_lib, events as cordova_events, CordovaError }\n  from 'cordova-lib';\nimport cordova_util from 'cordova-lib/src/cordova/util.js';\nimport superspawn from 'cordova-common/src/superspawn.js';\nimport PluginInfoProvider from 'cordova-common/src/PluginInfo/PluginInfoProvider.js';\n\nimport { CORDOVA_PLATFORMS, CORDOVA_PLATFORM_VERSIONS, displayNameForPlatform, displayNamesForPlatforms,\n  newPluginId, convertPluginVersions, convertToGitUrl } from './index.js';\nimport { CordovaBuilder } from './builder.js';\n\ncordova_events.on('verbose', logIfVerbose);\ncordova_events.on('log', logIfVerbose);\ncordova_events.on('info', logIfVerbose);\ncordova_events.on('warn', log);\ncordova_events.on('error', log);\n\ncordova_events.on('results', logIfVerbose);\n\nfunction logIfVerbose(...args) {\n  if (Console.verbose) {\n    log(...args);\n  }\n};\n\nfunction log(...args) {\n  Console.rawInfo(`%% ${util.format.apply(null, args)}\\n`);\n}\n\n// We pin platform versions ourselves instead of relying on cordova-lib\n// so we we can update them independently (e.g. use Cordova iOS 4.0.1\n// with Cordova 5.4.1)\nconst pinnedPlatformVersions = CORDOVA_PLATFORM_VERSIONS;\n\n// We pin plugin versions to make sure we do not install versions that are\n// incompatible with the current platform versions.\n// Versions are taken from cordova-lib's package.json and should be updated\n// when we update to a newer version of cordova-lib.\nconst pinnedPluginVersions = {\n  \"cordova-plugin-battery-status\": \"1.2.0\",\n  \"cordova-plugin-camera\": \"2.3.0\",\n  \"cordova-plugin-console\": \"1.0.4\",\n  \"cordova-plugin-contacts\": \"2.2.0\",\n  \"cordova-plugin-device\": \"1.1.3\",\n  \"cordova-plugin-device-motion\": \"1.2.2\",\n  \"cordova-plugin-device-orientation\": \"1.0.4\",\n  \"cordova-plugin-dialogs\": \"1.3.0\",\n  \"cordova-plugin-file\": \"4.3.0\",\n  \"cordova-plugin-file-transfer\": \"1.6.0\",\n  \"cordova-plugin-geolocation\": \"2.3.0\",\n  \"cordova-plugin-globalization\": \"1.0.4\",\n  \"cordova-plugin-inappbrowser\": \"1.5.0\",\n  \"cordova-plugin-legacy-whitelist\": \"1.1.1\",\n  \"cordova-plugin-media\": \"2.4.0\",\n  \"cordova-plugin-media-capture\": \"1.4.0\",\n  \"cordova-plugin-network-information\": \"1.3.0\",\n  \"cordova-plugin-splashscreen\": \"4.0.0\",\n  \"cordova-plugin-statusbar\": \"2.2.0\",\n  \"cordova-plugin-test-framework\": \"1.1.3\",\n  \"cordova-plugin-vibration\": \"2.1.2\",\n  \"cordova-plugin-whitelist\": \"1.3.0\",\n  \"cordova-plugin-wkwebview-engine\": \"1.1.0\"\n}\n\nexport class CordovaProject {\n  constructor(projectContext, options = {}) {\n\n    this.projectContext = projectContext;\n\n    this.projectRoot = projectContext.getProjectLocalDirectory('cordova-build');\n    this.options = options;\n\n    this.pluginsDir = files.pathJoin(this.projectRoot, 'plugins');\n\n    this.createIfNeeded();\n  }\n\n  createIfNeeded() {\n    buildmessage.assertInJob();\n\n    // Check if we have an existing Cordova project directory with outdated\n    // platforms. In that case, we remove the whole directory to avoid issues.\n    if (files.exists(this.projectRoot)) {\n      const installedPlatforms = this.listInstalledPlatforms();\n\n      const outdated = _.some(pinnedPlatformVersions, (pinnedVersion, platform) => {\n        // If the platform is not installed, it cannot be outdated\n        if (!_.contains(installedPlatforms, platform)) {\n          return false;\n        }\n\n        const installedVersion = this.installedVersionForPlatform(platform);\n        // If we cannot establish the installed version, we consider it outdated\n        if (!installedVersion) {\n          return true;\n        }\n\n        return semver.lt(installedVersion, pinnedVersion);\n      });\n\n      if (outdated) {\n        Console.debug(`Removing Cordova project directory to avoid issues with\noutdated platforms`);\n        // Remove Cordova project directory to start afresh\n        // and avoid a broken project\n        files.rm_recursive(this.projectRoot);\n      }\n    }\n\n    if (!files.exists(this.projectRoot)) {\n      // We create a temporary directory with a generated config.xml\n      // to use as a template for creating the Cordova project\n      // This way, we are not dependent on the contents of\n      // cordova-app-hello-world but we base our initial project state on\n      // our own defaults and optionally a mobile-config.js\n\n      const templatePath = files.mkdtemp('cordova-template-');\n\n      // If we don't create an empty hooks directory, cordova-lib will attempt\n      // to install one from a hardcoded path to cordova-app-hello-world\n      files.mkdir_p(files.pathJoin(templatePath, 'hooks'));\n\n      // If we don't create an empty www directory, cordova-lib will get\n      // confused\n      files.mkdir_p(files.pathJoin(templatePath, 'www'));\n\n      const builder = new CordovaBuilder(this.projectContext, templatePath,\n        { mobileServerUrl, settingsFile } = this.options);\n\n      builder.processControlFile();\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Don't copy resources (they will be copied as part of the prepare)\n      builder.writeConfigXmlAndCopyResources(false);\n\n      // Create the Cordova project root directory\n      files.mkdir_p(files.pathDirname(this.projectRoot));\n\n      const config = {\n        lib: {\n          www: {\n            url: files.convertToOSPath(templatePath),\n            template: true\n          }\n        }\n      };\n\n      // Don't set cwd to project root in runCommands because it doesn't\n      // exist yet\n      this.runCommands('creating Cordova project', async () => {\n        // No need to pass in appName and appId because these are set from\n        // the generated config.xml\n        await cordova_lib.raw.create(files.convertToOSPath(this.projectRoot),\n          undefined, undefined, config);\n      }, undefined, null);\n    }\n  }\n\n  // Preparing\n\n  prepareFromAppBundle(bundlePath, pluginVersions) {\n    assert(bundlePath);\n    assert(pluginVersions);\n\n    buildmessage.assertInJob();\n\n    Console.debug('Preparing Cordova project from app bundle');\n\n    const builder = new CordovaBuilder(this.projectContext, this.projectRoot,\n      { mobileServerUrl, settingsFile } = this.options);\n\n    builder.processControlFile();\n\n    if (buildmessage.jobHasMessages()) {\n      return;\n    }\n\n    builder.writeConfigXmlAndCopyResources();\n    builder.copyWWW(bundlePath);\n\n    this.ensurePlatformsAreSynchronized();\n    this.ensurePluginsAreSynchronized(pluginVersions,\n      builder.pluginsConfiguration);\n\n    // Temporary workaround for Cordova iOS bug until\n    // https://issues.apache.org/jira/browse/CB-10885 is fixed\n    const iosBuildExtrasPath =\n      files.pathJoin(\n        this.projectRoot,\n        'platforms/ios/cordova/build-extras.xcconfig');\n\n    if (files.exists(iosBuildExtrasPath)) {\n      files.writeFile(\n        iosBuildExtrasPath,\n        'LD_RUNPATH_SEARCH_PATHS = @executable_path/Frameworks;');\n    }\n\n    builder.copyBuildOverride();\n  }\n\n  prepareForPlatform(platform) {\n    assert(platform);\n\n    // Temporary workaround for Cordova iOS bug until\n    // https://issues.apache.org/jira/browse/CB-11731 has been released\n    delete require.cache[files.pathJoin(this.projectRoot,\n      'platforms/ios/cordova/lib/configMunger.js')];\n    delete require.cache[files.pathJoin(this.projectRoot,\n      'platforms/ios/cordova/lib/prepare.js')];\n\n    const commandOptions = _.extend(this.defaultOptions,\n      { platforms: [platform] });\n\n    this.runCommands(`preparing Cordova project for platform \\\n${displayNameForPlatform(platform)}`, async () => {\n      await cordova_lib.raw.prepare(commandOptions);\n    });\n  }\n\n  // Building (includes prepare)\n\n  buildForPlatform(platform, options = {}, extraPaths) {\n    assert(platform);\n\n    const commandOptions = _.extend(this.defaultOptions,\n      { platforms: [platform], options: options });\n\n    this.runCommands(`building Cordova app for platform \\\n${displayNameForPlatform(platform)}`, async () => {\n      await cordova_lib.raw.build(commandOptions);\n    });\n  }\n\n  // Running\n\n  async run(platform, isDevice, options = [], extraPaths = []) {\n    options.push(isDevice ? '--device' : '--emulator');\n\n    let env = this.defaultEnvWithPathsAdded(...extraPaths);\n\n    let command = files.convertToOSPath(files.pathJoin(\n      this.projectRoot, 'platforms', platform, 'cordova', 'run'));\n\n    this.runCommands(`running Cordova app for platform \\\n${displayNameForPlatform(platform)} with options ${options}`,\n    execFileAsync(command, options, {\n      env: env,\n      cwd: this.projectRoot,\n      stdio: Console.verbose ? 'inherit' : 'pipe',\n      waitForClose: false\n    }), null, null);\n  }\n\n  // Platforms\n\n  // Checks to see if the requirements for building and running on the\n  // specified Cordova platform are satisfied, printing\n  // installation instructions when needed.\n  checkPlatformRequirements(platform) {\n    if (platform === 'ios' && process.platform !== 'darwin') {\n      Console.warn(\"Currently, it is only possible to build iOS apps \\\non an OS X system.\");\n      return false;\n    }\n\n    const installedPlatforms = this.listInstalledPlatforms();\n\n    const inProject = _.contains(installedPlatforms, platform);\n    if (!inProject) {\n      Console.warn(`Please add the ${displayNameForPlatform(platform)} \\\nplatform to your project first.`);\n      Console.info(`Run: ${Console.command(`meteor add-platform ${platform}`)}`);\n      return false;\n    }\n\n    const allRequirements = this.runCommands(`checking Cordova \\\nrequirements for platform ${displayNameForPlatform(platform)}`,\n      async () => {\n        return await cordova_lib.raw.requirements([platform],\n          this.defaultOptions);\n      });\n    let requirements = allRequirements && allRequirements[platform];\n    if (!requirements) {\n      Console.error(`Failed to check requirements for platform \\\n${displayNameForPlatform(platform)}`);\n      return false;\n    } else if (requirements instanceof CordovaError) {\n      Console.error(`Cordova error: ${requirements.message}`);\n      return false;\n    }\n\n    // We don't use ios-deploy, but open Xcode to run on a device instead\n    requirements = _.reject(requirements,\n      requirement => requirement.id === 'ios-deploy');\n\n    const satisfied = _.every(requirements,\n      requirement => requirement.installed);\n\n    if (!satisfied) {\n      Console.info();\n      Console.info(`Your system does not yet seem to fulfill all requirements \\\nto build apps for ${displayNameForPlatform(platform)}.`);\n\n      Console.info();\n      Console.info(\"Please follow the installation instructions in the mobile guide:\");\n      Console.info(Console.url(\"http://guide.meteor.com/mobile.html#installing-prerequisites\"));\n\n      Console.info();\n\n      Console.info(\"Status of the individual requirements:\");\n      for (requirement of requirements) {\n        const name = requirement.name;\n        if (requirement.installed) {\n          Console.success(name, \"installed\");\n        } else {\n          const reason = requirement.metadata && requirement.metadata.reason;\n          if (reason) {\n            Console.failInfo(`${name}: ${reason}`);\n          } else {\n            Console.failInfo(name);\n          }\n        }\n      }\n    }\n    return satisfied;\n  }\n\n  listInstalledPlatforms() {\n    return cordova_util.listPlatforms(files.convertToOSPath(this.projectRoot));\n  }\n\n  installedVersionForPlatform(platform) {\n    const command = files.convertToOSPath(files.pathJoin(\n      this.projectRoot, 'platforms', platform, 'cordova', 'version'));\n    // Make sure the command exists before trying to execute it\n    if (files.exists(command)) {\n      return this.runCommands(\n        `getting installed version for platform ${platform} in Cordova project`,\n        execFileSync(command, {\n          env: this.defaultEnvWithPathsAdded(),\n          cwd: this.projectRoot}), null, null);\n    } else {\n      return null;\n    }\n  }\n\n  updatePlatforms(platforms = this.listInstalledPlatforms()) {\n    this.runCommands(`updating Cordova project for platforms \\\n${displayNamesForPlatforms(platforms)}`, async () => {\n      await cordova_lib.raw.platform('update', platforms, this.defaultOptions);\n    });\n  }\n\n  addPlatform(platform) {\n    this.runCommands(`adding platform ${displayNameForPlatform(platform)} \\\nto Cordova project`, async () => {\n      let version = pinnedPlatformVersions[platform];\n      let platformSpec = version ? `${platform}@${version}` : platform;\n      await cordova_lib.raw.platform('add', platformSpec, this.defaultOptions);\n    });\n  }\n\n  removePlatform(platform) {\n    this.runCommands(`removing platform ${displayNameForPlatform(platform)} \\\nfrom Cordova project`, async () => {\n      await cordova_lib.raw.platform('rm', platform, this.defaultOptions);\n    });\n  }\n\n  get cordovaPlatformsInApp() {\n    return this.projectContext.platformList.getCordovaPlatforms();\n  }\n\n  // Ensures that the Cordova platforms are synchronized with the app-level\n  // platforms.\n  ensurePlatformsAreSynchronized(platforms = this.cordovaPlatformsInApp) {\n    buildmessage.assertInCapture();\n\n    const installedPlatforms = this.listInstalledPlatforms();\n\n    for (platform of platforms) {\n      if (_.contains(installedPlatforms, platform)) {\n        continue;\n      }\n\n      this.addPlatform(platform);\n    }\n\n    for (platform of installedPlatforms) {\n      if (!_.contains(platforms, platform) &&\n        _.contains(CORDOVA_PLATFORMS, platform)) {\n        this.removePlatform(platform);\n      }\n    }\n  }\n\n  // Plugins\n\n  // Because PluginInfoProvider reads in the plugin versions from\n  // their plugin.xml, that only gives us the declared version and doesn't\n  // tell us if plugins have been fetched from a Git SHA URL or a local path.\n  // So we overwrite the declared versions with versions from\n  // listFetchedPluginVersions that do contain this information.\n  listInstalledPluginVersions() {\n    const pluginInfoProvider = new PluginInfoProvider();\n    const installedPluginVersions = pluginInfoProvider.getAllWithinSearchPath(\n      files.convertToOSPath(this.pluginsDir));\n    const fetchedPluginVersions = this.listFetchedPluginVersions();\n    return _.object(installedPluginVersions.map(pluginInfo => {\n      const id = pluginInfo.id;\n      const version = fetchedPluginVersions[id] || pluginInfo.version;\n      return [id, version];\n    }));\n  }\n\n  // There is no Cordova function to get the fetched plugin versions, so we\n  // have to read in fetch.json (a file managed by plugman, a semi-independent\n  // part of cordova-lib) and parse the format ourselves into a version\n  // string suitable to be passed to targetForPlugin.\n  // Note that a plugin can be fetched but not installed, so that's why we\n  // still need a separate listInstalledPluginVersions.\n  listFetchedPluginVersions() {\n    const fetchJsonPath = files.pathJoin(this.pluginsDir, 'fetch.json');\n\n    if (!files.exists(fetchJsonPath)) {\n      return {};\n    }\n\n    const fetchedPluginsMetadata = JSON.parse(files.readFile(\n      fetchJsonPath, 'utf8'));\n    return _.object(_.map(fetchedPluginsMetadata, (metadata, id) => {\n      const source = metadata.source;\n      let version;\n      if (source.type === 'registry') {\n        version = source.id.split('@')[1];\n      } else if (source.type === 'git') {\n        version = `${source.url}#${source.ref}`;\n      } else if (source.type === 'local') {\n        version = `file://${source.path}`;\n      }\n      return [id, version];\n    }));\n  }\n\n  // Construct a target suitable for 'cordova plugin add' from an id and\n  // version, converting or resolving a URL or path where needed.\n  targetForPlugin(id, version) {\n    assert(id);\n    assert(version);\n\n    buildmessage.assertInJob();\n\n    if (utils.isUrlWithSha(version)) {\n      return convertToGitUrl(version);\n    } else if (utils.isUrlWithFileScheme(version)) {\n      // Strip file:// and resolve the path relative to the cordova-build\n      // directory\n      const pluginPath = this.resolveLocalPluginPath(version);\n      // We need to check if the directory exists ourselves because Cordova\n      // will try to install from npm (and fail with an unhelpful error message)\n      // if the directory is not found\n      const stat = files.statOrNull(pluginPath);\n      if (!(stat && stat.isDirectory())) {\n        buildmessage.error(`Couldn't find local directory \\\n'${files.convertToOSPath(pluginPath)}' \\\n(while attempting to install plugin ${id}).`);\n        return null;\n      }\n      return files.convertToOSPath(pluginPath);\n    } else {\n      return `${id}@${version}`;\n    }\n  }\n\n  // Strips file:// and resolves the path relative to the cordova-build\n  // directory\n  resolveLocalPluginPath(pluginPath) {\n    pluginPath = pluginPath.substr(\"file://\".length);\n    if (utils.isPathRelative(pluginPath)) {\n      return files.pathResolve(this.projectContext.projectDir, pluginPath);\n    } else {\n      return pluginPath;\n    }\n  }\n\n  addPlugin(id, version, config = {}) {\n    const target = this.targetForPlugin(id, version);\n    if (target) {\n      const commandOptions = _.extend(this.defaultOptions,\n        { cli_variables: config, link: utils.isUrlWithFileScheme(version) });\n\n      this.runCommands(`adding plugin ${target} \\\nto Cordova project`, async () => {\n        await cordova_lib.raw.plugin('add', [target], commandOptions);\n      });\n    }\n  }\n\n  // plugins is an array of plugin IDs.\n  removePlugins(plugins) {\n    if (_.isEmpty(plugins)) {\n      return;\n    }\n\n    this.runCommands(`removing plugins ${plugins} \\\nfrom Cordova project`, async () => {\n      await cordova_lib.raw.plugin('rm', plugins, this.defaultOptions);\n    });\n  }\n\n  // Ensures that the Cordova plugins are synchronized with the app-level\n  // plugins.\n  ensurePluginsAreSynchronized(pluginVersions, pluginsConfiguration = {}) {\n    assert(pluginVersions);\n\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob({ title: \"installing Cordova plugins\"}, () => {\n      // Cordova plugin IDs have changed as part of moving to npm.\n      // We convert old plugin IDs to new IDs in the 1.2.0-cordova-changes\n      // upgrader and when adding plugins, but packages may still depend on\n      // the old IDs.\n      // To avoid attempts at duplicate installation, we check for old IDs here\n      // and convert them to new IDs when needed. We also convert old-style GitHub\n      // tarball URLs to new Git URLs, and check if other Git URLs contain a\n      // SHA reference.\n      pluginVersions = convertPluginVersions(pluginVersions);\n\n      // To ensure we do not attempt to install plugin versions incompatible\n      // with the current platform versions, we compare them against a list of\n      // pinned versions and adjust them if necessary.\n      this.ensurePinnedPluginVersions(pluginVersions);\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Also, we warn if any App.configurePlugin calls in mobile-config.js\n      // need to be updated (and in the meantime we take care of the\n      // conversion of the plugin configuration to the new ID).\n      pluginsConfiguration = _.object(_.map(pluginsConfiguration, (config, id) => {\n        const newId = newPluginId(id);\n        if (newId) {\n          Console.warn();\n          Console.labelWarn(`Cordova plugin ${id} has been renamed to ${newId} \\\nas part of moving to npm. Please change the App.configurePlugin call in \\\nmobile-config.js accordingly.`);\n          return [newId, config];\n        } else {\n          return [id, config];\n        }\n      }));\n\n      const installedPluginVersions =\n        convertPluginVersions(this.listInstalledPluginVersions());\n\n      // Due to the dependency structure of Cordova plugins, it is impossible to\n      // upgrade the version on an individual Cordova plugin. Instead, whenever\n      // a new Cordova plugin is added or removed, or its version is changed,\n      // we just reinstall all of the plugins.\n      let shouldReinstallAllPlugins = false;\n\n      // Iterate through all of the plugins and find if any of them have a new\n      // version. Additionally, check if we have plugins installed from a local\n      // path.\n      const pluginsFromLocalPath = {};\n      _.each(pluginVersions, (version, id) => {\n        // Check if plugin is installed from a local path.\n        const isPluginFromLocalPath = utils.isUrlWithFileScheme(version);\n\n        if (isPluginFromLocalPath) {\n          pluginsFromLocalPath[id] = version;\n        } else {\n          if (!_.has(installedPluginVersions, id) ||\n            installedPluginVersions[id] !== version) {\n            // We do not have the plugin installed or the version has changed.\n            shouldReinstallAllPlugins = true;\n          }\n        }\n      });\n\n      if (!_.isEmpty(pluginsFromLocalPath)) {\n        Console.debug('Reinstalling Cordova plugins added from the local path');\n      }\n\n      // Check to see if we have any installed plugins that are not in the\n      // current set of plugins.\n      _.each(installedPluginVersions, (version, id) => {\n        if (!_.has(pluginVersions, id)) {\n          shouldReinstallAllPlugins = true;\n        }\n      });\n\n      // We either reinstall all plugins or only those fetched from a local\n      // path.\n      if (shouldReinstallAllPlugins || !_.isEmpty(pluginsFromLocalPath)) {\n        let pluginsToRemove;\n        if (shouldReinstallAllPlugins) {\n          pluginsToRemove = Object.keys(installedPluginVersions);\n        } else {\n          // Only try to remove plugins that are currently installed.\n          pluginsToRemove = _.intersection(\n            Object.keys(pluginsFromLocalPath),\n            Object.keys(installedPluginVersions));\n        }\n\n        this.removePlugins(pluginsToRemove);\n\n        // Now install the necessary plugins.\n        if (shouldReinstallAllPlugins) {\n          pluginVersionsToInstall = pluginVersions;\n        } else {\n          pluginVersionsToInstall = pluginsFromLocalPath;\n        }\n\n        const pluginsToInstallCount = _.size(pluginVersionsToInstall);\n        let installedPluginsCount = 0;\n\n        buildmessage.reportProgress({ current: 0, end: pluginsToInstallCount });\n        _.each(pluginVersionsToInstall, (version, id) => {\n          this.addPlugin(id, version, pluginsConfiguration[id]);\n\n          buildmessage.reportProgress({\n            current: ++installedPluginsCount,\n            end: pluginsToInstallCount\n          });\n        });\n      }\n    });\n  }\n\n  ensurePinnedPluginVersions(pluginVersions) {\n    assert(pluginVersions);\n\n    _.each(pluginVersions, (version, id) => {\n      // Skip plugin specs that are not actual versions\n      if (utils.isUrlWithSha(version) || utils.isUrlWithFileScheme(version)) {\n        return;\n      }\n\n      const pinnedVersion = pinnedPluginVersions[id];\n\n      if (pinnedVersion && semver.lt(version, pinnedVersion)) {\n        Console.labelWarn(`Attempting to install plugin ${id}@${version}, but \\\nit should have a minimum version of ${pinnedVersion} to ensure compatibility \\\nwith the current platform versions. Installing the minimum version for \\\nconvenience, but you should adjust your dependencies.`);\n        pluginVersions[id] = pinnedVersion;\n      }\n    });\n  }\n\n  // Cordova commands support\n\n  get defaultOptions() {\n    return { silent: !Console.verbose, verbose: Console.verbose };\n  }\n\n  defaultEnvWithPathsAdded(...extraPaths) {\n    let paths = (this.defaultPaths || []);\n    paths.unshift(...extraPaths);\n    const env = files.currentEnvWithPathsAdded(...paths);\n    return env;\n  }\n\n  get defaultPaths() {\n    const nodeBinDir = files.getCurrentNodeBinDir();\n\n    // Add the ios-sim bin path so Cordova can find it\n    const iosSimBinPath =\n      files.pathJoin(files.getDevBundle(),\n      'lib/node_modules/ios-sim/bin');\n\n    return [nodeBinDir, iosSimBinPath];\n  }\n\n  runCommands(title, promiseOrAsyncFunction, env = this.defaultEnvWithPathsAdded(),\n    cwd = this.projectRoot) {\n    // Capitalize title for debug output\n    Console.debug(title[0].toUpperCase() + title.slice(1));\n\n    const oldCwd = process.cwd();\n    if (cwd) {\n      process.chdir(files.convertToOSPath(cwd));\n    }\n\n    const oldEnv = process.env;\n    if (env) {\n      // this preserves case insensitivity for PATH on windows\n      Object.keys(env).forEach(key => {\n        process.env[key] = env[key];\n      });\n    }\n\n    try {\n      const promise = (typeof promiseOrAsyncFunction === 'function') ?\n        promiseOrAsyncFunction() : promiseOrAsyncFunction;\n      return Promise.await(promise);\n    } catch (error) {\n      Console.arrowError('Errors executing Cordova commands:');\n      Console.error();\n      const consoleOptions = Console.options({ indent: 3 });\n      Console.error(`While ${title}:`, consoleOptions);\n\n      if (error instanceof CordovaError) {\n        // Only print the message for errors thrown by cordova-lib, because\n        // these are meant for end-user consumption.\n        // But warn that they may not completely apply to our situation.\n        // (We do print the stack trace if we are in verbose mode.)\n        const errorMessage = Console.verbose ? (error.stack || error.message) :\n          error.message;\n        Console.error(`Cordova error: ${errorMessage}`, consoleOptions);\n        Console.error(chalk.green(`(If the error message contains suggestions \\\nfor a fix, note that this may not apply to the Meteor integration. You can try \\\nrunning again with the --verbose option to help diagnose the issue.)`),\n          consoleOptions);\n      } else {\n        // Print stack trace for other errors by default, because the message\n        // usually does not give us enough information to know what is going on\n        const errorMessage = error && error.stack || error;\n        Console.error(errorMessage, consoleOptions);\n      };\n      throw new main.ExitWithCode(1);\n    } finally {\n      if (cwd && oldCwd) {\n        process.chdir(oldCwd);\n      }\n      if (env && oldEnv) {\n        process.env = oldEnv;\n      }\n    }\n  }\n}\n"]}