{"version":3,"sources":["/tools/console/progress.js"],"names":["_","require","Progress","options","self","_lastState","_parent","parent","_watchers","watchers","_title","title","toUpperCase","slice","_forkJoin","forkJoin","_allTasks","_selfState","current","done","_state","clone","_isDone","startTime","Date","extend","prototype","toString","JSON","stringify","reportProgressDone","state","end","undefined","reportProgress","getCurrentProgress","isRoot","length","candidates","map","task","active","filter","s","addChildTask","child","push","_reportChildState","dump","stream","prefix","skipDone","write","each","_updateTotalState","Console","nudge","_notifyState","addWatcher","watcher","allChildrenDone","childState","Error","getState","exports"],"mappings":"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","file":"tools/console/progress.js.map","sourcesContent":["///\n/// utility functions for computing progress of complex tasks\n///\n/// State callback here is an object with these keys:\n///   done: bool, true if done\n///   current: number, the current progress value\n///   end: number, optional, the value of current where we expect to be done\n///\n/// If end is not set, we'll display a spinner instead of a progress bar\n///\n\nvar _ = require('underscore');\n\nvar Progress = function (options) {\n  var self = this;\n\n  options = options || {};\n\n  self._lastState = null;\n  self._parent = options.parent;\n  self._watchers = options.watchers || [];\n\n  self._title = options.title;\n  if (self._title) {\n    // Capitalize job titles when displayed in the progress bar.\n    self._title = self._title[0].toUpperCase() + self._title.slice(1);\n  }\n\n  // XXX: Should we have a strict/mdg mode that enables this test?\n  //if (!self._title && self._parent) {\n  //  throw new Error(\"No title passed\");\n  //}\n\n  self._forkJoin = options.forkJoin;\n\n  self._allTasks = [];\n\n  self._selfState = { current: 0, done: false };\n  self._state = _.clone(self._selfState);\n\n  self._isDone = false;\n\n  self.startTime = +(new Date);\n};\n\n_.extend(Progress.prototype, {\n  toString: function() {\n    var self = this;\n    return \"Progress [state=\" + JSON.stringify(self._state) + \"]\";\n  },\n\n  reportProgressDone: function () {\n    var self = this;\n\n    var state = _.clone(self._selfState);\n    state.done = true;\n    if (state.end !== undefined) {\n      if (state.current > state.end) {\n        state.end = state.current;\n      }\n      state.current = state.end;\n    }\n    self.reportProgress(state);\n  },\n\n  // Tries to determine which is the 'current' job in the tree\n  // This is very heuristical... we use some hints, like:\n  // don't descend into fork-join jobs; we know these execute concurrently,\n  // so we assume the top-level task has the title\n  // i.e. \"Downloading packages\", not \"downloading supercool-1.0\"\n  getCurrentProgress: function () {\n    var self = this;\n\n    var isRoot = !self._parent;\n\n    if (self._isDone) {\n      // A done task cannot be the active task\n      return null;\n    }\n\n    if (!self._state.done && (self._state.current != 0) && self._state.end &&\n        !isRoot) {\n      // We are not done and we have interesting state to report\n      return self;\n    }\n\n    if (self._forkJoin) {\n      // Don't descend into fork-join tasks (by choice)\n      return self;\n    }\n\n    if (self._allTasks.length) {\n      var candidates = _.map(self._allTasks, function (task) {\n        return task.getCurrentProgress();\n      });\n      var active = _.filter(candidates, function (s) {\n        return !!s;\n      });\n      if (active.length) {\n        // pick one to display, somewhat arbitrarily\n        return active[active.length - 1];\n      }\n      // No single active task, return self\n      return self;\n    }\n\n    return self;\n  },\n\n  // Creates a subtask that must be completed as part of this (bigger) task\n  addChildTask: function (options) {\n    var self = this;\n    options = _.extend({ parent: self }, options || {});\n    var child = new Progress(options);\n    self._allTasks.push(child);\n    self._reportChildState(child, child._state);\n    return child;\n  },\n\n  // Dumps the tree, for debug\n  dump: function (stream, options, prefix) {\n    var self = this;\n\n    options = options || {};\n    if (options.skipDone && self._isDone) {\n      return;\n    }\n\n    if (prefix) {\n      stream.write(prefix);\n    }\n    var end = self._state.end;\n    if (!end) {\n      end = '?';\n    }\n    stream.write(\"Task [\" + self._title + \"] \" + self._state.current + \"/\" + end\n      + (self._isDone ? \" done\" : \"\") +\"\\n\");\n    if (self._allTasks.length) {\n      _.each(self._allTasks, function (child) {\n        child.dump(stream, options, (prefix || '') + '  ');\n      });\n    }\n  },\n\n  // Receives a state report indicating progress of self\n  reportProgress: function (state) {\n    var self = this;\n\n    self._selfState = state;\n\n    self._updateTotalState();\n\n    // Nudge the spinner/progress bar, but don't yield (might not be safe to yield)\n    require('./console.js').Console.nudge(false);\n\n    self._notifyState();\n  },\n\n  // Subscribes a watcher to changes\n  addWatcher: function (watcher) {\n    var self = this;\n\n    self._watchers.push(watcher);\n  },\n\n  // Notifies watchers & parents\n  _notifyState: function () {\n    var self = this;\n\n    if (self._parent) {\n      self._parent._reportChildState(self, self._state);\n    }\n\n    if (self._watchers.length) {\n      _.each(self._watchers, function (watcher) {\n        watcher(self._state);\n      });\n    }\n  },\n\n  // Recomputes state, incorporating children's states\n  _updateTotalState: function () {\n    var self = this;\n\n    var allChildrenDone = true;\n    var state = _.clone(self._selfState);\n    _.each(self._allTasks, function (child) {\n      var childState = child._state;\n\n      if (!child._isDone) {\n        allChildrenDone = false;\n      }\n\n      state.current += childState.current;\n      if (state.end !== undefined) {\n        if (childState.done) {\n          state.end += childState.current;\n        } else if (childState.end !== undefined) {\n          state.end += childState.end;\n        } else {\n          state.end = undefined;\n        }\n      }\n    });\n    self._isDone = allChildrenDone && !!self._selfState.done;\n    if (!allChildrenDone) {\n      state.done = false;\n    }\n\n    if (!state.done && self._state.done) {\n      // This shouldn't happen\n      throw new Error(\"Progress transition from done => !done\");\n    }\n\n    self._state = state;\n  },\n\n  // Called by a child when its state changes\n  _reportChildState: function (child, state) {\n    var self = this;\n\n    self._updateTotalState();\n    self._notifyState();\n  },\n\n  getState: function() {\n    return this._state;\n  }\n});\n\nexports.Progress = Progress;\n"]}