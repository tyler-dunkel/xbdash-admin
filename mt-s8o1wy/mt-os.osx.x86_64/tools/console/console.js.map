{"version":3,"sources":["/tools/console/console.js"],"names":["_","require","readline","util","buildmessage","chalk","cleanup","utils","wordwrap","PROGRESS_DEBUG","process","env","METEOR_PROGRESS_DEBUG","FORCE_PRETTY","undefined","CARRIAGE_RETURN","platform","stdout","isTTY","Array","join","METEOR_PRETTY_OUTPUT","METEOR_COLOR","enabled","STATUS_MAX_LENGTH","PROGRESS_MAX_WIDTH","PROGRESS_BAR_FORMAT","TEMP_STATUS_LENGTH","STATUS_INTERVAL_MS","FALLBACK_STATUS","SPACE_REPLACEMENT","replaceAll","str","search","replace","split","spacesArray","spacesString","length","substring","ARROW","toFixedLength","text","pad","ProgressDisplayNone","extend","prototype","depaint","repaint","ProgressDisplayStatus","console","self","_console","_stream","_status","_wroteStatusMessage","spaces","write","updateStatus","status","_render","SpinnerRenderer","frames","start","Date","interval","asString","now","t","frame","Math","floor","ProgressBarRenderer","format","options","fmt","curr","total","maxWidth","chars","complete","incomplete","availableSpace","ratio","min","max","percent","completeLength","elapsed","eta","isNaN","toFixed","isFinite","width","round","ProgressDisplayFull","_progressBarRenderer","_headless","_spinnerRenderer","_fraction","_printedLength","_lastWrittenLine","_lastWrittenTime","updateProgress","fraction","startTime","setHeadless","headless","progressGraphic","indentColumns","streamColumns","statusColumns","progressColumns","line","fixedLength","bold","StatusPoller","_watching","_pollPromise","_throttledStatusPoll","Throttled","_startPoller","_stop","Error","sleepMs","statusPoll","stop","isAllowed","_statusPoll","rootProgress","getRootProgress","dump","skipDone","reportState","state","progressDisplay","_progressDisplay","end","done","current","watching","getCurrentProgress","getState","title","_title","addWatcher","Console","_statusPoller","_throttledYield","ThrottledYield","verbose","stderr","_pretty","_progressDisplayEnabled","_logThreshold","LEVEL_CODE_INFO","logspec","METEOR_LOG","trim","toLowerCase","LEVEL_CODE_DEBUG","onExit","sig","enableProgressDisplay","LEVEL_CODE_ERROR","LEVEL_CODE_WARN","LEVEL_ERROR","code","LEVEL_WARN","LEVEL_INFO","LEVEL_DEBUG","ConsoleOptions","o","setPretty","pretty","_updateProgressDisplay","withProgressDisplayVisible","f","originalPretty","originalProgressDisplayEnabled","setVerbose","stream","columns","nudge","canYield","_parseVariadicInput","args","msgArgs","last","initial","message","_format","isLevelEnabled","levelCode","isDebugEnabled","rawDebug","_print","debug","_prettifyMessage","isInfoEnabled","rawInfo","info","isWarnEnabled","rawWarn","warn","rawError","error","clear","msgArguments","parsedArgs","wrapOpts","indent","bulletPoint","wrappedMessage","_wrapText","level","dest","style","red","success","uglySuccessKeyword","checkmark","green","failInfo","_fail","failWarn","printFn","xmark","labelWarn","arrowError","_arrowPrint","arrowWarn","arrowInfo","printError","err","toString","stack","printMessages","messages","hasMessages","formatMessages","command","unwrapped","noWrap","url","unspaced","underline","path","noBlanks","printTwoColumns","rows","longest","each","row","col0","out","col1","substr","ignoreWidth","logArguments","apply","maxIndent","wrappedText","METEOR_NO_WORDWRAP","map","s","initIndent","newProgressDisplay","_setProgressDisplay","isHeadless","oldProgressDisplay","readLine","echo","silentStream","on","removeListener","previousProgressDisplay","rl","createInterface","input","stdin","output","terminal","EMACS","prompt","setPrompt","Promise","resolve","close","await","exports"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,IAAIC,QAAQ,YAAR,CAAR;AACA,IAAIC,WAAWD,QAAQ,UAAR,CAAf;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;AACA,IAAIG,eAAeH,QAAQ,0BAAR,CAAnB;AACA;AACA,IAAII,QAAQJ,QAAQ,OAAR,CAAZ;AACA,IAAIK,UAAUL,QAAQ,wBAAR,CAAd;AACA,IAAIM,QAAQN,QAAQ,mBAAR,CAAZ;AACA,IAAIO,WAAWP,QAAQ,UAAR,CAAf;;AAEA,IAAIQ,iBAAiB,CAAC,CAACC,QAAQC,GAAR,CAAYC,qBAAnC;AACA,IAAIC,eAAaC,SAAjB;AACA,IAAIC,kBACDL,QAAQM,QAAR,KAAqB,OAArB,IAAgCN,QAAQO,MAAR,CAAeC,KAA/C,GAAuD,IAAIC,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,IAApB,CAAvD,GAAmF,IADtF;;AAGA,IAAIV,QAAQC,GAAR,CAAYU,oBAAhB,EAAsC;AACpCR,iBAAeH,QAAQC,GAAR,CAAYU,oBAAZ,IAAoC,GAAnD;AACD;;AAED,IAAI,CAAEX,QAAQC,GAAR,CAAYW,YAAlB,EAAgC;AAC9BjB,QAAMkB,OAAN,GAAgB,KAAhB;AACD;;AAED,IAAIC,oBAAoB,EAAxB;;AAEA,IAAIC,qBAAqB,EAAzB;AACA,IAAIC,sBAAsB,uBAA1B;AACA,IAAIC,qBAAqBH,oBAAoB,EAA7C;;AAEA,IAAII,qBAAqB,EAAzB;;AAEA;AACA;AACA,IAAIC,kBAAkB,EAAtB;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIC,oBAAoB,QAAxB;AACA;AACA;AACA,IAAIC,aAAa,SAAbA,UAAa,CAAUC,GAAV,EAAeC,MAAf,EAAuBC,OAAvB,EAAgC;AAChD,SAAOF,IAAIG,KAAJ,CAAUF,MAAV,EAAkBb,IAAlB,CAAuBc,OAAvB,CAAP;AACA,CAFD;;AAIA,IAAIE,cAAc,IAAIjB,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,GAApB,CAAlB;AACA,IAAIiB,eAAe,SAAfA,YAAe,CAAUC,MAAV,EAAkB;AACnC,MAAIA,SAASF,YAAYE,MAAzB,EAAiC;AAC/BF,kBAAc,IAAIjB,KAAJ,CAAUmB,SAAS,CAAnB,EAAsBlB,IAAtB,CAA2B,GAA3B,CAAd;AACD;AACD,SAAOgB,YAAYG,SAAZ,CAAsB,CAAtB,EAAyBD,MAAzB,CAAP;AACD,CALD;AAMA,IAAIE,QAAQ,KAAZ;;AAGA,IAAIC,gBAAgB,SAAhBA,aAAgB,CAAUC,IAAV,EAAgBJ,MAAhB,EAAwB;AAC1CI,SAAOA,QAAQ,EAAf;;AAEA;AACA,MAAIC,MAAML,SAASI,KAAKJ,MAAxB;AACA,MAAIK,MAAM,CAAV,EAAa;AACX;AACAD,WAAOA,KAAKH,SAAL,CAAe,CAAf,EAAkBD,SAAS,CAA3B,IAAgC,KAAvC;AACD,GAHD,MAGO,IAAIK,MAAM,CAAV,EAAa;AAClB;AACAD,WAAOA,OAAOL,aAAaM,GAAb,CAAd;AACD;AACD,SAAOD,IAAP;AACD,CAbD;;AAeA;AACA;AACA,IAAIE,sBAAsB,SAAtBA,mBAAsB,GAAY,CACrC,CADD;;AAGA5C,EAAE6C,MAAF,CAASD,oBAAoBE,SAA7B,EAAwC;AACtCC,WAAS,mBAAY;AACnB;AACD,GAHqC;;AAKtCC,WAAS,mBAAY;AACnB;AACD;AAPqC,CAAxC;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,wBAAwB,SAAxBA,qBAAwB,CAAUC,OAAV,EAAmB;AAC7C,MAAIC,OAAO,IAAX;;AAEAA,OAAKC,QAAL,GAAgBF,OAAhB;AACAC,OAAKE,OAAL,GAAeH,QAAQG,OAAvB;;AAEAF,OAAKG,OAAL,GAAe,IAAf;AACAH,OAAKI,mBAAL,GAA2B,KAA3B;AACD,CARD;;AAUAvD,EAAE6C,MAAF,CAASI,sBAAsBH,SAA/B,EAA0C;AACxCC,WAAS,mBAAY;AACnB,QAAII,OAAO,IAAX;AACA;AACA;AACA,QAAIA,KAAKI,mBAAT,EAA8B;AAC5B,UAAIC,SAASnB,aAAaV,qBAAqB,CAAlC,CAAb;AACAwB,WAAKE,OAAL,CAAaI,KAAb,CAAmBD,SAASzC,eAA5B;AACAoC,WAAKI,mBAAL,GAA2B,KAA3B;AACD;AACF,GAVuC;;AAYxCP,WAAS,mBAAY;AACnB;AACD,GAduC;;AAgBxCU,gBAAc,sBAAUC,MAAV,EAAkB;AAC9B,QAAIR,OAAO,IAAX;;AAEA,QAAIQ,UAAUR,KAAKG,OAAnB,EAA4B;AAC1B;AACD;;AAEDH,SAAKG,OAAL,GAAeK,MAAf;AACAR,SAAKS,OAAL;AACD,GAzBuC;;AA2BxCA,WAAS,mBAAY;AACnB,QAAIT,OAAO,IAAX;;AAEA,QAAIT,OAAOS,KAAKG,OAAhB;AACA,QAAIZ,IAAJ,EAAU;AACRA,aAAOD,cAAcC,IAAd,EAAoBlB,iBAApB,CAAP;AACD;;AAED,QAAIkB,IAAJ,EAAU;AACR;AACA;AACAS,WAAKE,OAAL,CAAaI,KAAb,CAAmB,UAAUf,IAAV,GAAiB,SAAjB,GAA6B3B,eAAhD;AACAoC,WAAKI,mBAAL,GAA2B,IAA3B;AACD;AACF;AAzCuC,CAA1C;;AA4CA,IAAIM,kBAAkB,SAAlBA,eAAkB,GAAY;AAChC,MAAIV,OAAO,IAAX;AACAA,OAAKW,MAAL,GAAc,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,GAAjB,CAAd;AACAX,OAAKY,KAAL,GAAa,CAAE,IAAIC,IAAJ,EAAf;AACAb,OAAKc,QAAL,GAAgB,GAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CApBD;;AAsBAJ,gBAAgBf,SAAhB,CAA0BoB,QAA1B,GAAqC,YAAY;AAC/C,MAAIf,OAAO,IAAX;AACA,MAAIgB,MAAM,CAAE,IAAIH,IAAJ,EAAZ;;AAEA,MAAII,IAAID,MAAMhB,KAAKY,KAAnB;AACA,MAAIM,QAAQC,KAAKC,KAAL,CAAWH,IAAIjB,KAAKc,QAApB,IAAgCd,KAAKW,MAAL,CAAYxB,MAAxD;AACA,SAAOa,KAAKW,MAAL,CAAYO,KAAZ,CAAP;AACD,CAPD;;AASA;AACA,IAAIG,sBAAsB,SAAtBA,mBAAsB,CAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AACnD,MAAIvB,OAAO,IAAX;;AAEAuB,YAAUA,WAAW,EAArB;;AAEAvB,OAAKwB,GAAL,GAAWF,MAAX;AACAtB,OAAKyB,IAAL,GAAY,CAAZ;AACAzB,OAAK0B,KAAL,GAAa,GAAb;AACA1B,OAAK2B,QAAL,GAAgBJ,QAAQI,QAAR,IAAoB3B,KAAK0B,KAAzC;AACA1B,OAAK4B,KAAL,GAAa;AACXC,cAAa,GADF;AAEXC,gBAAa;AAFF,GAAb;AAID,CAbD;;AAeAjF,EAAE6C,MAAF,CAAS2B,oBAAoB1B,SAA7B,EAAwC;AACtCoB,YAAU,kBAAUgB,cAAV,EAA0B;AAClC,QAAI/B,OAAO,IAAX;;AAEA,QAAIgC,QAAQhC,KAAKyB,IAAL,GAAYzB,KAAK0B,KAA7B;AACAM,YAAQb,KAAKc,GAAL,CAASd,KAAKe,GAAL,CAASF,KAAT,EAAgB,CAAhB,CAAT,EAA6B,CAA7B,CAAR;;AAEA,QAAIG,UAAUH,QAAQ,GAAtB;AACA,QAAIF,UAAJ,EAAgBD,QAAhB,EAA0BO,cAA1B;AACA,QAAIC,UAAU,IAAIxB,IAAJ,KAAWb,KAAKY,KAA9B;AACA,QAAI0B,MAAOH,WAAW,GAAZ,GAAmB,CAAnB,GAAuBE,WAAWrC,KAAK0B,KAAL,GAAa1B,KAAKyB,IAAlB,GAAyB,CAApC,CAAjC;;AAEA;AACA,QAAI5C,MAAMmB,KAAKwB,GAAL,CACPzC,OADO,CACC,UADD,EACaiB,KAAKyB,IADlB,EAEP1C,OAFO,CAEC,QAFD,EAEWiB,KAAK0B,KAFhB,EAGP3C,OAHO,CAGC,UAHD,EAGawD,MAAMF,OAAN,IAAiB,KAAjB,GAAyB,CAACA,UAAU,IAAX,EAAiBG,OAAjB,CAAyB,CAAzB,CAHtC,EAIPzD,OAJO,CAIC,MAJD,EAIUwD,MAAMD,GAAN,KAAc,CAAEG,SAASH,GAAT,CAAjB,GAAkC,KAAlC,GAA0C,CAACA,MAAM,IAAP,EAAaE,OAAb,CAAqB,CAArB,CAJnD,EAKPzD,OALO,CAKC,UALD,EAKaoD,QAAQK,OAAR,CAAgB,CAAhB,IAAqB,GALlC,CAAV;;AAOA;AACA,QAAIE,QAAQvB,KAAKc,GAAL,CAASjC,KAAK2B,QAAd,EAAwBI,iBAAiBlD,IAAIE,OAAJ,CAAY,MAAZ,EAAoB,EAApB,EAAwBI,MAAjE,CAAZ;;AAEA;AACAiD,qBAAiBjB,KAAKwB,KAAL,CAAWD,QAAQV,KAAnB,CAAjB;AACAH,eAAW7D,MAAMoE,iBAAiB,CAAvB,EAA0BnE,IAA1B,CAA+B+B,KAAK4B,KAAL,CAAWC,QAA1C,CAAX;AACAC,iBAAa9D,MAAM0E,QAAQN,cAAR,GAAyB,CAA/B,EAAkCnE,IAAlC,CAAuC+B,KAAK4B,KAAL,CAAWE,UAAlD,CAAb;;AAEA;AACAjD,UAAMA,IAAIE,OAAJ,CAAY,MAAZ,EAAoB8C,WAAWC,UAA/B,CAAN;;AAEA,WAAOjD,GAAP;AACD;AAhCqC,CAAxC;;AAoCA,IAAI+D,sBAAsB,SAAtBA,mBAAsB,CAAU7C,OAAV,EAAmB;AAC3C,MAAIC,OAAO,IAAX;;AAEAA,OAAKC,QAAL,GAAgBF,OAAhB;AACAC,OAAKE,OAAL,GAAeH,QAAQG,OAAvB;;AAEAF,OAAKG,OAAL,GAAe,EAAf;;AAEA,MAAIoB,UAAU;AACZM,cAAU,GADE;AAEZC,gBAAY,GAFA;AAGZH,cAAUrD,kBAHE;AAIZoD,WAAO;AAJK,GAAd;AAMA1B,OAAK6C,oBAAL,GAA4B,IAAIxB,mBAAJ,CAAwB9C,mBAAxB,EAA6CgD,OAA7C,CAA5B;AACAvB,OAAK6C,oBAAL,CAA0BjC,KAA1B,GAAkC,IAAIC,IAAJ,EAAlC;;AAEAb,OAAK8C,SAAL,GAAiB,KAAjB;;AAEA9C,OAAK+C,gBAAL,GAAwB,IAAIrC,eAAJ,EAAxB;;AAEAV,OAAKgD,SAAL,GAAiBrF,SAAjB;;AAEAqC,OAAKiD,cAAL,GAAsB,CAAtB;;AAEAjD,OAAKkD,gBAAL,GAAwB,IAAxB;AACAlD,OAAKmD,gBAAL,GAAwB,CAAxB;AACD,CA3BD;;AA6BAtG,EAAE6C,MAAF,CAASkD,oBAAoBjD,SAA7B,EAAwC;AACtCC,WAAS,mBAAY;AACnB,QAAII,OAAO,IAAX;;AAEAA,SAAKE,OAAL,CAAaI,KAAb,CAAmBpB,aAAac,KAAKiD,cAAlB,IAAoCrF,eAAvD;AACD,GALqC;;AAOtC2C,gBAAc,sBAAUC,MAAV,EAAkB;AAC9B,QAAIR,OAAO,IAAX;;AAEA,QAAIQ,UAAUR,KAAKG,OAAnB,EAA4B;AAC1B;AACD;;AAEDH,SAAKG,OAAL,GAAeK,MAAf;AACAR,SAAKS,OAAL;AACD,GAhBqC;;AAkBtC2C,kBAAgB,wBAAUC,QAAV,EAAoBC,SAApB,EAA+B;AAC7C,QAAItD,OAAO,IAAX;;AAEAA,SAAKgD,SAAL,GAAiBK,QAAjB;AACA,QAAIA,aAAa1F,SAAjB,EAA4B;AAC1BqC,WAAK6C,oBAAL,CAA0BpB,IAA1B,GAAiCN,KAAKC,KAAL,CAAWiC,WAAWrD,KAAK6C,oBAAL,CAA0BnB,KAAhD,CAAjC;AACD;AACD,QAAI4B,SAAJ,EAAe;AACbtD,WAAK6C,oBAAL,CAA0BjC,KAA1B,GAAkC0C,SAAlC;AACD;AACDtD,SAAKS,OAAL;AACD,GA7BqC;;AA+BtCZ,WAAS,mBAAY;AACnB,QAAIG,OAAO,IAAX;AACAA,SAAKS,OAAL;AACD,GAlCqC;;AAoCtC8C,aApCsC,uBAoC1BC,QApC0B,EAoChB;AACpB,SAAKV,SAAL,GAAiB,CAAC,CAAEU,QAApB;AACD,GAtCqC;;;AAwCtC/C,WAAS,mBAAY;AACnB,QAAIT,OAAO,IAAX;;AAEA;AACA;AACA,QAAIyD,kBAAkB,EAAtB;;AAEA;AACA;AACA,QAAIC,gBAAgB,CAApB;;AAEA,QAAIC,gBAAgB,KAAK1D,QAAL,CAAcyC,KAAd,EAApB;AACA,QAAIkB,aAAJ;AACA,QAAIC,eAAJ;AACA,QAAI,CAAEF,aAAN,EAAqB;AACnBC,sBAAgBvF,iBAAhB;AACAwF,wBAAkB,CAAlB;AACD,KAHD,MAGO;AACLD,sBAAgBzC,KAAKc,GAAL,CAAS5D,iBAAT,EAA4BsF,gBAAgBD,aAA5C,CAAhB;AACAG,wBAAkB1C,KAAKc,GAAL,CAAS3D,kBAAT,EAA6BqF,gBAAgBD,aAAhB,GAAgCE,aAA7D,CAAlB;AACD;;AAED,QAAI5D,KAAKgD,SAAL,KAAmBrF,SAAnB,IAAgCkG,kBAAkB,EAAtD,EAA0D;AACxD;AACAJ,wBAAkB,OAAOzD,KAAK6C,oBAAL,CAA0B9B,QAA1B,CAAmC8C,kBAAkB,CAArD,CAAzB;AAED,KAJD,MAIO,IAAI,CAAE7D,KAAK8C,SAAP,IAAoBe,kBAAkB,CAA1C,EAA6C;AAClD;AACAJ,wBAAkB,OAAOzD,KAAK+C,gBAAL,CAAsBhC,QAAtB,EAAzB;AAED,KAJM,MAIA,IAAI,IAAIF,IAAJ,KAAWb,KAAKmD,gBAAhB,GAAmC,IAAI,EAAJ,GAAS,IAAhD,EAAsD;AAC3D;AACAM,wBAAkB,mCAAlB;AACAzD,WAAKkD,gBAAL,GAAwB,IAAxB,CAH2D,CAG7B;AAC/B;;AAED,QAAIlD,KAAKG,OAAL,IAAgBsD,eAApB,EAAqC;AACnC;;AAEA,UAAIK,OAAO5E,aAAawE,aAAb,CAAX;AACA,UAAIvE,SAASuE,aAAb;;AAEA,UAAI1D,KAAKG,OAAT,EAAkB;AAChB,YAAI4D,cAAczE,cAAcU,KAAKG,OAAnB,EAA4ByD,aAA5B,CAAlB;AACAE,gBAAQ5G,MAAM8G,IAAN,CAAWD,WAAX,CAAR;AACA5E,kBAAUyE,aAAV;AACD,OAJD,MAIO;AACLE,gBAAQ5E,aAAa0E,aAAb,CAAR;AACAzE,kBAAUyE,aAAV;AACD;;AAEDE,cAAQL,kBAAkB7F,eAA1B;AACAuB,gBAAUsE,gBAAgBtE,MAA1B;;AAEA,UAAIa,KAAK8C,SAAL,IACAgB,SAAS9D,KAAKkD,gBADlB,EACoC;AAClC;AACA;AACD;;AAEDlD,WAAKJ,OAAL;;AAEAI,WAAKE,OAAL,CAAaI,KAAb,CAAmBwD,IAAnB;AACA9D,WAAKkD,gBAAL,GAAwBY,IAAxB;AACA9D,WAAKmD,gBAAL,GAAwB,CAAC,IAAItC,IAAJ,EAAzB;AACAb,WAAKiD,cAAL,GAAsB9D,MAAtB;AACD;AACF;AA3GqC,CAAxC;;AA8GA,IAAI8E,eAAe,SAAfA,YAAe,CAAUlE,OAAV,EAAmB;AACpC,MAAIC,OAAO,IAAX;;AAEA;AACAA,OAAKkE,SAAL,GAAiB,IAAjB;;AAEAlE,OAAKC,QAAL,GAAgBF,OAAhB;;AAEAC,OAAKmE,YAAL,GAAoB,IAApB;AACAnE,OAAKoE,oBAAL,GAA4B,IAAIhH,MAAMiH,SAAV,CAAoB;AAC9CvD,cAAUrC;AADoC,GAApB,CAA5B;AAGAuB,OAAKsE,YAAL;AACAtE,OAAKuE,KAAL,GAAa,KAAb;AACD,CAdD;;AAgBA1H,EAAE6C,MAAF,CAASuE,aAAatE,SAAtB,EAAiC;AAC/B2E,gBAAc,wBAAY;AAAA;;AACxB,QAAItE,OAAO,IAAX;;AAEA,QAAIA,KAAKmE,YAAT,EAAuB;AACrB,YAAM,IAAIK,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAEDxE,SAAKmE,YAAL,GAAqB;AAAA;AAAA;AAAA;AAAA;AACnB/G,oBAAMqH,OAAN,CAAchG,kBAAd;AACA,qBAAO,CAAEuB,KAAKuE,KAAd,EAAqB;AACnBvE,qBAAK0E,UAAL;AACAtH,sBAAMqH,OAAN,CAAchG,kBAAd;AACD;;AALkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAApB;AAOD,GAf8B;;AAiB/BkG,QAAM,gBAAY;AAChB,QAAI3E,OAAO,IAAX;;AAEAA,SAAKuE,KAAL,GAAa,IAAb;AACD,GArB8B;;AAuB/BG,cAAY,sBAAY;AACtB,QAAI1E,OAAO,IAAX;AACA,QAAIA,KAAKoE,oBAAL,CAA0BQ,SAA1B,EAAJ,EAA2C;AACzC5E,WAAK6E,WAAL;AACD;AACF,GA5B8B;;AA8B/BA,eAAa,uBAAY;AACvB,QAAI7E,OAAO,IAAX;;AAEA;;AAEA,QAAI8E,eAAe7H,aAAa8H,eAAb,EAAnB;AACA,QAAIzH,cAAJ,EAAoB;AAClB;AACAwH,mBAAaE,IAAb,CAAkBzH,QAAQO,MAA1B,EAAkC,EAACmH,UAAU,IAAX,EAAlC;AACD;;AAED,QAAIC,cAAc,SAAdA,WAAc,CAAUC,KAAV,EAAiB7B,SAAjB,EAA4B;AAC5C,UAAI8B,kBAAkBpF,KAAKC,QAAL,CAAcoF,gBAApC;AACA;AACA,UAAID,gBAAgBhC,cAApB,EAAoC;AAClC,YAAI+B,MAAMG,GAAN,KAAc3H,SAAd,IAA2BwH,MAAMG,GAAN,IAAa,CAA5C,EAA+C;AAC7CF,0BAAgBhC,cAAhB,CAA+BzF,SAA/B,EAA0C2F,SAA1C;AACD,SAFD,MAEO;AACL,cAAID,WAAW8B,MAAMI,IAAN,GAAa,GAAb,GAAoBJ,MAAMK,OAAN,GAAgBL,MAAMG,GAAzD;;AAEA,cAAI,CAAE/C,MAAMc,QAAN,CAAF,IAAqBA,YAAY,CAArC,EAAwC;AACtC+B,4BAAgBhC,cAAhB,CAA+BC,QAA/B,EAAyCC,SAAzC;AACD,WAFD,MAEO;AACL8B,4BAAgBhC,cAAhB,CAA+B,CAA/B,EAAkCE,SAAlC;AACD;AACF;AACF;AACF,KAhBD;;AAkBA,QAAImC,WAAYX,eAAeA,aAAaY,kBAAb,EAAf,GAAmD,IAAnE;;AAEA,QAAI1F,KAAKkE,SAAL,KAAmBuB,QAAvB,EAAiC;AAC/B;AACA;AACAP,kBAAYO,SAASE,QAAT,EAAZ,EAAiCF,SAASnC,SAA1C;AACA;AACD;;AAEDtD,SAAKkE,SAAL,GAAiBuB,QAAjB;;AAEA,QAAIG,QAAQ,CAACH,YAAY,IAAZ,GAAmBA,SAASI,MAA5B,GAAqC,IAAtC,KAA+CnH,eAA3D;;AAEA,QAAI0G,kBAAkBpF,KAAKC,QAAL,CAAcoF,gBAApC;AACAD,oBAAgB7E,YAAhB,IAAgC6E,gBAAgB7E,YAAhB,CAA6BqF,KAA7B,CAAhC;;AAEA,QAAIH,QAAJ,EAAc;AACZA,eAASK,UAAT,CAAoB,UAAUX,KAAV,EAAiB;AACnC,YAAIM,YAAYzF,KAAKkE,SAArB,EAAgC;AAC9B;AACA;AACA;AACD;;AAEDgB,oBAAYC,KAAZ,EAAmBM,SAASnC,SAA5B;AACD,OARD;AASD;AACF;AAtF8B,CAAjC;;AAyFA,IAAIyC,UAAU,SAAVA,OAAU,CAAUxE,OAAV,EAAmB;AAC/B,MAAIvB,OAAO,IAAX;;AAEAuB,YAAUA,WAAW,EAArB;;AAEAvB,OAAK8C,SAAL,GAAiB,KAAjB;;AAEA;AACA9C,OAAKqF,gBAAL,GAAwB,IAAI5F,mBAAJ,CAAwBO,IAAxB,CAAxB;;AAEAA,OAAKgG,aAAL,GAAqB,IAArB;;AAEAhG,OAAKiG,eAAL,GAAuB,IAAI7I,MAAM8I,cAAV,EAAvB;;AAEAlG,OAAKmG,OAAL,GAAe,KAAf;;AAEA;AACAnG,OAAKlC,MAAL,GAAc,EAAd;AACAkC,OAAKoG,MAAL,GAAc,EAAd;;AAEApG,OAAKE,OAAL,GAAe3C,QAAQO,MAAvB;;AAEAkC,OAAKqG,OAAL,GAAgB3I,iBAAiBC,SAAjB,GAA6BD,YAA7B,GAA4C,KAA5D;AACAsC,OAAKsG,uBAAL,GAA+B,KAA/B;;AAEAtG,OAAKuG,aAAL,GAAqBC,eAArB;AACA,MAAIC,UAAUlJ,QAAQC,GAAR,CAAYkJ,UAA1B;AACA,MAAID,OAAJ,EAAa;AACXA,cAAUA,QAAQE,IAAR,GAAeC,WAAf,EAAV;AACA,QAAIH,WAAW,OAAf,EAAwB;AACtBzG,WAAKuG,aAAL,GAAqBM,gBAArB;AACD;AACF;;AAED1J,UAAQ2J,MAAR,CAAe,UAAUC,GAAV,EAAe;AAC5B/G,SAAKgH,qBAAL,CAA2B,KAA3B;AACD,GAFD;AAGD,CArCD;;AAuCA,IAAIC,mBAAmB,CAAvB;AACA,IAAIC,kBAAkB,CAAtB;AACA,IAAIV,kBAAkB,CAAtB;AACA,IAAIK,mBAAmB,CAAvB;;AAEA,IAAIM,cAAc,EAAEC,MAAMH,gBAAR,EAAlB;AACA,IAAII,aAAa,EAAED,MAAMF,eAAR,EAAjB;AACA,IAAII,aAAa,EAAEF,MAAMZ,eAAR,EAAjB;AACA,IAAIe,cAAc,EAAEH,MAAMP,gBAAR,EAAlB;;AAEA;AACA;AACA;AACA;AACA,IAAIW,iBAAiB,SAAjBA,cAAiB,CAAUC,CAAV,EAAa;AAChC,MAAIzH,OAAO,IAAX;AACAA,OAAKuB,OAAL,GAAekG,CAAf;AACD,CAHD;;AAKA5K,EAAE6C,MAAF,CAASqG,QAAQpG,SAAjB,EAA4B;AAC1BwH,eAAaA,WADa;AAE1BE,cAAYA,UAFc;AAG1BC,cAAYA,UAHc;AAI1BC,eAAaA,WAJa;;AAM1BG,aAAW,mBAAUC,MAAV,EAAkB;AAC3B,QAAI3H,OAAO,IAAX;AACA;AACA,QAAItC,iBAAiBC,SAArB,EAAgC;AAC9B;AACD;AACD;AACA,QAAIqC,KAAKqG,OAAL,KAAiBsB,MAArB,EAA6B;AAC3B;AACD;AACD3H,SAAKqG,OAAL,GAAesB,MAAf;AACA3H,SAAK4H,sBAAL;AACD,GAlByB;;AAoB1B;AACA;AACAC,8BAA4B,oCAAUC,CAAV,EAAa;AACvC,QAAI9H,OAAO,IAAX;AACA,QAAI+H,iBAAiB/H,KAAKqG,OAA1B;AACA,QAAI2B,iCAAiChI,KAAKsG,uBAA1C;;AAEA;AACAtG,SAAKqG,OAAL,GAAerG,KAAKsG,uBAAL,GAA+B,IAA9C;;AAEA;AACA,QAAI,CAAEyB,cAAF,IAAoB,CAAEC,8BAA1B,EAA0D;AACxDhI,WAAK4H,sBAAL;AACD;;AAED,QAAI;AACF,aAAOE,GAAP;AACD,KAFD,SAEU;AACR;AACA9H,WAAKqG,OAAL,GAAe0B,cAAf;AACA/H,WAAKsG,uBAAL,GAA+B0B,8BAA/B;AACA;AACA,UAAI,CAAED,cAAF,IAAoB,CAAEC,8BAA1B,EAA0D;AACxDhI,aAAK4H,sBAAL;AACD;AACF;AACF,GA9CyB;;AAgD1BK,cAAY,oBAAU9B,OAAV,EAAmB;AAC7B,QAAInG,OAAO,IAAX;AACAA,SAAKmG,OAAL,GAAeA,OAAf;AACD,GAnDyB;;AAqD1B;AACAzD,SAAO,iBAAY;AACjB,QAAIA,QAAQ,EAAZ;AACA,QAAIwF,SAAS3K,QAAQO,MAArB;AACA,QAAIoK,UAAUA,OAAOnK,KAAjB,IAA0BmK,OAAOC,OAArC,EAA8C;AAC5CzF,cAAQwF,OAAOC,OAAf;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI5K,QAAQM,QAAR,KAAqB,OAAzB,EAAkC;AAChC6E,eAAS,CAAT;AACD;;AAED,WAAOA,KAAP;AACD,GA1EyB;;AA4E1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA0F,SAAO,eAAUC,QAAV,EAAoB;AACzB,QAAIrI,OAAO,IAAX;AACA,QAAIA,KAAKgG,aAAT,EAAwB;AACtBhG,WAAKgG,aAAL,CAAmBtB,UAAnB;AACD;AACD,QAAI2D,aAAa1K,SAAb,IAA0B0K,aAAa,IAA3C,EAAiD;AAC/CrI,WAAKiG,eAAL;AACD;AACF,GAlGyB;;AAoG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1E,WAAS,iBAAUkG,CAAV,EAAa;AACpB;AACA;AACA;AACA,WAAO,IAAID,cAAJ,CAAmBC,CAAnB,CAAP;AACD,GA5HyB;;AA8H1B;AACA;AACA;AACA;AACA;AACA;AACA;AACAa,uBAAqB,6BAAUC,IAAV,EAAgB;AACnC,QAAIvI,OAAO,IAAX;AACA,QAAIwI,OAAJ;AACA,QAAIjH,OAAJ;AACA;AACA;AACA;AACA,QAAI1E,EAAE4L,IAAF,CAAOF,IAAP,aAAwBf,cAA5B,EAA4C;AAC1CgB,gBAAU3L,EAAE6L,OAAF,CAAUH,IAAV,CAAV;AACAhH,gBAAU1E,EAAE4L,IAAF,CAAOF,IAAP,EAAahH,OAAvB;AACD,KAHD,MAGO;AACLiH,gBAAUD,IAAV;AACAhH,gBAAU,EAAV;AACD;AACD,QAAIoH,UAAU3I,KAAK4I,OAAL,CAAaJ,OAAb,CAAd;AACA,WAAO,EAAEG,SAASA,OAAX,EAAoBpH,SAASA,OAA7B,EAAP;AACD,GArJyB;;AAuJ1BsH,kBAAgB,wBAAUC,SAAV,EAAqB;AACnC,WAAQ,KAAK3C,OAAL,IAAgB,KAAKI,aAAL,IAAsBuC,SAA9C;AACD,GAzJyB;;AA2J1BC,kBAAgB,0BAAY;AAC1B,WAAO,KAAKF,cAAL,CAAoBhC,gBAApB,CAAP;AACD,GA7JyB;;AAgK1B;AACA;AACAmC,YAAU,oBAAkB;AAC1B,QAAIhJ,OAAO,IAAX;AACA,QAAI,CAAEA,KAAK+I,cAAL,EAAN,EAA6B;AAC3B;AACD;;AAJyB,sCAANR,IAAM;AAANA,UAAM;AAAA;;AAM1B,QAAII,UAAU3I,KAAK4I,OAAL,CAAaL,IAAb,CAAd;AACAvI,SAAKiJ,MAAL,CAAY1B,WAAZ,EAAyBoB,OAAzB;AACD,GA1KyB;;AA4K1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAO,SAAO,iBAAkB;AACvB,QAAIlJ,OAAO,IAAX;AACA,QAAI,CAAEA,KAAK+I,cAAL,EAAN,EAA6B;AAAE;AAAS;;AAFjB,uCAANR,IAAM;AAANA,UAAM;AAAA;;AAIvB,QAAII,UAAU3I,KAAKmJ,gBAAL,CAAsBZ,IAAtB,CAAd;AACAvI,SAAKiJ,MAAL,CAAY1B,WAAZ,EAAyBoB,OAAzB;AACD,GA3LyB;;AA6L1BS,iBAAe,yBAAY;AACzB,WAAO,KAAKP,cAAL,CAAoBrC,eAApB,CAAP;AACD,GA/LyB;;AAiM1B;AACA;AACA6C,WAAS,mBAAkB;AACzB,QAAIrJ,OAAO,IAAX;AACA,QAAI,CAAEA,KAAKoJ,aAAL,EAAN,EAA4B;AAC1B;AACD;;AAJwB,uCAANb,IAAM;AAANA,UAAM;AAAA;;AAMzB,QAAII,UAAU3I,KAAK4I,OAAL,CAAaL,IAAb,CAAd;AACAvI,SAAKiJ,MAAL,CAAY3B,UAAZ,EAAwBqB,OAAxB;AACD,GA3MyB;;AA6M1B;AACA;AACA;AACAW,QAAM,gBAAkB;AACtB,QAAItJ,OAAO,IAAX;AACA,QAAI,CAAEA,KAAKoJ,aAAL,EAAN,EAA4B;AAAE;AAAS;;AAFjB,uCAANb,IAAM;AAANA,UAAM;AAAA;;AAItB,QAAII,UAAU3I,KAAKmJ,gBAAL,CAAsBZ,IAAtB,CAAd;AACAvI,SAAKiJ,MAAL,CAAY3B,UAAZ,EAAwBqB,OAAxB;AACD,GAtNyB;;AAwN1BY,iBAAe,yBAAY;AACzB,WAAO,KAAKV,cAAL,CAAoB3B,eAApB,CAAP;AACD,GA1NyB;;AA4N1BsC,WAAS,mBAAkB;AACzB,QAAIxJ,OAAO,IAAX;AACA,QAAI,CAAEA,KAAKuJ,aAAL,EAAN,EAA4B;AAC1B;AACD;;AAJwB,uCAANhB,IAAM;AAANA,UAAM;AAAA;;AAMzB,QAAII,UAAU3I,KAAK4I,OAAL,CAAaL,IAAb,CAAd;AACAvI,SAAKiJ,MAAL,CAAY5B,UAAZ,EAAwBsB,OAAxB;AACD,GApOyB;;AAsO1B;AACA;AACA;AACAc,QAAM,gBAAkB;AACtB,QAAIzJ,OAAO,IAAX;AACA,QAAI,CAAEA,KAAKuJ,aAAL,EAAN,EAA4B;AAAE;AAAS;;AAFjB,uCAANhB,IAAM;AAANA,UAAM;AAAA;;AAItB,QAAII,UAAU3I,KAAKmJ,gBAAL,CAAsBZ,IAAtB,CAAd;AACAvI,SAAKiJ,MAAL,CAAY5B,UAAZ,EAAwBsB,OAAxB;AACD,GA/OyB;;AAiP1Be,YAAU,oBAAkB;AAC1B,QAAI1J,OAAO,IAAX;;AAD0B,uCAANuI,IAAM;AAANA,UAAM;AAAA;;AAG1B,QAAII,UAAU3I,KAAK4I,OAAL,CAAaL,IAAb,CAAd;AACAvI,SAAKiJ,MAAL,CAAY9B,WAAZ,EAAyBwB,OAAzB;AACD,GAtPyB;;AAwP1B;AACA;AACA;AACAgB,SAAO,iBAAkB;AACvB,QAAI3J,OAAO,IAAX;;AADuB,uCAANuI,IAAM;AAANA,UAAM;AAAA;;AAGvB,QAAII,UAAU3I,KAAKmJ,gBAAL,CAAsBZ,IAAtB,CAAd;AACAvI,SAAKiJ,MAAL,CAAY9B,WAAZ,EAAyBwB,OAAzB;AACD,GAhQyB;;AAkQ1B;AACA;AACA;AACAiB,SAAO,iBAAY;AACjB,QAAI5J,OAAO,IAAX;;AAEAA,SAAKqJ,OAAL,CAAa,kBAAb;AACD,GAzQyB;;AA2Q1BF,oBAAkB,0BAAUU,YAAV,EAAwB;AACxC,QAAI7J,OAAO,IAAX;AACA,QAAI8J,aAAa9J,KAAKsI,mBAAL,CAAyBuB,YAAzB,CAAjB;AACA,QAAIE,WAAW;AACbC,cAAQF,WAAWvI,OAAX,CAAmByI,MADd;AAEbC,mBAAaH,WAAWvI,OAAX,CAAmB0I;AAFnB,KAAf;;AAKA,QAAIC,iBAAiBlK,KAAKmK,SAAL,CAAeL,WAAWnB,OAA1B,EAAmCoB,QAAnC,CAArB;AACAG,sBAAkB,IAAlB;AACA,WAAOA,cAAP;AACD,GAtRyB;;AAwR1BjB,UAAQ,gBAASmB,KAAT,EAAgBzB,OAAhB,EAAyB;AAC/B,QAAI3I,OAAO,IAAX;;AAEA;AACA,QAAIoF,kBAAkBpF,KAAKqF,gBAA3B;AACAD,oBAAgBxF,OAAhB;;AAEA;AACA;AACA,QAAIyK,OAAO9M,QAAQO,MAAnB;AACA,QAAIsM,KAAJ,EAAW;AACT,cAAQA,MAAMhD,IAAd;AACE,aAAKH,gBAAL;AACEoD,iBAAO9M,QAAQ6I,MAAf;AACA;AACF,aAAKc,eAAL;AACEmD,iBAAO9M,QAAQ6I,MAAf;AACA;AANJ;AAQD;;AAED;AACA,QAAIkE,QAAQ,IAAZ;AACA,QAAIF,SAASpK,KAAKqG,OAAlB,EAA2B;AACzB,cAAQ+D,MAAMhD,IAAd;AACE,aAAKH,gBAAL;AACEqD,kBAAQpN,MAAM8G,IAAN,CAAWuG,GAAnB;AACA;AACF,aAAKrD,eAAL;AACEoD,kBAAQpN,MAAMqN,GAAd;AACA;AANJ;AAQD;;AAED,QAAID,KAAJ,EAAW;AACTD,WAAK/J,KAAL,CAAWgK,MAAM3B,OAAN,CAAX;AACD,KAFD,MAEO;AACL0B,WAAK/J,KAAL,CAAWqI,OAAX;AACD;;AAED;AACA;AACA;AACAvD,oBAAgBvF,OAAhB;AACD,GApUyB;;AAsU1B;AACA;AACA2K,WAAS,iBAAU7B,OAAV,EAAmD;AAAA,QAAhC8B,kBAAgC,uEAAX,SAAW;;AAC1D,QAAIzK,OAAO,IAAX;AACA,QAAI0K,SAAJ;;AAEA,QAAI,CAAE1K,KAAKqG,OAAX,EAAoB;AAClB,aAAOrG,KAAKsJ,IAAL,CAAaX,OAAb,UAAyB8B,kBAAzB,CAAP;AACD;;AAED,QAAIlN,QAAQM,QAAR,KAAqB,OAAzB,EAAkC;AAChC6M,kBAAYxN,MAAMyN,KAAN,CAAY,SAAZ,CAAZ;AACD,KAFD,MAEO;AACLD,kBAAYxN,MAAMyN,KAAN,CAAY,QAAZ,CAAZ,CADK,CAC8B;AACpC;;AAED,WAAO3K,KAAKsJ,IAAL,CACHpM,MAAMyN,KAAN,CAAYhC,OAAZ,CADG,EAEH3I,KAAKuB,OAAL,CAAa,EAAE0I,aAAaS,YAAa,GAA5B,EAAb,CAFG,CAAP;AAGD,GAzVyB;;AA2V1B;AACA;AACAE,YAAU,kBAAUjC,OAAV,EAAmB;AAC3B,QAAI3I,OAAO,IAAX;AACA,WAAOA,KAAK6K,KAAL,CAAWlC,OAAX,EAAoB,MAApB,CAAP;AACD,GAhWyB;;AAkW1B;AACA;AACAmC,YAAU,kBAAUnC,OAAV,EAAmB;AAC3B,QAAI3I,OAAO,IAAX;AACA,WAAOA,KAAK6K,KAAL,CAAWlC,OAAX,EAAoB,MAApB,CAAP;AACD,GAvWyB;;AAyW1B;AACAkC,SAAO,eAAUlC,OAAV,EAAmBoC,OAAnB,EAA4B;AACjC,QAAI/K,OAAO,IAAX;;AAEA,QAAI,CAAEA,KAAKqG,OAAX,EAAoB;AAClB,aAAOrG,KAAK+K,OAAL,EAAcpC,OAAd,CAAP;AACD;;AAED,QAAIqC,QAAQ9N,MAAMqN,GAAN,CAAU,QAAV,CAAZ;AACA,WAAOvK,KAAK+K,OAAL,EACH7N,MAAMqN,GAAN,CAAU5B,OAAV,CADG,EAEH3I,KAAKuB,OAAL,CAAa,EAAE0I,aAAae,QAAQ,GAAvB,EAAb,CAFG,CAAP;AAGD,GArXyB;;AAuX1B;AACAC,aAAW,mBAAUtC,OAAV,EAAmB;AAC5B,QAAI3I,OAAO,IAAX;AACA,WAAOA,KAAKyJ,IAAL,CAAUd,OAAV,EAAmB3I,KAAKuB,OAAL,CAAa,EAAE0I,aAAa,WAAf,EAAb,CAAnB,CAAP;AACD,GA3XyB;;AA6X1B;AACA;AACAiB,cAAY,oBAAUvC,OAAV,EAAmBqB,MAAnB,EAA2B;AACrC,QAAIhK,OAAO,IAAX;AACA,WAAOA,KAAKmL,WAAL,CAAiB,OAAjB,EAA0BxC,OAA1B,EAAmCqB,MAAnC,CAAP;AACD,GAlYyB;AAmY1BoB,aAAW,mBAAUzC,OAAV,EAAmBqB,MAAnB,EAA2B;AACpC,QAAIhK,OAAO,IAAX;AACA,WAAOA,KAAKmL,WAAL,CAAiB,MAAjB,EAAyBxC,OAAzB,EAAkCqB,MAAlC,CAAP;AACD,GAtYyB;AAuY1BqB,aAAW,mBAAU1C,OAAV,EAAmBqB,MAAnB,EAA2B;AACpC,QAAIhK,OAAO,IAAX;AACA,WAAOA,KAAKmL,WAAL,CAAiB,MAAjB,EAAyBxC,OAAzB,EAAkCqB,MAAlC,CAAP;AACD,GA1YyB;AA2Y1BmB,eAAa,qBAASJ,OAAT,EAAkBpC,OAAlB,EAA2BqB,MAA3B,EAAmC;AAC9C,QAAIhK,OAAO,IAAX;AACAgK,aAASA,UAAU,CAAnB;AACA,WAAOhK,KAAK+K,OAAL,EACLpC,OADK,EAEL3I,KAAKuB,OAAL,CAAa,EAAE0I,aAAa5K,KAAf,EAAsB2K,QAAQA,MAA9B,EAAb,CAFK,CAAP;AAGD,GAjZyB;;AAmZ1B;AACA;AACA;AACAsB,cAAY,oBAAUC,GAAV,EAAejC,IAAf,EAAqB;AAC/B,QAAItJ,OAAO,IAAX;;AAEA,QAAI2I,UAAU4C,IAAI5C,OAAlB;AACA,QAAI,CAAEA,OAAN,EAAe;AACbA,gBAAU,kBAAV;AACA,UAAI3I,KAAKmG,OAAT,EAAkB;AAChBwC,mBAAW,OAAO4C,IAAIC,QAAJ,EAAP,GAAwB,GAAnC;AACD;AACF;;AAED,QAAIlC,IAAJ,EAAU;AACRX,gBAAUW,OAAO,IAAP,GAAcX,OAAxB;AACD;;AAED3I,SAAK2J,KAAL,CAAWhB,OAAX;AACA,QAAI3I,KAAKmG,OAAL,IAAgBoF,IAAIE,KAAxB,EAA+B;AAC7BzL,WAAKqJ,OAAL,CAAakC,IAAIE,KAAJ,GAAY,IAAzB;AACD;AACF,GAzayB;;AA2a1B;AACAC,iBAAe,uBAAUC,QAAV,EAAoB;AACjC,QAAI3L,OAAO,IAAX;;AAEA,QAAI2L,SAASC,WAAT,EAAJ,EAA4B;AAC1B5L,WAAK2J,KAAL,CAAW,OAAOgC,SAASE,cAAT,EAAlB;AACD;AACF,GAlbyB;;AAob1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,WAAS,iBAAUnD,OAAV,EAAmB;AAC1B,QAAI3I,OAAO,IAAX;AACA,QAAI+L,YAAY/L,KAAKgM,MAAL,CAAYrD,OAAZ,CAAhB;AACA,WAAO3I,KAAKgE,IAAL,CAAU+H,SAAV,CAAP;AACD,GAjcyB;;AAmc1B;AACAE,OAAK,aAAUtD,OAAV,EAAmB;AACtB,QAAI3I,OAAO,IAAX;AACA;AACA;AACA,QAAIkM,WACEtN,WAAW+J,OAAX,EAAoB,GAApB,EAAyB,KAAzB,CADN;AAEA;AACA;AACA;AACA,WAAO3I,KAAKmM,SAAL,CAAeD,QAAf,CAAP;AACD,GA9cyB;;AAgd1B;AACA;AACA;AACAE,QAAM,cAAUzD,OAAV,EAAmB;AACvB,QAAI3I,OAAO,IAAX;AACA;AACA,QAAI+L,YAAY/L,KAAKgM,MAAL,CAAYrD,OAAZ,CAAhB;AACA,WAAO3I,KAAKgE,IAAL,CAAU+H,SAAV,CAAP;AACD,GAxdyB;;AA0d1B;AACA;AACAC,UAAQ,gBAAUrD,OAAV,EAAmB;AACzB,QAAI0D,WAAWzN,WAAW+J,OAAX,EAAoB,GAApB,EAAyBhK,iBAAzB,CAAf;AACA,WAAO0N,QAAP;AACD,GA/dyB;;AAie1B;AACAF,aAAW,mBAAUxD,OAAV,EAAmB;AAC5B,QAAI3I,OAAO,IAAX;;AAEA,QAAI,CAAEA,KAAKqG,OAAX,EAAoB;AAClB,aAAOsC,OAAP;AACD;AACD,WAAOzL,MAAMiP,SAAN,CAAgBxD,OAAhB,CAAP;AACD,GAzeyB;;AA2e1B;AACA3E,QAAM,cAAU2E,OAAV,EAAmB;AACvB,QAAI3I,OAAO,IAAX;;AAEA,QAAI,CAAEA,KAAKqG,OAAX,EAAoB;AAClB,aAAOsC,OAAP;AACD;AACD,WAAOzL,MAAM8G,IAAN,CAAW2E,OAAX,CAAP;AACD,GAnfyB;;AAqf1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA2D,mBAAkB,yBAAUC,IAAV,EAAgBhL,OAAhB,EAAyB;AACzC,QAAIvB,OAAO,IAAX;AACAuB,cAAUA,WAAW,EAArB;;AAEA,QAAIiL,UAAU,EAAd;AACA3P,MAAE4P,IAAF,CAAOF,IAAP,EAAa,UAAUG,GAAV,EAAe;AAC1B,UAAIC,OAAOD,IAAI,CAAJ,KAAU,EAArB;AACA,UAAIC,KAAKxN,MAAL,GAAcqN,QAAQrN,MAA1B,EAAkC;AAChCqN,kBAAUG,IAAV;AACD;AACF,KALD;;AAOA,QAAInN,MAAMgN,QAAQzN,OAAR,CAAgB,IAAhB,EAAsB,GAAtB,CAAV;AACA,QAAI2D,QAAQ1C,KAAK0C,KAAL,EAAZ;AACA,QAAIsH,SACFzI,QAAQyI,MAAR,GAAiBhM,MAAMuD,QAAQyI,MAAR,GAAiB,CAAvB,EAA0B/L,IAA1B,CAA+B,GAA/B,CAAjB,GAAuD,EADzD;;AAGA,QAAI2O,MAAM,EAAV;AACA/P,MAAE4P,IAAF,CAAOF,IAAP,EAAa,UAAUG,GAAV,EAAe;AAC1B,UAAIC,OAAOD,IAAI,CAAJ,KAAU,EAArB;AACA,UAAIG,OAAOH,IAAI,CAAJ,KAAU,EAArB;AACA,UAAI5I,OAAOkG,SAAShK,KAAKgE,IAAL,CAAU2I,IAAV,CAAT,GAA2BnN,IAAIsN,MAAJ,CAAWH,KAAKxN,MAAhB,CAAtC;AACA2E,cAAQ,OAAO+I,IAAf;AACA,UAAI,CAAEtL,QAAQwL,WAAV,IAAyBjJ,KAAK3E,MAAL,GAAcuD,KAA3C,EAAkD;AAChDoB,eAAOA,KAAKgJ,MAAL,CAAY,CAAZ,EAAepK,QAAQ,CAAvB,IAA4B,KAAnC;AACD;AACDkK,aAAO9I,OAAO,IAAd;AACD,KATD;;AAWA,QAAIsG,QAAQ7I,QAAQ6I,KAAR,IAAiBpK,KAAKsH,UAAlC;AACAsF,WAAO,IAAP;AACA5M,SAAKiJ,MAAL,CAAYmB,KAAZ,EAAmBwC,GAAnB;;AAEA,WAAOA,GAAP;AACD,GAhiByB;;AAkiB1B;AACAhE,WAAS,iBAAUoE,YAAV,EAAwB;AAC/B,WAAOhQ,KAAKsE,MAAL,CAAY2L,KAAZ,CAAkBjQ,IAAlB,EAAwBgQ,YAAxB,CAAP;AACD,GAriByB;;AAuiB1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7C,aAAW,mBAAU5K,IAAV,EAAgBgC,OAAhB,EAAyB;AAClC,QAAIvB,OAAO,IAAX;AACAuB,cAAUA,WAAW,EAArB;;AAEA;AACA,QAAI2L,YAAY,CAAhB;AACA,QAAI3L,QAAQyI,MAAR,IAAkBzI,QAAQyI,MAAR,GAAiB,CAAvC,EAA0C;AACxCkD,kBAAYA,YAAY3L,QAAQyI,MAAhC;AACD;AACD,QAAIzI,QAAQ0I,WAAZ,EAAyB;AACvBiD,kBAAYA,YAAY3L,QAAQ0I,WAAR,CAAoB9K,MAA5C;AACD;;AAED;AACA;AACA,QAAI+C,MAAMlC,KAAK0C,KAAL,EAAV;;AAEA,QAAIyK,WAAJ;AACA,QAAI5P,QAAQC,GAAR,CAAY4P,kBAAhB,EAAoC;AAClC,UAAIpD,SACFzI,QAAQyI,MAAR,GAAiBhM,MAAMuD,QAAQyI,MAAR,GAAiB,CAAvB,EAA0B/L,IAA1B,CAA+B,GAA/B,CAAjB,GAAuD,EADzD;AAEA,UAAIsD,QAAQ0I,WAAZ,EAAyB;AACvBkD,sBAAc5L,QAAQ0I,WAAR,GAAsB1K,IAApC;AACD,OAFD,MAEO;AACL4N,sBAAc5N,IAAd;AACD;AACD4N,oBAActQ,EAAEwQ,GAAF,CAAMF,YAAYnO,KAAZ,CAAkB,IAAlB,CAAN,EAA+B,UAAUsO,CAAV,EAAa;AACxD,YAAIA,MAAM,EAAV,EAAc;AACZ,iBAAO,EAAP;AACD;AACD,eAAOtD,SAASsD,CAAhB;AACD,OALa,EAKXrP,IALW,CAKN,IALM,CAAd;AAOD,KAfD,MAeO;AACL;AACAkP,oBAAc9P,SAAS6P,SAAT,EAAoBhL,GAApB,EAAyB3C,IAAzB,CAAd;;AAEA;AACA,UAAIgC,QAAQ0I,WAAZ,EAAyB;AACvB;AACA,YAAIsD,aAAahM,QAAQyI,MAAR,GACXmD,YAAY/N,SAAZ,CAAsB,CAAtB,EAAyBmC,QAAQyI,MAAjC,CADW,GACgC,EADjD;AAEA;AACA;AACAmD,sBAAcI,aAAahM,QAAQ0I,WAArB,GACZkD,YAAY/N,SAAZ,CAAsB8N,SAAtB,CADF;AAED;AACF;;AAED;AACA;AACAC,kBAAcvO,WAAWuO,WAAX,EAAwBxO,iBAAxB,EAA2C,GAA3C,CAAd;AACA,WAAOwO,WAAP;AACD,GArmByB;;AAwmB1B;AACAnG,yBAAuB,+BAAU5I,OAAV,EAAmB;AACxC,QAAI4B,OAAO,IAAX;;AAEA;AACA,QAAI5B,YAAYT,SAAhB,EAA2B;AACzBS,gBAAU,IAAV;AACD;;AAED,QAAI4B,KAAKsG,uBAAL,KAAiClI,OAArC,EAA8C;AAC5C;AACD;;AAED4B,SAAKsG,uBAAL,GAA+BlI,OAA/B;AACA4B,SAAK4H,sBAAL;AACD,GAvnByB;;AAynB1B;AACA;AACAA,0BAAwB,kCAAY;AAClC,QAAI5H,OAAO,IAAX;;AAEA,QAAIwN,kBAAJ;;AAEA,QAAI,CAAExN,KAAKsG,uBAAX,EAAoC;AAClCkH,2BAAqB,IAAI/N,mBAAJ,EAArB;AACD,KAFD,MAEO,IAAK,CAAEO,KAAKE,OAAL,CAAanC,KAAhB,IAA2B,CAAEiC,KAAKqG,OAAtC,EAAgD;AACrD;AACAmH,2BAAqB,IAAI/N,mBAAJ,CAAwBO,IAAxB,CAArB;AACD,KAHM,MAGA,IAAIA,KAAKE,OAAL,CAAanC,KAAb,IAAsB,CAAEiC,KAAKE,OAAL,CAAaiI,OAAzC,EAAkD;AACvD;AACA;AACA;AACA;AACA;AACA;AACAqF,2BAAqB,IAAI1N,qBAAJ,CAA0BE,IAA1B,CAArB;AACD,KARM,MAQA;AACL;AACAwN,2BAAqB,IAAI5K,mBAAJ,CAAwB5C,IAAxB,CAArB;AACD;;AAED;AACA,QAAIA,KAAKsG,uBAAT,EAAkC;AAChC,UAAI,CAAEtG,KAAKgG,aAAX,EAA0B;AACxBhG,aAAKgG,aAAL,GAAqB,IAAI/B,YAAJ,CAAiBjE,IAAjB,CAArB;AACD;AACF,KAJD,MAIO;AACL,UAAIA,KAAKgG,aAAT,EAAwB;AACtBhG,aAAKgG,aAAL,CAAmBrB,IAAnB;AACA3E,aAAKgG,aAAL,GAAqB,IAArB;AACD;AACF;;AAEDhG,SAAKyN,mBAAL,CAAyBD,kBAAzB;AACD,GA/pByB;;AAiqB1BE,YAjqB0B,wBAiqBb;AACX,WAAO,KAAK5K,SAAZ;AACD,GAnqByB;AAqqB1BS,aArqB0B,yBAqqBG;AAAA,QAAjBC,QAAiB,uEAAN,IAAM;;AAC3B,SAAKV,SAAL,GAAiB,CAAC,CAAEU,QAApB;;AAEA,QAAI,KAAK6B,gBAAL,IACA,KAAKA,gBAAL,CAAsB9B,WAD1B,EACuC;AACrC,WAAK8B,gBAAL,CAAsB9B,WAAtB,CAAkC,KAAKT,SAAvC;AACD;AACF,GA5qByB;;;AA8qB1B2K,uBAAqB,6BAAUD,kBAAV,EAA8B;AACjD,QAAIxN,OAAO,IAAX;;AAEA;;AAEA,QAAI2N,qBAAqB3N,KAAKqF,gBAA9B;AACAsI,uBAAmB/N,OAAnB;;AAEAI,SAAKqF,gBAAL,GAAwBmI,kBAAxB;AACD;AAvrByB,CAA5B;;AA0rBA;AACA;AACA;AACA;AACAzH,QAAQpG,SAAR,CAAkBiO,QAAlB,GAA6B,UAAUrM,OAAV,EAAmB;AAC9C,MAAIvB,OAAO,IAAX;;AAEAuB,YAAU1E,EAAE6C,MAAF,CAAS;AACjBmO,UAAM,IADW;AAEjB3F,YAAQlI,KAAKE;AAFI,GAAT,EAGPqB,OAHO,CAAV;;AAKA,MAAIuM,eAAe;AACjBxN,WAAO,iBAAY,CAClB,CAFgB;AAGjByN,QAAI,cAAY,CACf,CAJgB;AAKjBzI,SAAK,eAAY,CAChB,CANgB;AAOjBvH,WAAOwD,QAAQ2G,MAAR,CAAenK,KAPL;AAQjBiQ,oBAAgB,0BAAY,CAC3B;AATgB,GAAnB;;AAYA,MAAIC,0BAA0BjO,KAAKqF,gBAAnC;AACArF,OAAKyN,mBAAL,CAAyB,IAAIhO,mBAAJ,EAAzB;;AAEA;AACA,MAAIyO,KAAKnR,SAASoR,eAAT,CAAyB;AAChCC,WAAO7Q,QAAQ8Q,KADiB;AAEhCC,YAAQ/M,QAAQsM,IAAR,GAAetM,QAAQ2G,MAAvB,GAAgC4F,YAFR;AAGhC;AACA;AACAS,cAAUhN,QAAQ2G,MAAR,CAAenK,KAAf,IAAwBR,QAAQC,GAAR,CAAYgR,KAAZ,KAAsB;AALxB,GAAzB,CAAT;;AAQA,MAAI,CAAEjN,QAAQsM,IAAd,EAAoB;AAClBtM,YAAQ2G,MAAR,CAAe5H,KAAf,CAAqBiB,QAAQkN,MAA7B;AACD,GAFD,MAEO;AACLP,OAAGQ,SAAH,CAAanN,QAAQkN,MAArB;AACAP,OAAGO,MAAH;AACD;;AAED,SAAO,IAAIE,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpCV,OAAGH,EAAH,CAAM,MAAN,EAAc,UAAUjK,IAAV,EAAgB;AAC5BoK,SAAGW,KAAH;AACA,UAAI,CAAEtN,QAAQsM,IAAd,EAAoB;AAClBtM,gBAAQ2G,MAAR,CAAe5H,KAAf,CAAqB,IAArB;AACD;AACDN,WAAKyN,mBAAL,CAAyBQ,uBAAzB;AACAW,cAAQ9K,IAAR;AACD,KAPD;AAQD,GATM,EASJgL,KATI,EAAP;AAUD,CAjDD;;AAoDAC,QAAQhJ,OAAR,GAAkB,IAAIA,OAAJ,EAAlB;AACAgJ,QAAQhJ,OAAR,CAAgBnI,eAAhB,GAAkCA,eAAlC","file":"tools/console/console.js.map","sourcesContent":["///  This class provides a set of utility functions for printing to the terminal\n///  in the Meteor tool.\n///\n///  When you intend for your messages to be read by humans, you should use the\n///  following functions to print to the terminal. They will automatically line\n///  wrap output to either the width of the terminal, or 80 characters. They\n///  will also end in a new line.\n///\n////   - Console.info : Print to stdout.\n///    - Console.error: Print to stderr.\n///    - Console.warn: Prints to stderr, if warnings are enabled.\n///    - Console.debug: Prints to stdout, if debug is enabled.\n///\n/// Sometimes, there is a phrase that shouldn't be split up over multiple\n/// lines (for example, 'meteor update'). When applicable, please use the\n/// following functions (Some of them add aditional formatting, especially when\n/// pretty-print is turned on):\n///\n///    - Console.command: things to enter on the command-line, such as\n///      'meteor update' or 'cd foobar'.\n///    - Console.url: URLs, such as 'www.meteor.com'\n///    - Console.path: filepaths outside of Console.command.\n///    - Console.noWrap: anything else that you don't want line-wrapped.\n///\n/// Here is a contrived example:\n///   Console.info(\n///     \"For more information, please run\", Console.command(\"meteor show\"),\n///     \"or check out the new releases at\", Console.url(\"www.meteor.com\"),\n///     \"or look at\", Console.path(filepath), \". You are currently running\",\n///     \"Console.noWrap(\"Meteor version 1.5\") + \".\");\n///\n/// The Console.info/Console.error/Console.warn/Console.debug functions also\n/// take in Console.options, as a last (optional) argument. These allow you to\n/// set an indent or use a bulletpoint. You can check out their API below. If\n/// possible, you might also want to use one of the existing wrapper functions,\n/// such as Console.labelWarning or Console.arrowInfo.\n///\n/// Output intended for machines (or pre-formatted in specific ways) should NOT\n/// be line-wrapped. Do not wrap these things: JSON output, error stack traces,\n/// logs from other programs, etc. For those, you should use the 'raw'\n/// version of the API:\n///\n///    - Console.rawInfo: Like Console.info, but without formatting.\n///    - Console.rawError: Like Console.error, but without formatting.\n///    - Console.rawWarn: Like Console.warn, but without formatting.\n///    - Console.rawDebug: Like Console.debug, but without formatting.\n///\n/// DO NOT use Console.command/Console.url/Console.path with the raw functions!\n/// (They will change your output in ways that you probably do not want). These\n/// don't auto-linewrap, end in a newline, or take in Console.options.\n///\n/// Here is are some examples:\n///     Console.rawInfo(JSON.stringify(myData, null, 2));\n///     Console.rawError(err.stack + \"\\n\");\n///\n/// In addition to printing functions, the Console class provides progress bar\n/// support, that is mostly handled through buildmessage.js.\nvar _ = require('underscore');\nvar readline = require('readline');\nvar util = require('util');\nvar buildmessage = require('../utils/buildmessage.js');\n// XXX: Are we happy with chalk (and its sub-dependencies)?\nvar chalk = require('chalk');\nvar cleanup = require('../tool-env/cleanup.js');\nvar utils = require('../utils/utils.js');\nvar wordwrap = require('wordwrap');\n\nvar PROGRESS_DEBUG = !!process.env.METEOR_PROGRESS_DEBUG;\nvar FORCE_PRETTY=undefined;\nvar CARRIAGE_RETURN =\n  (process.platform === 'win32' && process.stdout.isTTY ? new Array(249).join('\\b') : '\\r');\n\nif (process.env.METEOR_PRETTY_OUTPUT) {\n  FORCE_PRETTY = process.env.METEOR_PRETTY_OUTPUT != '0';\n}\n\nif (! process.env.METEOR_COLOR) {\n  chalk.enabled = false;\n}\n\nvar STATUS_MAX_LENGTH = 40;\n\nvar PROGRESS_MAX_WIDTH = 40;\nvar PROGRESS_BAR_FORMAT = '[:bar] :percent :etas';\nvar TEMP_STATUS_LENGTH = STATUS_MAX_LENGTH + 12;\n\nvar STATUS_INTERVAL_MS = 50;\n\n// Message to show when we don't know what we're doing\n// XXX: ? FALLBACK_STATUS = 'Pondering';\nvar FALLBACK_STATUS = '';\n\n// If there is a part of the larger text, and we really want to make sure that\n// it doesn't get split up, we will replace the space with a utf character that\n// we are not likely to use anywhere else. This one looks like the a BLACK SUN\n// WITH RAYS. We intentionally want to NOT use a space-like character: it should\n// be obvious that something has gone wrong if this ever gets printed.\nvar SPACE_REPLACEMENT = '\\u2600';\n// In Javascript, replace only replaces the first occurance and this is the\n// proposed alternative.\nvar replaceAll = function (str, search, replace) {\n return str.split(search).join(replace);\n};\n\nvar spacesArray = new Array(200).join(' ');\nvar spacesString = function (length) {\n  if (length > spacesArray.length) {\n    spacesArray = new Array(length * 2).join(' ');\n  }\n  return spacesArray.substring(0, length);\n};\nvar ARROW = \"=> \";\n\n\nvar toFixedLength = function (text, length) {\n  text = text || \"\";\n\n  // pad or truncate `text` to length\n  var pad = length - text.length;\n  if (pad < 0) {\n    // Truncate\n    text = text.substring(0, length - 3) + \"...\";\n  } else if (pad > 0) {\n    // Pad\n    text = text + spacesString(pad);\n  }\n  return text;\n};\n\n// No-op progress display, that means we don't have to handle the 'no progress\n// display' case\nvar ProgressDisplayNone = function () {\n};\n\n_.extend(ProgressDisplayNone.prototype, {\n  depaint: function () {\n    // No-op\n  },\n\n  repaint: function () {\n    // No-op\n  }\n});\n\n// Status display only, primarily for use with emacs\n// No fancy terminal support available, but we have a TTY.\n// Print messages that will be overwritten because they\n// end in `\\r`.\n// Status message mode is where we see status messages but not the\n// fancy progress bar.  It's used when we detect a \"pseudo-TTY\"\n// of the type used by Emacs, and possibly SSH.\n//\n// XXX DELETE THIS MODE since the progress bar now uses \"\\r\".\n// But first we have to throttle progress bar updates so that\n// Emacs doesn't get overwhelemd (we should throttle them anyway).\n// There's also a bug when using the progress bar in Emacs where\n// the cursor doesn't seem to return to column 0.\nvar ProgressDisplayStatus = function (console) {\n  var self = this;\n\n  self._console = console;\n  self._stream = console._stream;\n\n  self._status = null;\n  self._wroteStatusMessage = false;\n};\n\n_.extend(ProgressDisplayStatus.prototype, {\n  depaint: function () {\n    var self = this;\n    // For the non-progress-bar status mode, we may need to\n    // clear some characters that we printed with a trailing `\\r`.\n    if (self._wroteStatusMessage) {\n      var spaces = spacesString(TEMP_STATUS_LENGTH + 1);\n      self._stream.write(spaces + CARRIAGE_RETURN);\n      self._wroteStatusMessage = false;\n    }\n  },\n\n  repaint: function () {\n    // We don't repaint after a log message (is that right?)\n  },\n\n  updateStatus: function (status) {\n    var self = this;\n\n    if (status == self._status) {\n      return;\n    }\n\n    self._status = status;\n    self._render();\n  },\n\n  _render: function () {\n    var self = this;\n\n    var text = self._status;\n    if (text) {\n      text = toFixedLength(text, STATUS_MAX_LENGTH);\n    }\n\n    if (text) {\n      // the number of characters besides `text` here must\n      // be accounted for in TEMP_STATUS_LENGTH.\n      self._stream.write('  (  ' + text + '  ... )' + CARRIAGE_RETURN);\n      self._wroteStatusMessage = true;\n    }\n  }\n});\n\nvar SpinnerRenderer = function () {\n  var self = this;\n  self.frames = ['-', '\\\\', '|', '/'];\n  self.start = +(new Date);\n  self.interval = 250;\n  //// I looked at some Unicode indeterminate progress indicators, such as:\n  ////\n  //// spinner = \"▁▃▄▅▆▇▆▅▄▃\".split('');\n  //// spinner = \"▉▊▋▌▍▎▏▎▍▌▋▊▉\".split('');\n  //// spinner = \"▏▎▍▌▋▊▉▊▋▌▍▎▏▁▃▄▅▆▇▆▅▄▃\".split('');\n  //// spinner = \"▉▊▋▌▍▎▏▎▍▌▋▊▉▇▆▅▄▃▁▃▄▅▆▇\".split('');\n  //// spinner = \"⠉⠒⠤⣀⠤⠒\".split('');\n  ////\n  //// but none of them really seemed like an improvement. I think\n  //// the case for using unicode would be stronger in a determinate\n  //// progress indicator.\n  ////\n  //// There are also some four-frame options such as ◐◓◑◒ at\n  ////   http://stackoverflow.com/a/2685827/157965\n  //// but all of the ones I tried look terrible in the terminal.\n};\n\nSpinnerRenderer.prototype.asString = function () {\n  var self = this;\n  var now = +(new Date);\n\n  var t = now - self.start;\n  var frame = Math.floor(t / self.interval) % self.frames.length;\n  return self.frames[frame];\n};\n\n// Renders a progressbar.  Based on the npm 'progress' module, but tailored to our needs (i.e. renders to string)\nvar ProgressBarRenderer = function (format, options) {\n  var self = this;\n\n  options = options || {};\n\n  self.fmt = format;\n  self.curr = 0;\n  self.total = 100;\n  self.maxWidth = options.maxWidth || self.total;\n  self.chars = {\n    complete   : '=',\n    incomplete : ' '\n  };\n};\n\n_.extend(ProgressBarRenderer.prototype, {\n  asString: function (availableSpace) {\n    var self = this;\n\n    var ratio = self.curr / self.total;\n    ratio = Math.min(Math.max(ratio, 0), 1);\n\n    var percent = ratio * 100;\n    var incomplete, complete, completeLength;\n    var elapsed = new Date - self.start;\n    var eta = (percent == 100) ? 0 : elapsed * (self.total / self.curr - 1);\n\n    /* populate the bar template with percentages and timestamps */\n    var str = self.fmt\n      .replace(':current', self.curr)\n      .replace(':total', self.total)\n      .replace(':elapsed', isNaN(elapsed) ? '0.0' : (elapsed / 1000).toFixed(1))\n      .replace(':eta', (isNaN(eta) || ! isFinite(eta)) ? '0.0' : (eta / 1000).toFixed(1))\n      .replace(':percent', percent.toFixed(0) + '%');\n\n    /* compute the available space (non-zero) for the bar */\n    var width = Math.min(self.maxWidth, availableSpace - str.replace(':bar', '').length);\n\n    /* NOTE: the following assumes the user has one ':bar' token */\n    completeLength = Math.round(width * ratio);\n    complete = Array(completeLength + 1).join(self.chars.complete);\n    incomplete = Array(width - completeLength + 1).join(self.chars.incomplete);\n\n    /* fill in the actual progress bar */\n    str = str.replace(':bar', complete + incomplete);\n\n    return str;\n  }\n});\n\n\nvar ProgressDisplayFull = function (console) {\n  var self = this;\n\n  self._console = console;\n  self._stream = console._stream;\n\n  self._status = '';\n\n  var options = {\n    complete: '=',\n    incomplete: ' ',\n    maxWidth: PROGRESS_MAX_WIDTH,\n    total: 100\n  };\n  self._progressBarRenderer = new ProgressBarRenderer(PROGRESS_BAR_FORMAT, options);\n  self._progressBarRenderer.start = new Date();\n\n  self._headless = false;\n\n  self._spinnerRenderer = new SpinnerRenderer();\n\n  self._fraction = undefined;\n\n  self._printedLength = 0;\n\n  self._lastWrittenLine = null;\n  self._lastWrittenTime = 0;\n};\n\n_.extend(ProgressDisplayFull.prototype, {\n  depaint: function () {\n    var self = this;\n\n    self._stream.write(spacesString(self._printedLength) + CARRIAGE_RETURN);\n  },\n\n  updateStatus: function (status) {\n    var self = this;\n\n    if (status == self._status) {\n      return;\n    }\n\n    self._status = status;\n    self._render();\n  },\n\n  updateProgress: function (fraction, startTime) {\n    var self = this;\n\n    self._fraction = fraction;\n    if (fraction !== undefined) {\n      self._progressBarRenderer.curr = Math.floor(fraction * self._progressBarRenderer.total);\n    }\n    if (startTime) {\n      self._progressBarRenderer.start = startTime;\n    }\n    self._render();\n  },\n\n  repaint: function () {\n    var self = this;\n    self._render();\n  },\n\n  setHeadless(headless) {\n    this._headless = !! headless;\n  },\n\n  _render: function () {\n    var self = this;\n\n    // XXX: Throttle these updates?\n    // XXX: Or maybe just jump to the correct position?\n    var progressGraphic = '';\n\n    // The cursor appears in position 0; we indent it a little to avoid this\n    // This also means it appears less important, which is good\n    var indentColumns = 3;\n\n    var streamColumns = this._console.width();\n    var statusColumns;\n    var progressColumns;\n    if (! streamColumns) {\n      statusColumns = STATUS_MAX_LENGTH;\n      progressColumns = 0;\n    } else {\n      statusColumns = Math.min(STATUS_MAX_LENGTH, streamColumns - indentColumns);\n      progressColumns = Math.min(PROGRESS_MAX_WIDTH, streamColumns - indentColumns - statusColumns);\n    }\n\n    if (self._fraction !== undefined && progressColumns > 16) {\n      // 16 is a heuristic number that allows enough space for a meaningful progress bar\n      progressGraphic = \"  \" + self._progressBarRenderer.asString(progressColumns - 2);\n\n    } else if (! self._headless && progressColumns > 3) {\n      // 3 = 2 spaces + 1 spinner character\n      progressGraphic = \"  \" + self._spinnerRenderer.asString();\n\n    } else if (new Date - self._lastWrittenTime > 5 * 60 * 1000) {\n      // Print something every five minutes, to avoid test timeouts.\n      progressGraphic = \"  [ProgressDisplayFull keepalive]\";\n      self._lastWrittenLine = null; // Force printing.\n    }\n\n    if (self._status || progressGraphic) {\n      // XXX: Just update the graphic, to avoid text flicker?\n\n      var line = spacesString(indentColumns);\n      var length = indentColumns;\n\n      if (self._status) {\n        var fixedLength = toFixedLength(self._status, statusColumns);\n        line += chalk.bold(fixedLength);\n        length += statusColumns;\n      } else {\n        line += spacesString(statusColumns);\n        length += statusColumns;\n      }\n\n      line += progressGraphic + CARRIAGE_RETURN;\n      length += progressGraphic.length;\n\n      if (self._headless &&\n          line === self._lastWrittenLine) {\n        // Don't write the exact same line twice in a row.\n        return;\n      }\n\n      self.depaint();\n\n      self._stream.write(line);\n      self._lastWrittenLine = line;\n      self._lastWrittenTime = +new Date;\n      self._printedLength = length;\n    }\n  }\n});\n\nvar StatusPoller = function (console) {\n  var self = this;\n\n  // The current progress we are watching\n  self._watching = null;\n\n  self._console = console;\n\n  self._pollPromise = null;\n  self._throttledStatusPoll = new utils.Throttled({\n    interval: STATUS_INTERVAL_MS\n  });\n  self._startPoller();\n  self._stop = false;\n};\n\n_.extend(StatusPoller.prototype, {\n  _startPoller: function () {\n    var self = this;\n\n    if (self._pollPromise) {\n      throw new Error(\"Already started\");\n    }\n\n    self._pollPromise = (async() => {\n      utils.sleepMs(STATUS_INTERVAL_MS);\n      while (! self._stop) {\n        self.statusPoll();\n        utils.sleepMs(STATUS_INTERVAL_MS);\n      }\n    })();\n  },\n\n  stop: function () {\n    var self = this;\n\n    self._stop = true;\n  },\n\n  statusPoll: function () {\n    var self = this;\n    if (self._throttledStatusPoll.isAllowed()) {\n      self._statusPoll();\n    }\n  },\n\n  _statusPoll: function () {\n    var self = this;\n\n    // XXX: Early exit here if we're not showing status at all?\n\n    var rootProgress = buildmessage.getRootProgress();\n    if (PROGRESS_DEBUG) {\n      // It can be handy for dev purposes to see all the executing tasks\n      rootProgress.dump(process.stdout, {skipDone: true});\n    }\n\n    var reportState = function (state, startTime) {\n      var progressDisplay = self._console._progressDisplay;\n      // Do the % computation, if it is going to be used\n      if (progressDisplay.updateProgress) {\n        if (state.end === undefined || state.end == 0) {\n          progressDisplay.updateProgress(undefined, startTime);\n        } else {\n          var fraction = state.done ? 1.0 : (state.current / state.end);\n\n          if (! isNaN(fraction) && fraction >= 0) {\n            progressDisplay.updateProgress(fraction, startTime);\n          } else {\n            progressDisplay.updateProgress(0, startTime);\n          }\n        }\n      }\n    };\n\n    var watching = (rootProgress ? rootProgress.getCurrentProgress() : null);\n\n    if (self._watching === watching) {\n      // We need to do this to keep the spinner spinning\n      // XXX: Should we _only_ do this when we're showing the spinner?\n      reportState(watching.getState(), watching.startTime);\n      return;\n    }\n\n    self._watching = watching;\n\n    var title = (watching != null ? watching._title : null) || FALLBACK_STATUS;\n\n    var progressDisplay = self._console._progressDisplay;\n    progressDisplay.updateStatus && progressDisplay.updateStatus(title);\n\n    if (watching) {\n      watching.addWatcher(function (state) {\n        if (watching != self._watching) {\n          // No longer active\n          // XXX: De-register with watching? (we don't bother right now because dead tasks tell no status)\n          return;\n        }\n\n        reportState(state, watching.startTime);\n      });\n    }\n  }\n});\n\nvar Console = function (options) {\n  var self = this;\n\n  options = options || {};\n\n  self._headless = false;\n\n  // The progress display we are showing on-screen\n  self._progressDisplay = new ProgressDisplayNone(self);\n\n  self._statusPoller = null;\n\n  self._throttledYield = new utils.ThrottledYield();\n\n  self.verbose = false;\n\n  // Legacy helpers\n  self.stdout = {};\n  self.stderr = {};\n\n  self._stream = process.stdout;\n\n  self._pretty = (FORCE_PRETTY !== undefined ? FORCE_PRETTY : false);\n  self._progressDisplayEnabled = false;\n\n  self._logThreshold = LEVEL_CODE_INFO;\n  var logspec = process.env.METEOR_LOG;\n  if (logspec) {\n    logspec = logspec.trim().toLowerCase();\n    if (logspec == 'debug') {\n      self._logThreshold = LEVEL_CODE_DEBUG;\n    }\n  }\n\n  cleanup.onExit(function (sig) {\n    self.enableProgressDisplay(false);\n  });\n};\n\nvar LEVEL_CODE_ERROR = 4;\nvar LEVEL_CODE_WARN = 3;\nvar LEVEL_CODE_INFO = 2;\nvar LEVEL_CODE_DEBUG = 1;\n\nvar LEVEL_ERROR = { code: LEVEL_CODE_ERROR };\nvar LEVEL_WARN = { code: LEVEL_CODE_WARN };\nvar LEVEL_INFO = { code: LEVEL_CODE_INFO };\nvar LEVEL_DEBUG = { code: LEVEL_CODE_DEBUG };\n\n// We use a special class to represent the options that we send to the Console\n// because it allows us to call 'instance of' on the last argument of variadic\n// functions. This allows us to keep the signature of our custom output\n// functions (ex: info) roughly the same as the originals.\nvar ConsoleOptions = function (o) {\n  var self = this;\n  self.options = o;\n}\n\n_.extend(Console.prototype, {\n  LEVEL_ERROR: LEVEL_ERROR,\n  LEVEL_WARN: LEVEL_WARN,\n  LEVEL_INFO: LEVEL_INFO,\n  LEVEL_DEBUG: LEVEL_DEBUG,\n\n  setPretty: function (pretty) {\n    var self = this;\n    // If we're being forced, do nothing.\n    if (FORCE_PRETTY !== undefined) {\n      return;\n    }\n    // If no change, do nothing.\n    if (self._pretty === pretty) {\n      return;\n    }\n    self._pretty = pretty;\n    self._updateProgressDisplay();\n  },\n\n  // Runs f with the progress display visible (ie, with progress display enabled\n  // and pretty). Resets both flags to their original values after f runs.\n  withProgressDisplayVisible: function (f) {\n    var self = this;\n    var originalPretty = self._pretty;\n    var originalProgressDisplayEnabled = self._progressDisplayEnabled;\n\n    // Turn both flags on.\n    self._pretty = self._progressDisplayEnabled = true;\n\n    // Update the screen if anything changed.\n    if (! originalPretty || ! originalProgressDisplayEnabled) {\n      self._updateProgressDisplay();\n    }\n\n    try {\n      return f();\n    } finally {\n      // Reset the flags.\n      self._pretty = originalPretty;\n      self._progressDisplayEnabled = originalProgressDisplayEnabled;\n      // Update the screen if anything changed.\n      if (! originalPretty || ! originalProgressDisplayEnabled) {\n        self._updateProgressDisplay();\n      }\n    }\n  },\n\n  setVerbose: function (verbose) {\n    var self = this;\n    self.verbose = verbose;\n  },\n\n  // Get the current width of the Console.\n  width: function () {\n    var width = 80;\n    var stream = process.stdout;\n    if (stream && stream.isTTY && stream.columns) {\n      width = stream.columns;\n    }\n\n    // On Windows cmd.exe splits long lines into smaller chunks by inserting the\n    // '\\r\\n' symbols into the stream, this is what cmd.exe does instead of\n    // reflowing the text. We cannot control it. For some unknown reason, even\n    // when the output line is less than number of columns (usually 80), cmd.exe\n    // would still insert new-line chars. These chars break our repainting that\n    // relies on the previous chars to be erasable with '\\b' (end-line chars\n    // can't be erased this way). This is why we report a smaller number than it\n    // is in reality, for safety.\n    if (process.platform === 'win32') {\n      width -= 5;\n    }\n\n    return width;\n  },\n\n  // This can be called during long lived operations; it will keep the spinner spinning.\n  // (This code used to be in Patience.nudge)\n  //\n  // It's frustrating when you write code that takes a while, either because it\n  // uses a lot of CPU or because it uses a lot of network/IO.  In Node,\n  // consuming lots of CPU without yielding is especially bad.\n  // Other IO/network tasks will stall, and you can't even kill the process!\n  //\n  // Within any code that may burn CPU for too long, call `Console.nudge()`.\n  // If it's been a while since your last yield, your Fiber will sleep momentarily.\n  // It will also update the spinner if there is one and it's been a while.\n  // The caller should be OK with yielding --- it has to be in a Fiber and it can't be\n  // anything that depends for correctness on not yielding.  You can also call nudge(false)\n  // if you just want to update the spinner and not yield, but you should avoid this.\n  nudge: function (canYield) {\n    var self = this;\n    if (self._statusPoller) {\n      self._statusPoller.statusPoll();\n    }\n    if (canYield === undefined || canYield === true) {\n      self._throttledYield.yield();\n    }\n  },\n\n  // Initializes and returns a new ConsoleOptions object. Takes in the following\n  // Console options to pass to _wrapText eventually.\n  //\n  //   - bulletPoint: start the first line with a given string, then offset the\n  //     subsequent lines by the length of that string. For example, if the\n  //     bulletpoint is \" => \", we would get:\n  //     \" => some long message starts here\n  //          and then continues here.\"\n  //   - indent: offset the entire string by a specific number of\n  //     characters. For example:\n  //     \"  This entire message is indented\n  //        by two characters.\"\n  //\n  // Passing in both options will offset the bulletPoint by the indentation,\n  // like so:\n  //  \"  this message is indented by two.\"\n  //  \"  => this mesage indented by two and\n  //        and also starts with an arrow.\"\n  //\n  options: function (o) {\n    // (This design pattern allows us to call 'instance of' on the\n    // ConsoleOptions in parseVariadicInput, by ensuring that the object created\n    // with Console.options is, in fact, a new object.\n    return new ConsoleOptions(o);\n  },\n\n  // Deal with the arguments to a variadic print function that also takes an\n  // optional ConsoleOptions argument at the end.\n  //\n  // Returns an object with keys:\n  //  - options: The options that were passed in, or an empty object.\n  //  - message: Arguments to the original function, parsed as a string.\n  //\n  _parseVariadicInput: function (args) {\n    var self = this;\n    var msgArgs;\n    var options;\n    // If the last argument is an instance of ConsoleOptions, then we should\n    // separate it out, and only send the first N-1 arguments to be parsed as a\n    // message.\n    if (_.last(args) instanceof ConsoleOptions) {\n      msgArgs = _.initial(args);\n      options = _.last(args).options;\n    } else {\n      msgArgs = args;\n      options = {};\n    }\n    var message = self._format(msgArgs);\n    return { message: message, options: options };\n  },\n\n  isLevelEnabled: function (levelCode) {\n    return (this.verbose || this._logThreshold <= levelCode);\n  },\n\n  isDebugEnabled: function () {\n    return this.isLevelEnabled(LEVEL_CODE_DEBUG);\n  },\n\n\n  // Don't pretty-fy this output by trying to, for example, line-wrap it. Just\n  // print it to the screen as it is.\n  rawDebug: function(...args) {\n    var self = this;\n    if (! self.isDebugEnabled()) {\n      return;\n    }\n\n    var message = self._format(args);\n    self._print(LEVEL_DEBUG, message);\n  },\n\n  // By default, Console.debug automatically line wraps the output.\n  //\n  // Takes in an optional Console.options({}) argument at the end, with the\n  // following keys:\n  //   - bulletPoint: start the first line with a given string, then offset the\n  //     subsequent lines by the length of that string. See _wrap for more details.\n  //   - indent: offset the entire string by a specific number of\n  //     characters. See _wrap for more details.\n  //\n  debug: function(...args) {\n    var self = this;\n    if (! self.isDebugEnabled()) { return; }\n\n    var message = self._prettifyMessage(args);\n    self._print(LEVEL_DEBUG, message);\n  },\n\n  isInfoEnabled: function () {\n    return this.isLevelEnabled(LEVEL_CODE_INFO);\n  },\n\n  // Don't pretty-fy this output by trying to, for example, line-wrap it. Just\n  // print it to the screen as it is.\n  rawInfo: function(...args) {\n    var self = this;\n    if (! self.isInfoEnabled()) {\n      return;\n    }\n\n    var message = self._format(args);\n    self._print(LEVEL_INFO, message);\n  },\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawInfo function. For more information about options, see: debug.\n  info: function(...args) {\n    var self = this;\n    if (! self.isInfoEnabled()) { return; }\n\n    var message = self._prettifyMessage(args);\n    self._print(LEVEL_INFO, message);\n  },\n\n  isWarnEnabled: function () {\n    return this.isLevelEnabled(LEVEL_CODE_WARN);\n  },\n\n  rawWarn: function(...args) {\n    var self = this;\n    if (! self.isWarnEnabled()) {\n      return;\n    }\n\n    var message = self._format(args);\n    self._print(LEVEL_WARN, message);\n  },\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawWarn function. For more information about options, see: debug.\n  warn: function(...args) {\n    var self = this;\n    if (! self.isWarnEnabled()) { return; }\n\n    var message = self._prettifyMessage(args);\n    self._print(LEVEL_WARN, message);\n  },\n\n  rawError: function(...args) {\n    var self = this;\n\n    var message = self._format(args);\n    self._print(LEVEL_ERROR, message);\n  },\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawError function. For more information about options, see: debug.\n  error: function(...args) {\n    var self = this;\n\n    var message = self._prettifyMessage(args);\n    self._print(LEVEL_ERROR, message);\n  },\n\n  // Prints a special ANSI sequence that \"clears\" the screen (on most terminal\n  // emulators just scrolls the contents down and resets the position).\n  // References: http://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes\n  clear: function () {\n    var self = this;\n\n    self.rawInfo('\\u001b[2J\\u001b[0;0H');\n  },\n\n  _prettifyMessage: function (msgArguments) {\n    var self = this;\n    var parsedArgs = self._parseVariadicInput(msgArguments);\n    var wrapOpts = {\n      indent: parsedArgs.options.indent,\n      bulletPoint: parsedArgs.options.bulletPoint\n    };\n\n    var wrappedMessage = self._wrapText(parsedArgs.message, wrapOpts);\n    wrappedMessage += \"\\n\";\n    return wrappedMessage;\n  },\n\n  _print: function(level, message) {\n    var self = this;\n\n    // We need to hide the progress bar/spinner before printing the message\n    var progressDisplay = self._progressDisplay;\n    progressDisplay.depaint();\n\n    // stdout/stderr is determined by the log level\n    // XXX: We should probably just implement Loggers with observers\n    var dest = process.stdout;\n    if (level) {\n      switch (level.code) {\n        case LEVEL_CODE_ERROR:\n          dest = process.stderr;\n          break;\n        case LEVEL_CODE_WARN:\n          dest = process.stderr;\n          break;\n      }\n    }\n\n    // Pick the color/weight if in pretty mode\n    var style = null;\n    if (level && self._pretty) {\n      switch (level.code) {\n        case LEVEL_CODE_ERROR:\n          style = chalk.bold.red;\n          break;\n        case LEVEL_CODE_WARN:\n          style = chalk.red;\n          break;\n      }\n    }\n\n    if (style) {\n      dest.write(style(message));\n    } else {\n      dest.write(message);\n    }\n\n    // XXX: Pause before showing the progress display, to prevent\n    // flicker/spewing messages\n    // Repaint the progress display\n    progressDisplay.repaint();\n  },\n\n  // A wrapper around Console.info. Prints the message out in green (if pretty),\n  // with the CHECKMARK as the bullet point in front of it.\n  success: function (message, uglySuccessKeyword = \"success\") {\n    var self = this;\n    var checkmark;\n\n    if (! self._pretty) {\n      return self.info(`${message}: ${uglySuccessKeyword}`);\n    }\n\n    if (process.platform === \"win32\") {\n      checkmark = chalk.green('SUCCESS');\n    } else {\n      checkmark = chalk.green('\\u2713'); // CHECKMARK\n    }\n\n    return self.info(\n        chalk.green(message),\n        self.options({ bulletPoint: checkmark  + \" \"}));\n  },\n\n  // Wrapper around Console.info. Prints the message out in red (if pretty)\n  // with the BALLOT X as the bullet point in front of it.\n  failInfo: function (message) {\n    var self = this;\n    return self._fail(message, \"info\");\n  },\n\n  // Wrapper around Console.warn. Prints the message out in red (if pretty)\n  // with the ascii x as the bullet point in front of it.\n  failWarn: function (message) {\n    var self = this;\n    return self._fail(message, \"warn\");\n  },\n\n  // Print the message in red (if pretty) with an x bullet point in front of it.\n  _fail: function (message, printFn) {\n    var self = this;\n\n    if (! self._pretty) {\n      return self[printFn](message);\n    }\n\n    var xmark = chalk.red('\\u2717');\n    return self[printFn](\n        chalk.red(message),\n        self.options({ bulletPoint: xmark + \" \" }));\n  },\n\n  // Wrapper around Console.warn that prints a large \"WARNING\" label in front.\n  labelWarn: function (message) {\n    var self = this;\n    return self.warn(message, self.options({ bulletPoint: \"WARNING: \" }));\n  },\n\n  // Wrappers around Console functions to prints an \"=> \" in front. Optional\n  // indent to indent the arrow.\n  arrowError: function (message, indent) {\n    var self = this;\n    return self._arrowPrint(\"error\", message, indent);\n  },\n  arrowWarn: function (message, indent) {\n    var self = this;\n    return self._arrowPrint(\"warn\", message, indent);\n  },\n  arrowInfo: function (message, indent) {\n    var self = this;\n    return self._arrowPrint(\"info\", message, indent);\n  },\n  _arrowPrint: function(printFn, message, indent) {\n    var self = this;\n    indent = indent || 0;\n    return self[printFn](\n      message,\n      self.options({ bulletPoint: ARROW, indent: indent }));\n  },\n\n  // A wrapper around console.error. Given an error and some background\n  // information, print out the correct set of messages depending on verbose\n  // level, etc.\n  printError: function (err, info) {\n    var self = this;\n\n    var message = err.message;\n    if (! message) {\n      message = \"Unexpected error\";\n      if (self.verbose) {\n        message += \" (\" + err.toString() + \")\";\n      }\n    }\n\n    if (info) {\n      message = info + \": \" + message;\n    }\n\n    self.error(message);\n    if (self.verbose && err.stack) {\n      self.rawInfo(err.stack + \"\\n\");\n    }\n  },\n\n  // A wrapper to print out buildmessage errors.\n  printMessages: function (messages) {\n    var self = this;\n\n    if (messages.hasMessages()) {\n      self.error(\"\\n\" + messages.formatMessages());\n    }\n  },\n\n  // Wrap commands in this function -- it ensures that commands don't get line\n  // wrapped (ie: print 'meteor' at the end of the line, and 'create --example'\n  // at the beginning of the next one).\n  //\n  // To use, wrap commands that you send into print functions with this\n  // function, like so: Console.info(text + Console.command(\"meteor create\n  // --example leaderboard\") + moretext).\n  //\n  // If pretty print is on, this will also bold the commands.\n  command: function (message) {\n    var self = this;\n    var unwrapped = self.noWrap(message);\n    return self.bold(unwrapped);\n  },\n\n  // Underline the URLs (if pretty print is on).\n  url: function (message) {\n    var self = this;\n    // If we are going to print URLs with spaces, we should turn spaces into\n    // things browsers understand.\n    var unspaced =\n          replaceAll(message, ' ', '%20');\n    // There is no need to call noWrap here, since that only handles spaces (and\n    // we have done that). If it ever handles things other than spaces, we\n    // should make sure to call it here.\n    return self.underline(unspaced);\n  },\n\n  // Format a filepath to not wrap. This does NOT automatically escape spaces\n  // (ie: add a slash in front so the user could copy paste the file path into a\n  // terminal).\n  path: function (message) {\n    var self = this;\n    // Make sure that we don't wrap this.\n    var unwrapped = self.noWrap(message);\n    return self.bold(unwrapped);\n  },\n\n  // Do not wrap this substring when you send it into a non-raw print function.\n  // DO NOT print the result of this call with a raw function.\n  noWrap: function (message) {\n    var noBlanks = replaceAll(message, ' ', SPACE_REPLACEMENT);\n    return noBlanks;\n  },\n\n  // A wrapper around the underline functionality of chalk.\n  underline: function (message) {\n    var self = this;\n\n    if (! self._pretty) {\n      return message;\n    }\n    return chalk.underline(message);\n  },\n\n  // A wrapper around the bold functionality of chalk.\n  bold: function (message) {\n    var self = this;\n\n    if (! self._pretty) {\n      return message;\n    }\n    return chalk.bold(message);\n  },\n\n  // Prints a two column table in a nice format (The first column is printed\n  // entirely, the second only as space permits).\n  //  options:\n  //      - level: Allows to print to stderr, instead of stdout. Set the print\n  //        level with Console.LEVEL_INFO, Console.LEVEL_ERROR, etc.\n  //      - ignoreWidth: ignore the width of the terminal, and go over the\n  //        character limit instead of trailing off with '...'. Useful for\n  //        printing directories, for examle.\n  //      - indent: indent the entire table by a given number of spaces.\n  printTwoColumns : function (rows, options) {\n    var self = this;\n    options = options || {};\n\n    var longest = '';\n    _.each(rows, function (row) {\n      var col0 = row[0] || '';\n      if (col0.length > longest.length) {\n        longest = col0;\n      }\n    });\n\n    var pad = longest.replace(/./g, ' ');\n    var width = self.width();\n    var indent =\n      options.indent ? Array(options.indent + 1).join(' ') : \"\";\n\n    var out = '';\n    _.each(rows, function (row) {\n      var col0 = row[0] || '';\n      var col1 = row[1] || '';\n      var line = indent + self.bold(col0) + pad.substr(col0.length);\n      line += \"  \" + col1;\n      if (! options.ignoreWidth && line.length > width) {\n        line = line.substr(0, width - 3) + '...';\n      }\n      out += line + \"\\n\";\n    });\n\n    var level = options.level || self.LEVEL_INFO;\n    out += \"\\n\";\n    self._print(level, out);\n\n    return out;\n  },\n\n  // Format logs according to the spec in utils.\n  _format: function (logArguments) {\n    return util.format.apply(util, logArguments);\n  },\n\n  // Wraps long strings to the length of user's terminal. Inserts linebreaks\n  // between words when nearing the end of the line. Returns the wrapped string\n  // and takes the following arguments:\n  //\n  // text: the text to wrap\n  // options:\n  //   - bulletPoint: (see: Console.options)\n  //   - indent: (see: Console.options)\n  //\n  _wrapText: function (text, options) {\n    var self = this;\n    options = options || {};\n\n    // Compute the maximum offset on the bulk of the message.\n    var maxIndent = 0;\n    if (options.indent && options.indent > 0) {\n      maxIndent = maxIndent + options.indent;\n    }\n    if (options.bulletPoint) {\n      maxIndent = maxIndent + options.bulletPoint.length;\n    }\n\n    // Get the maximum width, or if we are not running in a terminal (self-test,\n    // for example), default to 80 columns.\n    var max = self.width();\n\n    var wrappedText;\n    if (process.env.METEOR_NO_WORDWRAP) {\n      var indent =\n        options.indent ? Array(options.indent + 1).join(' ') : \"\";\n      if (options.bulletPoint) {\n        wrappedText = options.bulletPoint + text;\n      } else {\n        wrappedText = text;\n      }\n      wrappedText = _.map(wrappedText.split('\\n'), function (s) {\n        if (s === \"\") {\n          return \"\";\n        }\n        return indent + s;\n      }).join('\\n');\n\n    } else {\n      // Wrap the text using the npm wordwrap library.\n      wrappedText = wordwrap(maxIndent, max)(text);\n\n      // Insert the start string, if applicable.\n      if (options.bulletPoint) {\n        // Save the initial indent level.\n        var initIndent = options.indent ?\n              wrappedText.substring(0, options.indent) : \"\";\n        // Add together the initial indent (if any), the bullet point and the\n        // remainder of the message.\n        wrappedText = initIndent + options.bulletPoint +\n          wrappedText.substring(maxIndent);\n      }\n    }\n\n    // If we have previously replaces any spaces, now is the time to bring them\n    // back.\n    wrappedText = replaceAll(wrappedText, SPACE_REPLACEMENT, ' ');\n    return wrappedText;\n  },\n\n\n  // Enables the progress bar, or disables it when called with (false)\n  enableProgressDisplay: function (enabled) {\n    var self = this;\n\n    // No arg => enable\n    if (enabled === undefined) {\n      enabled = true;\n    }\n\n    if (self._progressDisplayEnabled === enabled) {\n      return;\n    }\n\n    self._progressDisplayEnabled = enabled;\n    self._updateProgressDisplay();\n  },\n\n  // In response to a change in setPretty or enableProgressDisplay,\n  // configure the appropriate progressDisplay\n  _updateProgressDisplay: function () {\n    var self = this;\n\n    var newProgressDisplay;\n\n    if (! self._progressDisplayEnabled) {\n      newProgressDisplay = new ProgressDisplayNone();\n    } else if ((! self._stream.isTTY) || (! self._pretty)) {\n      // No progress bar if not in pretty / on TTY.\n      newProgressDisplay = new ProgressDisplayNone(self);\n    } else if (self._stream.isTTY && ! self._stream.columns) {\n      // We might be in a pseudo-TTY that doesn't support\n      // clearLine() and cursorTo(...).\n      // It's important that we only enter status message mode\n      // if self._pretty, so that we don't start displaying\n      // status messages too soon.\n      // XXX See note where ProgressDisplayStatus is defined.\n      newProgressDisplay = new ProgressDisplayStatus(self);\n    } else {\n      // Otherwise we can do the full progress bar\n      newProgressDisplay = new ProgressDisplayFull(self);\n    }\n\n    // Start/stop the status poller, so we never block exit\n    if (self._progressDisplayEnabled) {\n      if (! self._statusPoller) {\n        self._statusPoller = new StatusPoller(self);\n      }\n    } else {\n      if (self._statusPoller) {\n        self._statusPoller.stop();\n        self._statusPoller = null;\n      }\n    }\n\n    self._setProgressDisplay(newProgressDisplay);\n  },\n\n  isHeadless() {\n    return this._headless;\n  },\n\n  setHeadless(headless = true) {\n    this._headless = !! headless;\n\n    if (this._progressDisplay &&\n        this._progressDisplay.setHeadless) {\n      this._progressDisplay.setHeadless(this._headless);\n    }\n  },\n\n  _setProgressDisplay: function (newProgressDisplay) {\n    var self = this;\n\n    // XXX: Optimize case of no-op transitions? (same mode -> same mode)\n\n    var oldProgressDisplay = self._progressDisplay;\n    oldProgressDisplay.depaint();\n\n    self._progressDisplay = newProgressDisplay;\n  }\n});\n\n// options:\n//   - echo (boolean): defaults to true\n//   - prompt (string)\n//   - stream: defaults to process.stdout (you might want process.stderr)\nConsole.prototype.readLine = function (options) {\n  var self = this;\n\n  options = _.extend({\n    echo: true,\n    stream: self._stream\n  }, options);\n\n  var silentStream = {\n    write: function () {\n    },\n    on: function () {\n    },\n    end: function () {\n    },\n    isTTY: options.stream.isTTY,\n    removeListener: function () {\n    }\n  };\n\n  var previousProgressDisplay = self._progressDisplay;\n  self._setProgressDisplay(new ProgressDisplayNone());\n\n  // Read a line, throwing away the echoed characters into our dummy stream.\n  var rl = readline.createInterface({\n    input: process.stdin,\n    output: options.echo ? options.stream : silentStream,\n    // `terminal: options.stream.isTTY` is the default, but emacs shell users\n    // don't want fancy ANSI.\n    terminal: options.stream.isTTY && process.env.EMACS !== 't'\n  });\n\n  if (! options.echo) {\n    options.stream.write(options.prompt);\n  } else {\n    rl.setPrompt(options.prompt);\n    rl.prompt();\n  }\n\n  return new Promise(function (resolve) {\n    rl.on('line', function (line) {\n      rl.close();\n      if (! options.echo) {\n        options.stream.write(\"\\n\");\n      }\n      self._setProgressDisplay(previousProgressDisplay);\n      resolve(line);\n    });\n  }).await();\n};\n\n\nexports.Console = new Console;\nexports.Console.CARRIAGE_RETURN = CARRIAGE_RETURN;\n"]}