{"version":3,"sources":["/tools/meteor-services/stats.js"],"names":["Fiber","require","_","config","files","auth","ServiceConnection","httpHelpers","Console","OPT_OUT_PACKAGE_NAME","packageList","projectContext","versions","packageMap","eachPackage","name","info","push","version","local","kind","direct","projectConstraintsFile","getConstraint","recordPackages","options","packages","findWhere","process","env","METEOR_PACKAGE_STATS_TEST_OUTPUT","stdout","write","appIdentifier","details","what","userAgent","getUserAgent","sessionId","getSessionId","getAccountsDomain","site","conn","connectToPackagesStatsServer","accountsConfiguration","getAccountsConfiguration","isLoggedIn","loginWithTokenOrOAuth","getPackageStatsServerUrl","getPackageStatsServerDomain","err","result","call","newSessionId","setSessionId","logErrorIfInCheckout","close","run","inCheckout","warn","printErr","stack","rawWarn","getPackagesForAppIdInTest","sortBy","_dontPrintErrors","exports"],"mappings":"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","file":"tools/meteor-services/stats.js.map","sourcesContent":["var Fiber = require(\"fibers\");\nvar _ = require(\"underscore\");\n\nvar config = require('./config.js');\nvar files = require('../fs/files.js');\nvar auth = require('./auth.js');\nvar ServiceConnection = require('./service-connection.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar Console = require('../console/console.js').Console;\n\n// The name of the package that you add to your app to opt out of\n// sending stats.\nvar OPT_OUT_PACKAGE_NAME = \"package-stats-opt-out\";\n\n// Return a list of packages used by this app, both directly and\n// indirectly. Formatted as a list of objects with 'name', 'version'\n// and 'direct', which is how the `recordAppPackages` method on the\n// stats server expects to get this list.\nvar packageList = function (projectContext) {\n  var versions = [];\n  projectContext.packageMap.eachPackage(function (name, info) {\n    versions.push({\n      name: name,\n      version: info.version,\n      local: info.kind === 'local',\n      direct: !! projectContext.projectConstraintsFile.getConstraint(name)\n    });\n  });\n  return versions;\n};\n\n// Options:\n// - what: one of \"sdk.bundle\", \"sdk.deploy\", \"sdk.run\".\n// - projectContext: the ProjectContext. prepareProjectForBuild\n//   must have run successfully. We must extract all necessary data\n//   from this before yielding.\n// - site: If it's a deploy, the name of the site (\"foo.meteor.com\") that we're\n//   deploying to.\nvar recordPackages = function (options) {\n  // Before doing anything, look at the app's dependencies to see if the\n  // opt-out package is there; if present, we don't record any stats.\n  var packages = packageList(options.projectContext);\n  if (_.findWhere(packages, { name: OPT_OUT_PACKAGE_NAME })) {\n    // Print some output for the 'report-stats' self-test.\n    if (process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n      process.stdout.write(\"PACKAGE STATS NOT SENT\\n\");\n    }\n    return;\n  }\n\n  var appIdentifier = options.projectContext.appIdentifier;\n\n  // We do this inside a new fiber to avoid blocking anything on talking\n  // to the package stats server. If we can't connect, for example, we\n  // don't care; we'll just miss out on recording these packages.\n  // This also gives it its own buildmessage state.\n  // However, we do make sure to have already extracted the package list from\n  // projectContext, since it might mutate out from under us otherwise.\n  Fiber(function () {\n\n    var details = {\n      what: options.what,\n      userAgent: httpHelpers.getUserAgent(),\n      sessionId: auth.getSessionId(config.getAccountsDomain()),\n      site: options.site\n    };\n\n    try {\n      var conn = connectToPackagesStatsServer();\n      var accountsConfiguration = auth.getAccountsConfiguration(conn);\n\n      if (auth.isLoggedIn()) {\n        try {\n          auth.loginWithTokenOrOAuth(\n            conn,\n            accountsConfiguration,\n            config.getPackageStatsServerUrl(),\n            config.getPackageStatsServerDomain(),\n            \"package-stats-server\"\n          );\n        } catch (err) {\n          // Do nothing. If we can't log in, we should continue and report\n          // stats anonymously.\n          //\n          // We log other errors with `logErrorIfInCheckout`, but login\n          // errors can happen in normal operation when nothing is wrong\n          // (e.g. login token expired or revoked) so we don't log them.\n        }\n      }\n\n      var result = conn.call(\"recordAppPackages\",\n                             appIdentifier,\n                             packages,\n                             details);\n\n      // If the stats server sent us a new session, save it for use on\n      // subsequent requests.\n      if (result && result.newSessionId) {\n        auth.setSessionId(config.getAccountsDomain(), result.newSessionId);\n      }\n\n      if (process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n        // Print some output for the 'report-stats' self-test.\n        process.stdout.write(\"PACKAGE STATS SENT\\n\");\n      }\n    } catch (err) {\n      logErrorIfInCheckout(err);\n      // Do nothing. A failure to record package stats shouldn't be\n      // visible to the end user and shouldn't affect whatever command\n      // they are running.\n    } finally {\n      conn && conn.close();\n    }\n  }).run();\n};\n\nvar logErrorIfInCheckout = function (err) {\n  if (files.inCheckout() || process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n    Console.warn(\"Failed to record package usage.\");\n    Console.warn(\n      \"(This error is hidden when you are not running Meteor from a\",\n      \"checkout.)\");\n    var printErr = err.stack || err;\n    Console.rawWarn(printErr + \"\\n\");\n    Console.warn();\n    Console.warn();\n  }\n};\n\n// Used in a test (and can only be used against the testing packages\n// server) to fetch one package stats entry for a given application.\nvar getPackagesForAppIdInTest = function (projectContext) {\n  var conn = connectToPackagesStatsServer();\n  var result;\n  try {\n    result = conn.call(\n      \"getPackagesForAppId\",\n      projectContext.appIdentifier);\n    if (result && result.details) {\n      result.details.packages = _.sortBy(result.details.packages, \"name\");\n    }\n  } finally {\n    conn.close();\n  }\n\n  return result;\n};\n\nvar connectToPackagesStatsServer = function () {\n  return new ServiceConnection(\n    config.getPackageStatsServerUrl(),\n    {_dontPrintErrors: true}\n  );\n};\n\nexports.recordPackages = recordPackages;\nexports.packageList = packageList; // for use in the \"stats\" self-test.\nexports.getPackagesForAppIdInTest = getPackagesForAppIdInTest;\n"]}