{"version":3,"sources":["/tools/meteor-services/config.js"],"names":["url","require","files","_","tropohouse","config","exports","extend","getOauthUrl","getAccountsApiUrl","getAuthDDPUrl","getBuildFarmUrl","process","env","METEOR_BUILD_FARM_URL","getBuildFarmDomain","parse","host","getPackageServerUrl","METEOR_PACKAGE_SERVER_URL","getPackageServerDomain","getPackageStatsServerUrl","METEOR_PACKAGE_STATS_SERVER_URL","getPackageStatsServerDomain","getPackageServerFilePrefix","serverUrl","self","replace","getPackagesDirectoryName","prefix","pathJoin","getLocalPackageCacheFilename","getPackageStorage","options","root","getIsopacketRoot","inCheckout","getCurrentToolsDir","getAccountsDomain","getSessionFilePath","METEOR_SESSION_FILE","getHomeDir"],"mappings":"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","file":"tools/meteor-services/config.js.map","sourcesContent":["var url = require('url');\nvar files = require('../fs/files.js');\nvar _ = require('underscore');\nvar tropohouse = require('../packaging/tropohouse.js');\n\n// A few functions in the `meteor` tool talk to MDG servers: primarily\n// checking for updates, logging into your Meteor account, and\n// deploying apps to the MDG free hosting sandbox, publishing packages,\n// getting an ssh access to a build farm. These functions need\n// configuration.\n\nvar config = exports;\n_.extend(exports, {\n  // Base URL for Meteor Accounts OAuth services. Endpoints include /authorize\n  // and /token.\n  getOauthUrl: function () {\n    return \"https://www.meteor.com/oauth2\";\n  },\n\n  // Base URL for Meteor Accounts API. Endpoints include '/login' and\n  // '/logoutById'.\n  getAccountsApiUrl: function () {\n    return \"https://www.meteor.com/api/v1\";\n  },\n\n  // URL for the DDP interface to Meteor Accounts.\n  getAuthDDPUrl: function () {\n    return \"https://www.meteor.com/auth\";\n  },\n\n  // URL for the DDP interface to the meteor build farm, typically\n  // \"https://build.meteor.com\".\n  getBuildFarmUrl: function () {\n    return process.env.METEOR_BUILD_FARM_URL || \"https://build.meteor.com\";\n  },\n\n  getBuildFarmDomain: function () {\n    return url.parse(config.getBuildFarmUrl()).host;\n  },\n\n  // URL for the DDP interface to the package server, typically\n  // \"https://packages.meteor.com\".\n  getPackageServerUrl: function () {\n    return process.env.METEOR_PACKAGE_SERVER_URL ||\n      \"https://packages.meteor.com\";\n  },\n\n  getPackageServerDomain: function () {\n    return url.parse(config.getPackageServerUrl()).host;\n  },\n\n  getPackageStatsServerUrl: function () {\n    return process.env.METEOR_PACKAGE_STATS_SERVER_URL ||\n      \"https://activity.meteor.com\";\n  },\n\n  getPackageStatsServerDomain: function () {\n    return url.parse(config.getPackageStatsServerUrl()).host;\n  },\n\n  // Note: this is NOT guaranteed to return a distinct prefix for every\n  // conceivable URL.  But it sure ought to return a distinct prefix for every\n  // server we actually use.\n  getPackageServerFilePrefix: function (serverUrl) {\n    var self = this;\n    if (!serverUrl) {\n      serverUrl = self.getPackageServerUrl();\n    }\n\n    // Chop off http:// and https:// and trailing slashes.\n    serverUrl = serverUrl.replace(/^\\https:\\/\\//, '');\n    serverUrl = serverUrl.replace(/^\\http:\\/\\//, '');\n    serverUrl = serverUrl.replace(/\\/+$/, '');\n\n    // Chop off meteor.com.\n    serverUrl = serverUrl.replace(/\\.meteor\\.com$/, '');\n\n    // Replace other weird stuff with X.\n    serverUrl = serverUrl.replace(/[^a-zA-Z0-9.-]/g, 'X');\n\n    return serverUrl;\n  },\n\n  getPackagesDirectoryName: function (serverUrl) {\n    var self = this;\n\n    var prefix = config.getPackageServerFilePrefix(serverUrl);\n    if (prefix !== 'packages') {\n      prefix = files.pathJoin('packages-from-server', prefix);\n    }\n\n    return prefix;\n  },\n\n  getLocalPackageCacheFilename: function (serverUrl) {\n    var self = this;\n    var prefix = self.getPackageServerFilePrefix(serverUrl);\n\n    // Should look like 'packages.data.db' in the default case\n    // (packages.data.json before 0.9.4).\n    return prefix + \".data.db\";\n  },\n\n  getPackageStorage: function (options) {\n    var self = this;\n    options = options || {};\n    var root = options.root || tropohouse.default.root;\n    return files.pathJoin(root, \"package-metadata\", \"v2.0.1\",\n                     self.getLocalPackageCacheFilename(options.serverUrl));\n  },\n\n  getIsopacketRoot: function () {\n    if (files.inCheckout()) {\n      return files.pathJoin(files.getCurrentToolsDir(), '.meteor', 'isopackets');\n    } else {\n      return files.pathJoin(files.getCurrentToolsDir(), 'isopackets');\n    }\n  },\n\n  // Return the domain name of the current Meteor Accounts server in\n  // use. This is used as a key for storing your Meteor Accounts\n  // login token.\n  getAccountsDomain: function () {\n    return \"www.meteor.com\";\n  },\n\n  // Path to file that contains our credentials for any services that\n  // we're logged in to. Typically .meteorsession in the user's home\n  // directory.\n  getSessionFilePath: function () {\n    // METEOR_SESSION_FILE is for automated testing purposes only.\n    return process.env.METEOR_SESSION_FILE ||\n      files.pathJoin(files.getHomeDir(), '.meteorsession');\n  }\n});\n"]}