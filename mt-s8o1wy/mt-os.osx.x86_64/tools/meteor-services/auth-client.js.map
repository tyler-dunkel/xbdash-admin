{"version":3,"sources":["/tools/meteor-services/auth-client.js"],"names":["auth","require","Console","ServiceConnection","httpHelpers","exports","AlreadyPrintedMessageError","openServiceConnection","serverUrl","headers","getUserAgent","_dontPrintErrors","handleConnectionError","error","label","errorType","errorMsg","message","warn","loggedInConnection","url","domain","sessionType","maybePrintRegistrationLink","onlyAllowIfRegistered","isLoggedIn","doUsernamePasswordLogin","retry","conn","accountsConfiguration","getAccountsConfiguration","loginWithTokenOrOAuth","err"],"mappings":"AAAA,IAAIA,OAAOC,QAAQ,WAAR,CAAX;AACA,IAAIC,UAAUD,QAAQ,uBAAR,EAAiCC,OAA/C;AACA,IAAIC,oBAAoBF,QAAQ,yBAAR,CAAxB;AACA,IAAIG,cAAcH,QAAQ,0BAAR,CAAlB;;AAEAI,QAAQC,0BAAR,GAAqC,YAAY,CAAE,CAAnD;;AAEA;AACA;AACA;AACAD,QAAQE,qBAAR,GAAgC,UAAUC,SAAV,EAAqB;AACnD,SAAO,IAAIL,iBAAJ,CACLK,SADK,EAEL,EAACC,SAAS,EAAC,cAAcL,YAAYM,YAAZ,EAAf,EAAV;AACCC,sBAAkB,IADnB,EAFK,CAAP;AAID,CALD;;AAQA;AACA;AACA;AACA;AACA;AACAN,QAAQO,qBAAR,GAAgC,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACtD,MAAID,iBAAiBR,QAAQC,0BAA7B,EAAyD;AACvD;AACD,GAFD,MAEO,IAAIO,MAAME,SAAN,KAAoB,cAAxB,EAAwC;AAC7C,QAAIC,WAAW,gBAAgBF,KAA/B;AACA,QAAID,MAAMI,OAAV,EAAmB;AACjBD,kBAAY,OAAOH,MAAMI,OAAzB;AACD;AACDf,YAAQgB,IAAR,CAAaF,QAAb;AACD,GANM,MAMA,IAAIH,MAAME,SAAN,KAAoB,qBAAxB,EAA+C;AACpDb,YAAQgB,IAAR,CAAa,yBAAyBJ,KAAzB,GAAiC,IAAjC,GACED,MAAMI,OADrB;AAED,GAHM,MAGA;AACL,UAAMJ,KAAN;AACD;AACF,CAfD;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,QAAQc,kBAAR,GAA6B,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,WAAvB,EAAoC;AAC/D;AACA;AACA,MAAItB,KAAKuB,0BAAL,CAAgC,EAACC,uBAAuB,IAAxB,EAAhC,CAAJ,EAAoE;AAClE;AACA;AACA,UAAM,IAAInB,QAAQC,0BAAZ,EAAN;AACD;;AAED,MAAI,CAAEN,KAAKyB,UAAL,EAAN,EAAyB;AACvB;AACAvB,YAAQW,KAAR,CACE,mDADF,EAEE,wBAFF,EAGE,+CAHF;AAIAb,SAAK0B,uBAAL,CAA6B,EAAEC,OAAO,IAAT,EAA7B;AACD;;AAED,MAAIC,OAAOvB,QAAQE,qBAAR,CAA8Ba,GAA9B,CAAX;AACA,MAAIS,wBAAwB7B,KAAK8B,wBAAL,CAA8BF,IAA9B,CAA5B;AACA,MAAI;AACF5B,SAAK+B,qBAAL,CACEH,IADF,EAEEC,qBAFF,EAGET,GAHF,EAIEC,MAJF,EAKEC,WALF;AAOD,GARD,CAQE,OAAOU,GAAP,EAAY;AACZ,QAAIA,IAAIf,OAAJ,KAAgB,eAApB,EAAqC;AACnC;AACA;AACAf,cAAQW,KAAR,CACE,yCADF,EAEE,qEAFF,EAGE,oDAHF;AAIAb,WAAK0B,uBAAL,CAA6B,EAAEC,OAAO,IAAT,EAA7B;AACA3B,WAAK+B,qBAAL,CACEH,IADF,EAEEC,qBAFF,EAGET,GAHF,EAIEC,MAJF,EAKEC,WALF;AAOD,KAfD,MAeO;AACL,YAAMU,GAAN;AACD;AACF;AACD,SAAOJ,IAAP;AACD,CAjDD","file":"tools/meteor-services/auth-client.js.map","sourcesContent":["var auth = require('./auth.js');\nvar Console = require('../console/console.js').Console;\nvar ServiceConnection = require('./service-connection.js');\nvar httpHelpers = require('../utils/http-helpers.js');\n\nexports.AlreadyPrintedMessageError = function () {};\n\n// Opens a DDP connection to a package server. Loads the packages needed for a\n// DDP connection, then calls DDP connect to the package server URL in config,\n// using a current user-agent header composed by http-helpers.js.\nexports.openServiceConnection = function (serverUrl) {\n  return new ServiceConnection(\n    serverUrl,\n    {headers: {\"User-Agent\": httpHelpers.getUserAgent()},\n     _dontPrintErrors: true});\n};\n\n\n// Handle an error thrown on attempting to connect. Print a message if it is a\n// known error type, else throw the error.\n//\n// err: error\n// label: name of the service that we are trying to use (ex: \"package server\")\nexports.handleConnectionError = function (error, label) {\n  if (error instanceof exports.AlreadyPrintedMessageError) {\n    // do nothing\n  } else if (error.errorType === 'Meteor.Error') {\n    var errorMsg = \"Error from \" + label;\n    if (error.message) {\n      errorMsg += \": \" + error.message;\n    }\n    Console.warn(errorMsg);\n  } else if (error.errorType === \"DDP.ConnectionError\") {\n    Console.warn(\"Error connecting to \" + label + \": \"\n                 + error.message);\n  } else {\n    throw error;\n  }\n};\n\n// Returns a logged-in DDP connection to the given URL, or null if\n// we cannot log in. If an error unrelated to login occurs\n// (e.g. connection to package server times out), then it will be\n// thrown.\n//\n//  url: the url of the connection (ex: config.getPackageServerUrl)\n//  domain: the domain (ex: packages.meteor.com)\n//  sessionType: the name of the connection (ex: \"package-server\")\n//\nexports.loggedInConnection = function (url, domain, sessionType) {\n  // Make sure that we are logged in with Meteor Accounts so that we can\n  // do an OAuth flow.\n  if (auth.maybePrintRegistrationLink({onlyAllowIfRegistered: true})) {\n    // Oops, we're logged in but with a deferred-registration account.\n    // Message has already been printed.\n    throw new exports.AlreadyPrintedMessageError;\n  }\n\n  if (! auth.isLoggedIn()) {\n    // XXX we should have a better account signup page.\n    Console.error(\n      \"Please log in with your Meteor developer account.\",\n      \"If you don't have one,\",\n      \"you can quickly create one at www.meteor.com.\");\n    auth.doUsernamePasswordLogin({ retry: true });\n  }\n\n  var conn = exports.openServiceConnection(url);\n  var accountsConfiguration = auth.getAccountsConfiguration(conn);\n  try {\n    auth.loginWithTokenOrOAuth(\n      conn,\n      accountsConfiguration,\n      url,\n      domain,\n      sessionType\n    );\n  } catch (err) {\n    if (err.message === \"access-denied\") {\n      // Maybe we thought we were logged in, but our token had been\n      // revoked.\n      Console.error(\n        \"It looks like you have been logged out!\",\n        \"Please log in with your Meteor developer account. If you don't have\",\n        \"one, you can quickly create one at www.meteor.com.\");\n      auth.doUsernamePasswordLogin({ retry: true });\n      auth.loginWithTokenOrOAuth(\n        conn,\n        accountsConfiguration,\n        url,\n        domain,\n        sessionType\n      );\n    } else {\n      throw err;\n    }\n  }\n  return conn;\n};\n"]}