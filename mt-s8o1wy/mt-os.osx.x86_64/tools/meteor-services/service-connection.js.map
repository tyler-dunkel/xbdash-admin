{"version":3,"sources":["/tools/meteor-services/service-connection.js"],"names":["_","require","isopackets","files","fiberHelpers","ServiceConnection","endpointUrl","options","self","Package","load","extend","connectTimeoutMs","heartbeatInterval","retry","onConnected","connected","currentPromise","Error","connectPromise","resolve","process","env","CAFILE","npmFayeOptions","ca","readFile","connection","DDP","connect","makeFulfillablePromise","_stream","on","error","errorType","promise","reject","ConnectionError","await","prototype","call","name","args","apply","push","err","result","subscribeAndWait","subPromise","onReady","onError","e","sub","subscribe","close","module","exports"],"mappings":"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","file":"tools/meteor-services/service-connection.js.map","sourcesContent":["var _ = require(\"underscore\");\nvar isopackets = require('../tool-env/isopackets.js');\nvar files = require('../fs/files.js');\nvar fiberHelpers = require(\"../utils/fiber-helpers.js\");\n\n// Wrapper to manage a connection to a DDP service. The main difference between\n// it and a raw DDP connection is that the constructor blocks until a successful\n// connection is made; you can't call methods or subscribe asynchronously (ie,\n// there's always a wait); and if the connection disconnects (with or without\n// error) while we're waiting on a method call or subscription, the\n// apply/subscribeAndWait call throws the given error. This functionality should\n// eventually end up in the DDP client in one form or another.\n//\n// ServiceConnections never reconnect once they have successfully negotiated the\n// DDP protocol: other than perhaps some initial attempts with the wrong\n// protocol selected, they use just one underlying TCP connection, and fail\n// fast.\n//\n// - endpointUrl: the url to connect to\n// - options:\n//   - headers: an object containing extra headers to use when opening the\n//              DDP connection\n//   - _dontPrintErrors: boolean\n//   ...and anything else you'd normally pass as options to DDP.connect\n//\nvar ServiceConnection = function (endpointUrl, options) {\n  var self = this;\n\n  var Package = isopackets.load('ddp');\n\n  // ServiceConnection never should retry connections: just one TCP connection\n  // is enough, and any errors on it should be detected promptly.\n  options = _.extend({}, options, {\n    // We found that this was likely to time out with the DDP default of 10s,\n    // especially if the CPU is churning on bundling (eg, for the stats\n    // connection which we start in parallel with bundling).\n    connectTimeoutMs: 30000,\n    // Disable client->server heartbeats for service connections.  Users with\n    // slow internet connections were seeing heartbeat timeouts because the\n    // heartbeats were buried behind large responses (eg\n    // https://github.com/meteor/meteor/issues/2777).\n    heartbeatInterval: 0,\n    retry: false,\n    onConnected: function () {\n      self.connected = true;\n      if (! self.currentPromise) {\n        throw Error(\"nobody waiting for connection?\");\n      }\n      if (self.currentPromise !== connectPromise) {\n        throw Error(\"waiting for something that isn't connection?\");\n      }\n      self.currentPromise = null;\n      connectPromise.resolve();\n      connectPromise.resolve = null;\n    }\n  });\n  if (process.env.CAFILE) {\n    options.npmFayeOptions = {\n      ca: files.readFile(process.env.CAFILE)\n    }\n  }\n\n  self.connection = Package['ddp-client'].DDP.connect(endpointUrl, options);\n\n  // Wait until we have some sort of initial connection or error (including the\n  // 10-second timeout built into our DDP client).\n\n  var connectPromise = self.currentPromise =\n    fiberHelpers.makeFulfillablePromise();\n\n  self.connection._stream.on('disconnect', function (error) {\n    self.connected = false;\n    if (error && error.errorType === \"DDP.ForcedReconnectError\") {\n      // OK, we requested this, probably due to version negotation failure.\n      //\n      // This ought to have happened before we successfully connect, unless\n      // somebody adds other calls to forced reconnect to Meteor...\n      if (! connectPromise.resolve) {\n        throw Error(\"disconnect before connect?\");\n      }\n      // Otherwise, ignore this error. We're going to reconnect!\n      return;\n    }\n    // Are we waiting to connect or for the result of a method apply or a\n    // subscribeAndWait? If so, disconnecting is a problem.\n    if (self.currentPromise) {\n      var promise = self.currentPromise;\n      self.currentPromise = null;\n      promise.reject(\n        error || new Package['ddp-client'].DDP.ConnectionError(\n          \"DDP disconnected while connection in progress\")\n      );\n    } else if (error) {\n      // We got some sort of error with nobody listening for it; handle it.\n      // XXX probably have a better way to handle it than this\n      throw error;\n    }\n  });\n\n  connectPromise.await();\n};\n\n_.extend(ServiceConnection.prototype, {\n  call: function (name, ...args) {\n    return this.apply(name, args);\n  },\n\n  apply: function (...args) {\n    var self = this;\n\n    if (self.currentPromise) {\n      throw Error(\"Can't wait on two things at once!\");\n    }\n    self.currentPromise = fiberHelpers.makeFulfillablePromise();\n\n    args.push(function (err, result) {\n      if (!self.currentPromise) {\n        // We're not still waiting? That means we had a disconnect event. But\n        // then how did we actually get this result?\n        throw Error(\"nobody listening for result?\");\n      }\n      var promise = self.currentPromise;\n      self.currentPromise = null;\n      if (err) {\n        promise.reject(err);\n      } else {\n        promise.resolve(result);\n      }\n    });\n\n    self.connection.apply(...args);\n\n    return self.currentPromise.await();\n  },\n\n  // XXX derived from _subscribeAndWait in ddp_connection.js\n  // -- but with a different signature..\n  subscribeAndWait: function (...args) {\n    var self = this;\n\n    if (self.currentPromise) {\n      throw Error(\"Can't wait on two things at once!\");\n    }\n    var subPromise = self.currentPromise = fiberHelpers.makeFulfillablePromise();\n\n    args.push({\n      onReady: function () {\n        if (!self.currentPromise) {\n          // We're not still waiting? That means we had a disconnect event. But\n          // then how did we actually get this result?\n          throw Error(\"nobody listening for subscribe result?\");\n        }\n        var promise = self.currentPromise;\n        self.currentPromise = null;\n        promise.resolve();\n      },\n      onError: function (e) {\n        if (self.currentPromise === subPromise) {\n          // Error while waiting for this sub to become ready? Throw it.\n          self.currentPromise = null;\n          subPromise.reject(e);\n        }\n        // ... ok, this is a late error on the sub.\n        // XXX handle it somehow better\n        throw e;\n      }\n    });\n\n    var sub = self.connection.subscribe(...args);\n    subPromise.await();\n    return sub;\n  },\n\n  close: function () {\n    var self = this;\n    if (self.connection) {\n      self.connection.close();\n      self.connection = null;\n    }\n  }\n});\n\nmodule.exports = ServiceConnection;\n"]}