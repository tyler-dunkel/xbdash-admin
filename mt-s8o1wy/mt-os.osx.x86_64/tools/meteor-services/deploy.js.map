{"version":3,"sources":["/tools/meteor-services/deploy.js"],"names":["files","require","httpHelpers","buildmessage","config","auth","_","stats","Console","CAPABILITIES","deployRpc","options","genericError","clone","headers","cookie","Error","qs","extend","capabilities","deployURLBase","getDeployURL","site","await","printDeployURL","info","result","request","url","operation","method","bodyStream","useAuthHeader","encoding","e","statusCode","errorMessage","message","response","body","ret","length","contentType","payload","JSON","parse","hasAllExpectedKeys","all","map","expectPayload","key","has","expectMessage","authedRpc","rpcOptions","preflight","infoResult","promptIfAuthFails","username","readLine","prompt","stream","process","stderr","loginOptions","suppressErrorMessage","doInteractivePasswordLogin","protection","password","echo","crypto","hash","createHash","update","digest","isLoggedIn","authorized","printLegacyPasswordMessage","error","command","indent","printUnauthorizedMessage","loggedInUsername","canonicalizeSite","match","parsed","hostname","pathname","query","bundleAndDeploy","recordPackageUsage","undefined","pollForRegistrationCompletion","noLogout","rawOptions","buildDir","mkdtemp","bundlePath","pathJoin","settings","messages","capture","title","rootPath","cwd","settingsFile","getSettings","hasMessages","bundler","bundleResult","bundle","projectContext","outputPath","buildOptions","errors","formatMessages","recordPackages","what","enterJob","createTarGzStream","preflightPassword","timeout","deployedAt","dns","resolve","err","cnames","addresses","deleteApp","checkAuthThenSendRpc","loginResult","doUsernamePasswordLogin","retry","temporaryMongoUrl","logs","maybePrintRegistrationLink","leadingNewline","listAuthorized","each","rawInfo","changeAuthorized","action","verbs","add","remove","transfer","claim","registrationUrl","listSites","sites","sort","addScheme","hostOrURL","galaxyDiscoveryCache","Map","env","DEPLOY_HOSTNAME","Promise","defaultURL","get","p","discoverGalaxy","set","scheme","discoveryURL","json","strictSSL","followRedirect","galaxyDiscoveryVersion","deployURL","exports"],"mappings":"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","file":"tools/meteor-services/deploy.js.map","sourcesContent":["// URL parsing and validation\n// RPC to server (endpoint, arguments)\n// see if RPC requires password\n// prompt for password\n// send RPC with or without password as required\n\nvar files = require('../fs/files.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar config = require('./config.js');\nvar auth = require('./auth.js');\nvar _ = require('underscore');\nvar stats = require('./stats.js');\nvar Console = require('../console/console.js').Console;\n\nconst CAPABILITIES = ['showDeployMessages', 'canTransferAuthorization'];\n\n// Make a synchronous RPC to the \"classic\" MDG deploy API. The deploy\n// API has the following contract:\n//\n// - Parameters are always sent in the query string.\n// - A tarball can be sent in the body (when deploying an app).\n// - On success, all calls return HTTP 200. Those that return a value\n//   either return a JSON payload or a plaintext payload and the\n//   Content-Type header is set appropriately.\n// - On failure, calls return some non-200 HTTP status code and\n//   provide a human-readable error message in the body.\n// - URLs are of the form \"/[operation]/[site]\".\n// - Body encodings are always utf8.\n// - Meteor Accounts auth is possible using first-party MDG cookies\n//   (rather than OAuth).\n//\n// Options include:\n// - method: GET, POST, or DELETE. default GET\n// - operation: \"info\", \"logs\", \"mongo\", \"deploy\", \"authorized-apps\"\n// - site: site name\n// - expectPayload: an array of key names. if present, then we expect\n//   the server to return JSON content on success and to return an\n//   object with all of these key names.\n// - expectMessage: if true, then we expect the server to return text\n//   content on success.\n// - bodyStream: if provided, a stream to use as the request body\n// - any other parameters accepted by the node 'request' module, for example\n//   'qs' to set query string parameters\n// - printDeployURL: provided if we should show the deploy URL; set this\n//   for the first RPC of any user command\n//\n// Waits until server responds, then returns an object with the\n// following keys:\n//\n// - statusCode: HTTP status code, or null if the server couldn't be\n//   contacted\n// - payload: if successful, and the server returned a JSON body, the\n//   parsed JSON body\n// - message: if successful, and the server returned a text body, the\n//   body as a string\n// - errorMessage: if unsuccessful, a human-readable error message,\n//   derived from either a transport-level exception, the response\n//   body, or a generic 'try again later' message, as appropriate\n\nvar deployRpc = function (options) {\n  var genericError = \"Server error (please try again later)\";\n\n  options = _.clone(options);\n  options.headers = _.clone(options.headers || {});\n  if (options.headers.cookie) {\n    throw new Error(\"sorry, can't combine cookie headers yet\");\n  }\n  options.qs = _.extend({}, options.qs, {capabilities: CAPABILITIES});\n\n  const deployURLBase = getDeployURL(options.site).await();\n\n  if (options.printDeployURL) {\n    Console.info(\"Talking to Galaxy servers at \" + deployURLBase);\n  }\n\n  // XXX: Reintroduce progress for upload\n  try {\n    var result = httpHelpers.request(_.extend(options, {\n      url: deployURLBase + '/' + options.operation +\n        (options.site ? ('/' + options.site) : ''),\n      method: options.method || 'GET',\n      bodyStream: options.bodyStream,\n      useAuthHeader: true,\n      encoding: 'utf8' // Hack, but good enough for the deploy server..\n    }));\n  } catch (e) {\n    return {\n      statusCode: null,\n      errorMessage: \"Connection error (\" + e.message + \")\"\n    };\n  }\n\n  var response = result.response;\n  var body = result.body;\n  var ret = { statusCode: response.statusCode };\n\n  if (response.statusCode !== 200) {\n    ret.errorMessage = body.length > 0 ? body : genericError;\n    return ret;\n  }\n\n  var contentType = response.headers[\"content-type\"] || '';\n  if (contentType === \"application/json; charset=utf-8\") {\n    try {\n      ret.payload = JSON.parse(body);\n    } catch (e) {\n      ret.errorMessage = genericError;\n      return ret;\n    }\n  } else if (contentType === \"text/plain; charset=utf-8\") {\n    ret.message = body;\n  }\n\n  var hasAllExpectedKeys = _.all(_.map(\n    options.expectPayload || [], function (key) {\n      return ret.payload && _.has(ret.payload, key);\n    }));\n\n  if ((options.expectPayload && ! _.has(ret, 'payload')) ||\n      (options.expectMessage && ! _.has(ret, 'message')) ||\n      ! hasAllExpectedKeys) {\n    delete ret.payload;\n    delete ret.message;\n\n    ret.errorMessage = genericError;\n  }\n\n  return ret;\n};\n\n// Just like deployRpc, but also presents authentication. It will\n// prompt the user for a password, or use a Meteor Accounts\n// credential, as necessary.\n//\n// Additional options (beyond deployRpc):\n//\n// - preflight: if true, do everything but the actual RPC. The only\n//   other necessary option is 'site'. On failure, returns an object\n//   with errorMessage (just like deployRpc). On success, returns an\n//   object without an errorMessage key and with possible keys\n//   'protection' (value either 'password' or 'account') and\n//   'authorized' (true if the current user is an authorized user on\n//   this app).\n// - promptIfAuthFails: if true, then we think we are logged in with the\n//   accounts server but our authentication actually fails, then prompt\n//   the user to log in with a username and password and then resend the\n//   RPC.\nvar authedRpc = function (options) {\n  var rpcOptions = _.clone(options);\n  var preflight = rpcOptions.preflight;\n  delete rpcOptions.preflight;\n\n  // Fetch auth info\n  var infoResult = deployRpc({\n    operation: 'info',\n    site: rpcOptions.site,\n    expectPayload: [],\n    qs: options.qs,\n    printDeployURL: options.printDeployURL\n  });\n  delete rpcOptions.printDeployURL;\n\n  if (infoResult.statusCode === 401 && rpcOptions.promptIfAuthFails) {\n    // Our authentication didn't validate, so prompt the user to log in\n    // again, and resend the RPC if the login succeeds.\n    var username = Console.readLine({\n      prompt: \"Username: \",\n      stream: process.stderr\n    });\n    var loginOptions = {\n      username: username,\n      suppressErrorMessage: true\n    };\n    if (auth.doInteractivePasswordLogin(loginOptions)) {\n      return authedRpc(options);\n    } else {\n      return {\n        statusCode: 403,\n        errorMessage: \"login failed.\"\n      };\n    }\n  }\n\n  if (infoResult.statusCode === 404) {\n    // Doesn't exist, therefore not protected.\n    return preflight ? { } : deployRpc(rpcOptions);\n  }\n\n  if (infoResult.errorMessage) {\n    return infoResult;\n  }\n  var info = infoResult.payload;\n\n  if (! _.has(info, 'protection')) {\n    // Not protected.\n    //\n    // XXX should prompt the user to claim the app (only if deploying?)\n    return preflight ? { } : deployRpc(rpcOptions);\n  }\n\n  if (info.protection === \"password\") {\n    if (preflight) {\n      return { protection: info.protection };\n    }\n    // Password protected. Read a password, hash it, and include the\n    // hashed password as a query parameter when doing the RPC.\n    var password;\n    password = Console.readLine({\n      echo: false,\n      prompt: \"Password: \",\n      stream: process.stderr\n    });\n\n    // Hash the password so we never send plaintext over the\n    // wire. Doesn't actually make us more secure, but it means we\n    // won't leak a user's password, which they might use on other\n    // sites too.\n    var crypto = require('crypto');\n    var hash = crypto.createHash('sha1');\n    hash.update('S3krit Salt!');\n    hash.update(password);\n    password = hash.digest('hex');\n\n    rpcOptions = _.clone(rpcOptions);\n    rpcOptions.qs = _.clone(rpcOptions.qs || {});\n    rpcOptions.qs.password = password;\n\n    return deployRpc(rpcOptions);\n  }\n\n  if (info.protection === \"account\") {\n    if (! _.has(info, 'authorized')) {\n      // Absence of this implies that we are not an authorized user on\n      // this app\n      if (preflight) {\n        return { protection: info.protection };\n      } else {\n        return {\n          statusCode: null,\n          errorMessage: auth.isLoggedIn() ?\n            // XXX better error message (probably need to break out of\n            // the 'errorMessage printed with brief prefix' pattern)\n            \"Not an authorized user on this site\" :\n            \"Not logged in\"\n        };\n      }\n    }\n\n    // Sweet, we're an authorized user.\n    if (preflight) {\n      return {\n        protection: info.protection,\n        authorized: info.authorized\n      };\n    } else {\n      return deployRpc(rpcOptions);\n    }\n  }\n\n  return {\n    statusCode: null,\n    errorMessage: \"You need a newer version of Meteor to work with this site\"\n  };\n};\n\n// When the user is trying to do something with a legacy\n// password-protected app, instruct them to claim it with 'meteor\n// claim'.\nvar printLegacyPasswordMessage = function (site) {\n  Console.error(\n    \"\\nThis site was deployed with an old version of Meteor that used \" +\n    \"site passwords instead of user accounts. Now we have a much better \" +\n    \"system, Meteor developer accounts.\");\n  Console.error();\n  Console.error(\"If this is your site, please claim it into your account with\");\n  Console.error(\n    Console.command(\"meteor claim \" + site),\n    Console.options({ indent: 2 }));\n};\n\n// When the user is trying to do something with an app that they are not\n// authorized for, instruct them to get added via 'meteor authorized\n// --add' or switch accounts.\nvar printUnauthorizedMessage = function () {\n  var username = auth.loggedInUsername();\n  Console.error(\"Sorry, that site belongs to a different user.\");\n  if (username) {\n    Console.error(\"You are currently logged in as \" + username + \".\");\n  }\n  Console.error();\n  Console.error(\n    \"Either have the site owner use \" +\n    Console.command(\"'meteor authorized --add'\") + \" to add you as an \" +\n    \"authorized developer for the site, or switch to an authorized account \" +\n    \"with \" + Console.command(\"'meteor login'\") + \".\");\n};\n\n// Take a proposed sitename for deploying to. If it looks\n// syntactically good, canonicalize it (this essentially means\n// stripping 'http://' or a trailing '/' if present) and return it. If\n// not, print an error message to stderr and return null.\nvar canonicalizeSite = function (site) {\n  // There are actually two different bugs here. One is that the meteor deploy\n  // server does not support apps whose total site length is greater than 63\n  // (because of how it generates Mongo database names); that can be fixed on\n  // the server. After that, this check will be too strong, but we still will\n  // want to check that each *component* of the hostname is at most 63\n  // characters (url.parse will do something very strange if a component is\n  // larger than 63, which is the maximum legal length).\n  if (site.length > 63) {\n    Console.error(\n      \"The maximum hostname length currently supported is 63 characters: \" +\n      site + \" is too long. \" +\n      \"Please try again with a shorter URL for your site.\");\n    return false;\n  }\n\n  var url = site;\n  if (!url.match(':\\/\\/')) {\n    url = 'http://' + url;\n  }\n\n  var parsed = require('url').parse(url);\n\n  if (! parsed.hostname) {\n    Console.info(\n      \"Please specify a domain to connect to, such as www.example.com or \" +\n      \"http://www.example.com/\");\n    return false;\n  }\n\n  if (parsed.pathname != '/' || parsed.hash || parsed.query) {\n    Console.info(\n      \"Sorry, Meteor does not yet support specific path URLs, such as \" +\n      Console.url(\"http://www.example.com/blog\") + \" .  Please specify the root of a domain.\");\n    return false;\n  }\n\n  return parsed.hostname;\n};\n\n// Run the bundler and deploy the result. Print progress\n// messages. Return a command exit code.\n//\n// Options:\n// - projectContext: the ProjectContext for the app\n// - site: site to deploy as\n// - settingsFile: file from which to read deploy settings (undefined\n//   to leave unchanged from previous deploy of the app, if any)\n// - recordPackageUsage: (defaults to true) if set to false, don't\n//   send information about packages used by this app to the package\n//   stats server.\n// - buildOptions: the 'buildOptions' argument to the bundler\n// - rawOptions: any unknown options that were passed to the command line tool\nvar bundleAndDeploy = function (options) {\n  if (options.recordPackageUsage === undefined) {\n    options.recordPackageUsage = true;\n  }\n\n  var site = canonicalizeSite(options.site);\n  if (! site) {\n    return 1;\n  }\n\n  // We should give a username/password prompt if the user was logged in\n  // but the credentials are expired, unless the user is logged in but\n  // doesn't have a username (in which case they should hit the email\n  // prompt -- a user without a username shouldn't be given a username\n  // prompt). There's an edge case where things happen in the following\n  // order: user creates account, user sets username, credential expires\n  // or is revoked, user comes back to deploy again. In that case,\n  // they'll get an email prompt instead of a username prompt because\n  // the command-line tool didn't have time to learn about their\n  // username before the credential was expired.\n  auth.pollForRegistrationCompletion({\n    noLogout: true\n  });\n  var promptIfAuthFails = (auth.loggedInUsername() !== null);\n\n  // Check auth up front, rather than after the (potentially lengthy)\n  // bundling process.\n  var preflight = authedRpc({\n    site: site,\n    preflight: true,\n    promptIfAuthFails: promptIfAuthFails,\n    qs: options.rawOptions,\n    printDeployURL: true\n  });\n\n  if (preflight.errorMessage) {\n    Console.error(\"Error deploying application: \" + preflight.errorMessage);\n    return 1;\n  }\n\n  if (preflight.protection === \"password\") {\n    printLegacyPasswordMessage(site);\n    Console.error(\"If it's not your site, please try a different name!\");\n    return 1;\n\n  } else if (preflight.protection === \"account\" &&\n             ! preflight.authorized) {\n    printUnauthorizedMessage();\n    return 1;\n  }\n\n  var buildDir = files.mkdtemp('build_tar');\n  var bundlePath = files.pathJoin(buildDir, 'bundle');\n\n  Console.info('Deploying your app...');\n\n  var settings = null;\n  var messages = buildmessage.capture({\n    title: \"preparing to deploy\",\n    rootPath: process.cwd()\n  }, function () {\n    if (options.settingsFile) {\n      settings = files.getSettings(options.settingsFile);\n    }\n  });\n\n  if (! messages.hasMessages()) {\n    var bundler = require('../isobuild/bundler.js');\n\n    var bundleResult = bundler.bundle({\n      projectContext: options.projectContext,\n      outputPath: bundlePath,\n      buildOptions: options.buildOptions,\n    });\n\n    if (bundleResult.errors) {\n      messages = bundleResult.errors;\n    }\n  }\n\n  if (messages.hasMessages()) {\n    Console.info(\"\\nErrors prevented deploying:\");\n    Console.info(messages.formatMessages());\n    return 1;\n  }\n\n  if (options.recordPackageUsage) {\n    stats.recordPackages({\n      what: \"sdk.deploy\",\n      projectContext: options.projectContext,\n      site: site\n    });\n  }\n\n  var result = buildmessage.enterJob({ title: \"uploading\" }, function () {\n    return authedRpc({\n      method: 'POST',\n      operation: 'deploy',\n      site: site,\n      qs: _.extend({}, options.rawOptions, settings !== null ? {settings: settings} : {}),\n      bodyStream: files.createTarGzStream(files.pathJoin(buildDir, 'bundle')),\n      expectPayload: ['url'],\n      preflightPassword: preflight.preflightPassword,\n      // Disable the HTTP timeout for this POST request.\n      timeout: null,\n    });\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"\\nError deploying application: \" + result.errorMessage);\n    return 1;\n  }\n\n  if (result.payload.message) {\n    Console.info(result.payload.message);\n  } else {\n    var deployedAt = require('url').parse(result.payload.url);\n    var hostname = deployedAt.hostname;\n\n    Console.info('Now serving at http://' + hostname);\n\n    if (! hostname.match(/meteor\\.com$/)) {\n      var dns = require('dns');\n      dns.resolve(hostname, 'CNAME', function (err, cnames) {\n        if (err || cnames[0] !== 'origin.meteor.com') {\n          dns.resolve(hostname, 'A', function (err, addresses) {\n            if (err || addresses[0] !== '107.22.210.133') {\n              Console.info('-------------');\n              Console.info(\n                \"You've deployed to a custom domain.\",\n                \"Please be sure to CNAME your hostname\",\n                \"to origin.meteor.com, or set an A record to 107.22.210.133.\");\n              Console.info('-------------');\n            }\n          });\n        }\n      });\n    }\n  }\n\n  return 0;\n};\n\nvar deleteApp = function (site) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    return 1;\n  }\n\n  var result = authedRpc({\n    method: 'DELETE',\n    operation: 'deploy',\n    site: site,\n    promptIfAuthFails: true,\n    printDeployURL: true\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"Couldn't delete application: \" + result.errorMessage);\n    return 1;\n  }\n\n  Console.info(\"Deleted.\");\n  return 0;\n};\n\n// Helper that does a preflight request to check auth, and prints the\n// appropriate error message if auth fails or if this is a legacy\n// password-protected app. If auth succeeds, then it runs the actual\n// RPC. 'site' and 'operation' are the site and operation for the\n// RPC. 'what' is a string describing the operation, for use in error\n// messages.  Returns the result of the RPC if successful, or null\n// otherwise (including if auth failed or if the user is not authorized\n// for this site).\nvar checkAuthThenSendRpc = function (site, operation, what) {\n  var preflight = authedRpc({\n    operation: operation,\n    site: site,\n    preflight: true,\n    promptIfAuthFails: true,\n    printDeployURL: true\n  });\n\n  if (preflight.errorMessage) {\n    Console.error(\"Couldn't \" + what + \": \" + preflight.errorMessage);\n    return null;\n  }\n\n  if (preflight.protection === \"password\") {\n    printLegacyPasswordMessage(site);\n    return null;\n  } else if (preflight.protection === \"account\" &&\n             ! preflight.authorized) {\n    if (! auth.isLoggedIn()) {\n      // Maybe the user is authorized for this app but not logged in\n      // yet, so give them a login prompt.\n      var loginResult = auth.doUsernamePasswordLogin({ retry: true });\n      if (loginResult) {\n        // Once we've logged in, retry the whole operation. We need to\n        // do the preflight request again instead of immediately moving\n        // on to the real RPC because we don't yet know if the newly\n        // logged-in user is authorized for this app, and if they\n        // aren't, then we want to print the nice unauthorized error\n        // message.\n        return checkAuthThenSendRpc(site, operation, what);\n      } else {\n        // Shouldn't ever get here because we set the retry flag on the\n        // login, but just in case.\n        Console.error(\n          \"\\nYou must be logged in to \" + what + \" for this app. Use \" +\n           Console.command(\"'meteor login'\") + \"to log in.\");\n        Console.error();\n        Console.error(\n          \"If you don't have a Meteor developer account yet, you can quickly \" +\n          \"create one at www.meteor.com.\");\n        return null;\n      }\n    } else { // User is logged in but not authorized for this app\n      Console.error();\n      printUnauthorizedMessage();\n      return null;\n    }\n  }\n\n  // User is authorized for the app; go ahead and do the actual RPC.\n\n  var result = authedRpc({\n    operation: operation,\n    site: site,\n    expectMessage: true,\n    promptIfAuthFails: true\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"Couldn't \" + what + \": \" + result.errorMessage);\n    return null;\n  }\n\n  return result;\n};\n\n// On failure, prints a message to stderr and returns null. Otherwise,\n// returns a temporary authenticated Mongo URL allowing access to this\n// site's database.\nvar temporaryMongoUrl = function (site) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    // canonicalizeSite printed an error\n    return null;\n  }\n\n  var result = checkAuthThenSendRpc(site, 'mongo', 'open a mongo connection');\n\n  if (result !== null) {\n    return result.message;\n  } else {\n    return null;\n  }\n};\n\nvar logs = function (site) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    return 1;\n  }\n\n  var result = checkAuthThenSendRpc(site, 'logs', 'view logs');\n\n  if (result === null) {\n    return 1;\n  } else {\n    Console.info(result.message);\n    auth.maybePrintRegistrationLink({ leadingNewline: true });\n    return 0;\n  }\n};\n\nvar listAuthorized = function (site) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    return 1;\n  }\n\n  var result = deployRpc({\n    operation: 'info',\n    site: site,\n    expectPayload: [],\n    printDeployURL: true\n  });\n  if (result.errorMessage) {\n    Console.error(\"Couldn't get authorized users list: \" + result.errorMessage);\n    return 1;\n  }\n  var info = result.payload;\n\n  if (! _.has(info, 'protection')) {\n    Console.info(\"<anyone>\");\n    return 0;\n  }\n\n  if (info.protection === \"password\") {\n    Console.info(\"<password>\");\n    return 0;\n  }\n\n  if (info.protection === \"account\") {\n    if (! _.has(info, 'authorized')) {\n      Console.error(\"Couldn't get authorized users list: \" +\n                    \"You are not authorized\");\n      return 1;\n    }\n\n    Console.info((auth.loggedInUsername() || \"<you>\"));\n    _.each(info.authorized, function (username) {\n      if (username) {\n        // Current username rules don't let you register anything that we might\n        // want to split over multiple lines (ex: containing a space), but we\n        // don't want confusion if we ever change some implementation detail.\n        Console.rawInfo(username + \"\\n\");\n      }\n    });\n    return 0;\n  }\n};\n\n// action is \"add\", \"transfer\" or \"remove\"\nvar changeAuthorized = function (site, action, username) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    // canonicalizeSite will have already printed an error\n    return 1;\n  }\n\n  var result = authedRpc({\n    method: 'POST',\n    operation: 'authorized',\n    site: site,\n    qs: {[action]: username},\n    promptIfAuthFails: true,\n    printDeployURL: true\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"Couldn't change authorized users: \" + result.errorMessage);\n    return 1;\n  }\n\n  const verbs = {\n    add: \"added\",\n    remove: \"removed\",\n    transfer: \"transferred\"\n  };\n  Console.info(`${site}: ${verbs[action]} ${username}`);\n  return 0;\n};\n\nvar claim = function (site) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    // canonicalizeSite will have already printed an error\n    return 1;\n  }\n\n  // Check to see if it's even a claimable site, so that we can print\n  // a more appropriate message than we'd get if we called authedRpc\n  // straight away (at a cost of an extra REST call)\n  var infoResult = deployRpc({\n    operation: 'info',\n    site: site,\n    printDeployURL: true\n  });\n  if (infoResult.statusCode === 404) {\n    Console.error(\n      \"There isn't a site deployed at that address. Use \" +\n      Console.command(\"'meteor deploy'\") + \" \" +\n      \"if you'd like to deploy your app here.\");\n    return 1;\n  }\n\n  if (infoResult.payload && infoResult.payload.protection === \"account\") {\n    if (infoResult.payload.authorized) {\n      Console.error(\"That site already belongs to you.\\n\");\n    } else {\n      Console.error(\"Sorry, that site belongs to someone else.\\n\");\n    }\n    return 1;\n  }\n\n  if (infoResult.payload &&\n      infoResult.payload.protection === \"password\") {\n    Console.info(\n      \"To claim this site and transfer it to your account, enter the\",\n      \"site password one last time.\");\n    Console.info();\n  }\n\n  var result = authedRpc({\n    method: 'POST',\n    operation: 'claim',\n    site: site,\n    promptIfAuthFails: true\n  });\n\n  if (result.errorMessage) {\n    auth.pollForRegistrationCompletion();\n    if (! auth.loggedInUsername() &&\n        auth.registrationUrl()) {\n      Console.error(\n        \"You need to set a password on your Meteor developer account before\",\n        \"you can claim sites. You can do that here in under a minute:\");\n      Console.error(Console.url(auth.registrationUrl()));\n      Console.error();\n    } else {\n      Console.error(\"Couldn't claim site: \" + result.errorMessage);\n    }\n    return 1;\n  }\n\n  Console.info(site + \": \" + \"successfully transferred to your account.\");\n  Console.info();\n  Console.info(\"Show authorized users with:\");\n  Console.info(\n    Console.command(\"meteor authorized \" + site),\n    Console.options({ indent: 2 }));\n  Console.info();\n  Console.info(\"Add authorized users with:\");\n  Console.info(\n    Console.command(\"meteor authorized \" + site + \" --add <username>\"),\n    Console.options({ indent: 2 }));\n  Console.info();\n  Console.info(\"Remove authorized users with:\");\n  Console.info(\n    Console.command(\"meteor authorized \" + site + \" --remove <username>\"),\n    Console.options({ indent: 2 }));\n  Console.info();\n  return 0;\n};\n\nvar listSites = function () {\n  var result = deployRpc({\n    method: \"GET\",\n    operation: \"authorized-apps\",\n    promptIfAuthFails: true,\n    expectPayload: [\"sites\"]\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"Couldn't list sites: \" + result.errorMessage);\n    return 1;\n  }\n\n  if (! result.payload ||\n      ! result.payload.sites ||\n      ! result.payload.sites.length) {\n    Console.info(\"You don't have any sites yet.\");\n  } else {\n    result.payload.sites.sort();\n    _.each(result.payload.sites, function (site) {\n      Console.info(site);\n    });\n  }\n  return 0;\n};\n\n// Given a hostname, add \"http://\" or \"https://\" as\n// appropriate. (localhost gets http; anything else is always https.)\nfunction addScheme(hostOrURL) {\n  if (hostOrURL.match(/^http/)) {\n    return hostOrURL;\n  } else if (hostOrURL.match(/^localhost(:\\d+)?$/)) {\n    return \"http://\" + hostOrURL;\n  } else {\n    return \"https://\" + hostOrURL;\n  }\n};\n\n// Maps from \"site\" to Promise<deploy URL>, so we don't have to re-ping on each\n// RPC (even if the calls to getDeployURL overlap).\nconst galaxyDiscoveryCache = new Map;\n\n// getDeployURL returns the a Promise for the base deploy URL for the given app.\n// \"app\" may be falsey for certain RPCs (eg meteor list-sites).\nfunction getDeployURL(site) {\n  // Always trust explicitly configuration via env.\n  if (process.env.DEPLOY_HOSTNAME) {\n    return Promise.resolve(addScheme(process.env.DEPLOY_HOSTNAME));\n  }\n\n  const defaultURL = \"https://us-east-1.galaxy-deploy.meteor.com\";\n\n  // No site? Just use the default.\n  if (!site) {\n    return Promise.resolve(defaultURL);\n  }\n\n  // If we have a site, we can try to do Galaxy discovery.\n\n  // Do we already have an answer?\n  if (galaxyDiscoveryCache.has(site)) {\n    return galaxyDiscoveryCache.get(site);\n  }\n\n  // Otherwise, try https first, then http, then just use the default.\n  const p = discoverGalaxy(site, \"https\")\n          .catch(() => discoverGalaxy(site, \"http\"))\n          .catch(() => defaultURL);\n  galaxyDiscoveryCache.set(site, p);\n  return p;\n}\n\n// discoverGalaxy returns the URL to use for Galaxy discovery, or an error if it\n// couldn't be fetched.\nasync function discoverGalaxy(site, scheme) {\n  const discoveryURL =\n          scheme + \"://\" + site + \"/.well-known/meteor/deploy-url\";\n  // If httpHelpers.request throws, the returned Promise will reject, which is\n  // fine.\n  const { response, body } = httpHelpers.request({\n    url: discoveryURL,\n    json: true,\n    strictSSL: true,\n    // We don't want to be confused by, eg, a non-Galaxy-hosted site which\n    // redirects to a Galaxy-hosted site.\n    followRedirect: false\n  });\n  if (response.statusCode !== 200) {\n    throw new Error(\"bad status code: \" + response.statusCode);\n  }\n  if (!body) {\n    throw new Error(\"response had no body\");\n  }\n  if (body.galaxyDiscoveryVersion !== \"galaxy-1\") {\n    throw new Error(\n      \"unexpected galaxyDiscoveryVersion: \" + body.galaxyDiscoveryVersion);\n  }\n  if (!_.has(body, \"deployURL\")) {\n    throw new Error(\"no deployURL\");\n  }\n  return body.deployURL;\n}\n\nexports.bundleAndDeploy = bundleAndDeploy;\nexports.deleteApp = deleteApp;\nexports.temporaryMongoUrl = temporaryMongoUrl;\nexports.logs = logs;\nexports.listAuthorized = listAuthorized;\nexports.changeAuthorized = changeAuthorized;\nexports.claim = claim;\nexports.listSites = listSites;\n"]}