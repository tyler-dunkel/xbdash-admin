{"version":3,"sources":["/tools/runners/run-updater.js"],"names":["_","require","Fiber","fiberHelpers","Console","Updater","self","timer","extend","prototype","start","Error","check","_check","setInterval","updater","tryToDownloadUpdate","showBanner","e","debug","stack","stop","clearInterval","exports"],"mappings":";AAAA,IAAIA,IAAIC,QAAQ,YAAR,CAAR;AACA,IAAIC,QAAQD,QAAQ,QAAR,CAAZ;AACA,IAAIE,eAAeF,QAAQ,2BAAR,CAAnB;AACA,IAAIG,UAAUH,QAAQ,uBAAR,EAAiCG,OAA/C;;AAEA,IAAIC,UAAU,SAAVA,OAAU,GAAY;AACxB,MAAIC,OAAO,IAAX;AACAA,OAAKC,KAAL,GAAa,IAAb;AACD,CAHD;;AAKA;AACA;AACA;AACAP,EAAEQ,MAAF,CAASH,QAAQI,SAAjB,EAA4B;AAC1BC,SAAO,iBAAY;AACjB,QAAIJ,OAAO,IAAX;;AAEA,QAAIA,KAAKC,KAAT,EAAgB;AACd,YAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED;AACA;AACA,aAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AACEN,mBAAKO,MAAL;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIAP,SAAKC,KAAL,GAAaO,YAAYF,KAAZ,EAAmB,IAAI,EAAJ,GAAS,EAAT,GAAc,IAAjC,CAAb;;AAEA;AACA;AACAA;AACD,GAnByB;;AAqB1BC,UAAQ,kBAAY;AAClB,QAAIP,OAAO,IAAX;AACA,QAAIS,UAAUd,QAAQ,yBAAR,CAAd;AACA,QAAI;AACFc,cAAQC,mBAAR,CAA4B,EAACC,YAAY,IAAb,EAA5B;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACA;AACAd,cAAQe,KAAR,CAAc,uBAAd;AACAf,cAAQe,KAAR,CAAcD,EAAEE,KAAhB;AACA;AACD;AACF,GAjCyB;;AAmC1B;AACA;AACAC,QAAM,gBAAY;AAChB,QAAIf,OAAO,IAAX;;AAEA,QAAIA,KAAKC,KAAT,EAAgB;AACd;AACD;AACDe,kBAAchB,KAAKC,KAAnB;AACAD,SAAKC,KAAL,GAAa,IAAb;AACD;AA7CyB,CAA5B;;AAiDAgB,QAAQlB,OAAR,GAAkBA,OAAlB","file":"tools/runners/run-updater.js.map","sourcesContent":["var _ = require('underscore');\nvar Fiber = require('fibers');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\nvar Console = require('../console/console.js').Console;\n\nvar Updater = function () {\n  var self = this;\n  self.timer = null;\n};\n\n// XXX make it take a runLog?\n// XXX need to deal with updater writing messages (bypassing old\n// stdout interception.. maybe it should be global after all..)\n_.extend(Updater.prototype, {\n  start: function () {\n    var self = this;\n\n    if (self.timer) {\n      throw new Error(\"already running?\");\n    }\n\n    // Check every 3 hours. (Should not share buildmessage state with\n    // the main fiber.)\n    async function check() {\n      self._check();\n    }\n\n    self.timer = setInterval(check, 3 * 60 * 60 * 1000);\n\n    // Also start a check now, but don't block on it. (This should\n    // not share buildmessage state with the main fiber.)\n    check();\n  },\n\n  _check: function () {\n    var self = this;\n    var updater = require('../packaging/updater.js');\n    try {\n      updater.tryToDownloadUpdate({showBanner: true});\n    } catch (e) {\n      // oh well, this was the background. Only show errors if we are in debug\n      // mode.\n      Console.debug(\"Error inside updater.\");\n      Console.debug(e.stack);\n      return;\n    }\n  },\n\n  // Returns immediately. However if an update check is currently\n  // running it will complete in the background. Idempotent.\n  stop: function () {\n    var self = this;\n\n    if (self.timer) {\n      return;\n    }\n    clearInterval(self.timer);\n    self.timer = null;\n  }\n});\n\n\nexports.Updater = Updater;\n"]}