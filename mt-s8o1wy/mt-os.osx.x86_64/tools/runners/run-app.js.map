{"version":3,"sources":["/tools/runners/run-app.js"],"names":["_","require","Fiber","fiberHelpers","files","watch","bundler","buildmessage","runLog","stats","Console","catalog","Profile","release","cordova","CordovaBuilder","closeAllWatchers","bashParse","s","search","Error","without","split","getNodeOptionsFromEnvironment","process","env","NODE_OPTIONS","AppProcess","options","self","projectContext","bundlePath","port","listenHost","rootUrl","mongoUrl","oplogUrl","mobileServerUrl","onExit","onListen","nodeOptions","nodePath","debugPort","settings","testMetadata","proc","madeExitCallback","ipcPipe","extend","prototype","start","_spawn","realEachline","eachline","stream","encoding","callback","stdout","line","match","logAppOutput","stderr","indexOf","enableProgressDisplay","on","code","signal","_maybeCallOnExit","err","_refreshing","log","message","arrow","stdin","stop","pid","removeAllListeners","kill","_computeEnvironment","PORT","ROOT_URL","MONGO_URL","MOBILE_DDP_URL","MOBILE_ROOT_URL","MONGO_OPLOG_URL","METEOR_SETTINGS","TEST_METADATA","JSON","stringify","BIND_IP","APP_ID","appIdentifier","HTTP_FORWARDED_COUNT","parseInt","shellDir","getMeteorShellDirectory","mkdir_p","METEOR_SHELL_DIR","convertToOSPath","METEOR_PARENT_PID","METEOR_BAD_PARENT_PID_FOR_TEST","METEOR_PRINT_ON_LISTEN","path","NODE_PATH","join","delimiter","execPath","entryPoint","pathJoin","opts","clone","attach","push","suggestedDebugBrkPort","child_process","ioOptions","child","spawn","stdio","AppRunner","buildOptions","cordovaRunner","settingsFile","proxy","watchForChanges","undefined","onRunEnd","noRestartBanner","recordPackageUsage","omitPackageMapDeltaDisplayOnFirstRun","fiber","startPromise","runPromise","exitPromise","watchPromise","_promiseResolvers","_beforeStartPromise","builders","_makePromise","_fiber","run","await","name","Promise","resolve","_resolvePromise","value","_cleanUpPromises","each","outcome","makeBeforeStartPromise","_runOnce","firstRun","clearLog","setMode","getProjectLocalDirectory","cachedServerWatchSet","bundleApp","triedToRefreshRecently","reset","softRefreshIsopacks","preservePackageMap","messages","capture","readProjectMetadata","hasMessages","runResult","errors","watchSet","getProjectAndLocalPackagesWatchSet","wrongRelease","usingRightReleaseForApp","displayReleaseNeeded","releaseFile","displayReleaseName","prepareProjectForBuild","packageMapDelta","displayOnConsole","recordPackages","what","bundleResult","bundle","outputPath","includeNodeModules","hasCachedBundle","previousBuilders","serverWatchSet","combinedWatchSetForBundleResult","br","merge","clientWatchSet","bundleResultOrRunResult","settingsWatchSet","WatchSet","settingsMessages","title","rootPath","cwd","getSettings","canRefreshClient","packageMap","getInfo","pluginVersions","pluginVersionsFromStarManifest","starManifest","started","prepareProject","printWarningsIfNeeded","havePlatformsChangedSinceLastRun","havePluginsChangedSinceLastRun","beforeRun","appProcess","map","stopped","maybePrintLintWarnings","lintAppAndLocalPackages","warnings","formattedMessages","formatMessages","startRunTargets","serverWatcher","clientWatcher","Watcher","onChange","setupClientWatcher","isUpToDate","ret","logClientRestart","oldPromise","send","refresh","logTemporary","crashCount","crashTimer","resetCrashCount","setTimeout","logRestart","clearTimeout","wantExit","watcher","exports"],"mappings":"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","file":"tools/runners/run-app.js.map","sourcesContent":["var _ = require('underscore');\nvar Fiber = require('fibers');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\nvar files = require('../fs/files.js');\nvar watch = require('../fs/watch.js');\nvar bundler = require('../isobuild/bundler.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar runLog = require('./run-log.js');\nvar stats = require('../meteor-services/stats.js');\nvar Console = require('../console/console.js').Console;\nvar catalog = require('../packaging/catalog/catalog.js');\nvar Profile = require('../tool-env/profile.js').Profile;\nvar release = require('../packaging/release.js');\nimport * as cordova from '../cordova';\nimport { CordovaBuilder } from '../cordova/builder.js';\nimport { closeAllWatchers } from \"../fs/safe-watcher.js\";\n\n// Parse out s as if it were a bash command line.\nvar bashParse = function (s) {\n  if (s.search(\"\\\"\") !== -1 || s.search(\"'\") !== -1) {\n    throw new Error(\"Meteor cannot currently handle quoted NODE_OPTIONS\");\n  }\n  return _.without(s.split(/\\s+/), '');\n};\n\nvar getNodeOptionsFromEnvironment = function () {\n  return bashParse(process.env.NODE_OPTIONS || \"\");\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// AppProcess\n///////////////////////////////////////////////////////////////////////////////\n\n// Given a bundle, run a program in the bundle. Report when it dies.\n//\n// Call start() to start the process. You will then eventually receive\n// a call to onExit(code, signal): code is the numeric exit code of a\n// normal exit, signal is the string signal name if killed, and if\n// both are undefined it means something went wrong in invoking the\n// program and it was logged.\n//\n// If the app successfully starts up, you will also receive onListen()\n// once the app says it's ready to receive connections.\n//\n// Call stop() at any time after start() returns to terminate the\n// process if it is running. You will get an onExit callback if this\n// resulted in the process dying. stop() is idempotent.\n//\n// Required options: bundlePath, port, rootUrl, mongoUrl, oplogUrl\n// Optional options: onExit, onListen, nodeOptions, settings\n\nvar AppProcess = function (options) {\n  var self = this;\n\n  self.projectContext = options.projectContext;\n  self.bundlePath = options.bundlePath;\n  self.port = options.port;\n  self.listenHost = options.listenHost;\n  self.rootUrl = options.rootUrl;\n  self.mongoUrl = options.mongoUrl;\n  self.oplogUrl = options.oplogUrl;\n  self.mobileServerUrl = options.mobileServerUrl;\n\n  self.onExit = options.onExit;\n  self.onListen = options.onListen;\n  self.nodeOptions = options.nodeOptions || [];\n  self.nodePath = options.nodePath || [];\n  self.debugPort = options.debugPort;\n  self.settings = options.settings;\n  self.testMetadata = options.testMetadata;\n\n  self.proc = null;\n  self.madeExitCallback = false;\n  self.ipcPipe = options.ipcPipe;\n};\n\n_.extend(AppProcess.prototype, {\n  // Call to start the process.\n  start: function () {\n    var self = this;\n\n    if (self.proc) {\n      throw new Error(\"already started?\");\n    }\n\n    // Start the app!\n    self.proc = self._spawn();\n\n    // Send stdout and stderr to the runLog\n    var realEachline = require('eachline');\n    function eachline(stream, encoding, callback) {\n      realEachline(stream, encoding, (...args) => void(callback(...args)));\n    }\n\n    eachline(self.proc.stdout, 'utf8', async function (line) {\n      if (line.match(/^LISTENING\\s*$/)) {\n        // This is the child process telling us that it's ready to receive\n        // connections.  (It does this because we told it to with\n        // $METEOR_PRINT_ON_LISTEN.)\n        self.onListen && self.onListen();\n\n      } else {\n        runLog.logAppOutput(line);\n      }\n    });\n\n    eachline(self.proc.stderr, 'utf8', async function (line) {\n      if (self.debugPort &&\n          line.indexOf(\"debugger listening on port \") >= 0) {\n        Console.enableProgressDisplay(false);\n        return;\n      }\n\n      runLog.logAppOutput(line, true);\n    });\n\n    // Watch for exit and for stdio to be fully closed (so that we don't miss\n    // log lines).\n    self.proc.on('close', async function (code, signal) {\n      self._maybeCallOnExit(code, signal);\n    });\n\n    self.proc.on('error', async function (err) {\n      // if the error is the result of .send command over ipc pipe, ignore it\n      if (self._refreshing) {\n        return;\n      }\n\n      runLog.log(\"Couldn't spawn process: \" + err.message,  { arrow: true });\n\n      // node docs say that it might make both an 'error' and a\n      // 'close' callback, so we use a guard to make sure we only call\n      // onExit once.\n      self._maybeCallOnExit();\n    });\n\n    // This happens sometimes when we write a keepalive after the app\n    // is dead. If we don't register a handler, we get a top level\n    // exception and the whole app dies.\n    // http://stackoverflow.com/questions/2893458/uncatchable-errors-in-node-js\n    self.proc.stdin.on('error', function () {});\n  },\n\n  _maybeCallOnExit: function (code, signal) {\n    var self = this;\n    if (self.madeExitCallback) {\n      return;\n    }\n    self.madeExitCallback = true;\n    self.onExit && self.onExit(code, signal);\n  },\n\n  // Idempotent. Once stop() returns it is guaranteed that you will\n  // receive no more callbacks from this AppProcess.\n  stop: function () {\n    var self = this;\n\n    if (self.proc && self.proc.pid) {\n      self.proc.removeAllListeners('close');\n      self.proc.removeAllListeners('error');\n      self.proc.kill();\n    }\n    self.proc = null;\n\n    self.onListen = null;\n    self.onExit = null;\n  },\n\n  _computeEnvironment: function () {\n    var self = this;\n    var env = _.extend({}, process.env);\n\n    env.PORT = self.port;\n    env.ROOT_URL = self.rootUrl;\n    env.MONGO_URL = self.mongoUrl;\n    if (self.mobileServerUrl) {\n      env.MOBILE_DDP_URL = self.mobileServerUrl;\n      env.MOBILE_ROOT_URL = self.mobileServerUrl;\n    }\n\n    if (self.oplogUrl) {\n      env.MONGO_OPLOG_URL = self.oplogUrl;\n    }\n    if (self.settings) {\n      env.METEOR_SETTINGS = self.settings;\n    } else {\n      delete env.METEOR_SETTINGS;\n    }\n    if (self.testMetadata) {\n      env.TEST_METADATA = JSON.stringify(self.testMetadata);\n    } else {\n      delete env.TEST_METADATA; \n    }\n    if (self.listenHost) {\n      env.BIND_IP = self.listenHost;\n    } else {\n      delete env.BIND_IP;\n    }\n    env.APP_ID = self.projectContext.appIdentifier;\n\n    // We run the server behind our own proxy, so we need to increment\n    // the HTTP forwarded count.\n    env.HTTP_FORWARDED_COUNT =\n      \"\" + ((parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0) + 1);\n\n    var shellDir = self.projectContext.getMeteorShellDirectory();\n    files.mkdir_p(shellDir);\n\n    // We need to convert to OS path here because the running app doesn't\n    // have access to path translation functions\n    env.METEOR_SHELL_DIR = files.convertToOSPath(shellDir);\n\n    env.METEOR_PARENT_PID =\n      process.env.METEOR_BAD_PARENT_PID_FOR_TEST ? \"foobar\" : process.pid;\n\n    env.METEOR_PRINT_ON_LISTEN = 'true';\n\n    // use node's path module and not 'files.js' because NODE_PATH is an\n    // environment variable passed to an external process and needs to be\n    // constructed in the OS-style.\n    var path = require('path');\n    env.NODE_PATH =\n      self.nodePath.join(path.delimiter);\n\n    return env;\n  },\n\n  // Spawn the server process and return the handle from child_process.spawn.\n  _spawn: function () {\n    var self = this;\n\n    // Path conversions\n    var nodePath = process.execPath; // This path is an OS path already\n    var entryPoint = files.convertToOSPath(\n      files.pathJoin(self.bundlePath, 'main.js'));\n\n    // Setting options\n    var opts = _.clone(self.nodeOptions);\n\n    var attach;\n    if (self.debugPort) {\n      attach = require('../inspector.js').start(self.debugPort, entryPoint);\n\n      // If you do opts.push(\"--debug\", port) it doesn't work on Windows\n      // for some reason.\n      opts.push(\"--debug=\" + attach.suggestedDebugBrkPort);\n    }\n\n    opts.push(entryPoint);\n\n    // Call node\n    var child_process = require('child_process');\n    // setup the 'ipc' pipe if further communication between app and proxy is\n    // expected\n    var ioOptions = self.ipcPipe ? ['pipe', 'pipe', 'pipe', 'ipc'] : 'pipe';\n    var child = child_process.spawn(nodePath, opts, {\n      env: self._computeEnvironment(),\n      stdio: ioOptions\n    });\n\n    // Attach inspector\n    if (attach) {\n      attach(child);\n    }\n\n    return child;\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// AppRunner\n///////////////////////////////////////////////////////////////////////////////\n\n// Given an app, bundle and run the app. If the app's source changes,\n// kill, rebundle, and rerun it. If the app dies, restart it, unless\n// it dies repeatedly immediately after being started, in which case\n// wait for source changes to restart.\n//\n// Communicates with a Proxy to tell it when the app is up,\n// temporarily down, or crashing.\n//\n// Options include:\n//\n// - onRunEnd(result): If provided, called after each run of the program (or\n//   attempted run, if, say, bundling fails). Blocks restarting until it\n//   returns. See below for the format of 'result'. Return truthy to continue;\n//   return falsey to give up (without logging any more status messages). Do not\n//   call stop() from onRunEnd as that would necessarily deadlock.\n//\n// - watchForChanges: If true, the default, then (a) the program will\n//   be killed and restarted if its source files change; (b) if\n//   something goes really wrong (bundling fails, the program crashes\n//   constantly) such that we give up, we will start trying again if\n//   the source files change. If false, then we don't do (a) and if\n//   (b) happens we just give up permanently.\n//\n// - noRestartBanner: Set to true to skip the banner that is normally\n//   printed after each restart of the app once it is ready to listen\n//   for connections.\n//\n// - Other options: port, mongoUrl, oplogUrl, buildOptions, rootUrl,\n//   settingsFile, program, proxy, recordPackageUsage\n//\n// To use, construct an instance of AppRunner, and then call start() to start it\n// running. To stop it, either return false from onRunEnd, or call stop().  (But\n// don't call stop() from inside onRunEnd: that causes a deadlock.)\n//\n// The 'result' argument to onRunEnd is an object with keys:\n//\n// - outcome: the reason the run ended. One of:\n//\n//   - 'terminated': the process exited. Additionally, a 'code'\n//     attribute will be set of the process exited on its own accord,\n//     a 'signal' attribute will be set if the process was killed on a\n//     signal, or neither will be set if the process could not be\n//     spawned (spawn call failed, or no such program in bundle) -- in\n//     this last case an explanation will have been written to the run\n//     log, and you may assume that it will take more than source code\n//     changes to fix the problem.\n//\n//   - 'bundle-fail': bundling failed.\n//\n//   - 'changed': watchForChanges was true and a source file changed.\n//\n//   - 'wrong-release': the release that this app targets does not\n//     match the currently running version of Meteor (eg, the user\n//     typed 'meteor update' in another window). An 'displayReleaseNeeded'\n//     attribute will be present giving the app's release name.\n//\n//   - 'conflicting-versions': the constraint solver could not find a set of\n//     package versions to use that would satisfy the constraints of\n//     .meteor/versions and .meteor/packages. This could be caused by conflicts\n//     in .meteor/versions, conflicts in .meteor/packages, and/or inconsistent\n//     changes to the dependencies in local packages.\n//\n//   - 'stopped': stop() was called while a run was in progress.\n//\n// - errors: for 'bundle-fail', the buildmessage messages object corresponding\n//      to the error\n//\n// - watchSet: for runs in which there's a reason to wait for file changes\n//      ('bundle-fail' and 'terminated'), the WatchSet to wait on.\nvar AppRunner = function (options) {\n  var self = this;\n\n  self.projectContext = options.projectContext;\n\n  // note: run-all.js updates port directly\n  self.port = options.port;\n  self.listenHost = options.listenHost;\n  self.mongoUrl = options.mongoUrl;\n  self.oplogUrl = options.oplogUrl;\n  self.buildOptions = options.buildOptions;\n  self.rootUrl = options.rootUrl;\n  self.mobileServerUrl = options.mobileServerUrl;\n  self.cordovaRunner = options.cordovaRunner;\n  self.settingsFile = options.settingsFile;\n  self.testMetadata = options.testMetadata;\n  self.debugPort = options.debugPort;\n  self.proxy = options.proxy;\n  self.watchForChanges =\n    options.watchForChanges === undefined ? true : options.watchForChanges;\n  self.onRunEnd = options.onRunEnd;\n  self.noRestartBanner = options.noRestartBanner;\n  self.recordPackageUsage =\n    options.recordPackageUsage === undefined ? true : options.recordPackageUsage;\n  self.omitPackageMapDeltaDisplayOnFirstRun =\n    options.omitPackageMapDeltaDisplayOnFirstRun;\n\n  self.fiber = null;\n  self.startPromise = null;\n  self.runPromise = null;\n  self.exitPromise = null;\n  self.watchPromise = null;\n  self._promiseResolvers = {};\n\n  // If this promise is set with self.makeBeforeStartPromise, then for the first\n  // run, we will wait on it just before self.appProcess.start() is called.\n  self._beforeStartPromise = null;\n  // A hacky state variable that indicates that the proxy process (this process)\n  // is communicating to the app process over ipc. If an error in communication\n  // occurs, we can distinguish it in a callback handling the 'error' event.\n  self._refreshing = false;\n\n  // Builders saved across rebuilds, so that targets can be re-written in\n  // place instead of created again from scratch.\n  self.builders = {};\n};\n\n_.extend(AppRunner.prototype, {\n  // Start the app running, and restart it as necessary. Returns\n  // immediately.\n  start: function () {\n    var self = this;\n\n    if (self.fiber) {\n      throw new Error(\"already started?\");\n    }\n\n    self.startPromise = self._makePromise(\"start\");\n\n    self.fiber = Fiber(function () {\n      self._fiber();\n    });\n    self.fiber.run();\n\n    self.startPromise.await();\n    self.startPromise = null;\n  },\n\n  _makePromise: function (name) {\n    var self = this;\n    return new Promise(function (resolve) {\n      self._promiseResolvers[name] = resolve;\n    });\n  },\n\n  _resolvePromise: function (name, value) {\n    var resolve = this._promiseResolvers[name];\n    if (resolve) {\n      this._promiseResolvers[name] = null;\n      resolve(value);\n    }\n  },\n\n  _cleanUpPromises: function () {\n    if (this._promiseResolvers) {\n      _.each(this._promiseResolvers, function (resolve) {\n        resolve && resolve();\n      });\n      this._promiseResolvers = null;\n    }\n  },\n\n  // Shut down the app. stop() will block until the app is shut\n  // down. This may involve waiting for bundling to\n  // finish. Idempotent, however only one thread may be in stop() at a\n  // time.\n  stop: function () {\n    var self = this;\n\n    if (! self.fiber) {\n      // nothing to do\n      return;\n    }\n\n    if (self.exitPromise) {\n      throw new Error(\"another fiber already stopping?\");\n    }\n\n    // The existence of this promise makes the fiber break out of its loop.\n    self.exitPromise = self._makePromise(\"exit\");\n\n    self._resolvePromise(\"run\", { outcome: 'stopped' });\n    self._resolvePromise(\"watch\");\n\n    if (self._beforeStartPromise) {\n      // If we stopped before mongod started (eg, due to mongod startup\n      // failure), unblock the runner fiber from waiting for mongod to start.\n      self._resolvePromise(\"beforeStart\", true);\n    }\n\n    self.exitPromise.await();\n    self.exitPromise = null;\n  },\n\n  // Returns a function that can be called to resolve _beforeStartPromise.\n  makeBeforeStartPromise: function () {\n    if (this._beforeStartPromise) {\n      throw new Error(\"makeBeforeStartPromise called twice?\");\n    }\n    this._beforeStartPromise = this._makePromise(\"beforeStart\");\n    return this._promiseResolvers[\"beforeStart\"];\n  },\n\n  // Run the program once, wait for it to exit, and then return. The\n  // return value is same as onRunEnd.\n  _runOnce: function (options) {\n    var self = this;\n    options = options || {};\n    var firstRun = options.firstRun;\n\n    Console.enableProgressDisplay(true);\n\n    runLog.clearLog();\n    self.proxy.setMode(\"hold\");\n\n    // Bundle up the app\n    var bundlePath = self.projectContext.getProjectLocalDirectory('build');\n\n    // Cache the server target because the server will not change inside\n    // a single invocation of _runOnce().\n    var cachedServerWatchSet;\n\n    var bundleApp = function () {\n      if (! firstRun) {\n        // If the build fails in a way that could be fixed by a refresh, allow\n        // it even if we refreshed previously, since that might have been a\n        // little while ago.\n        catalog.triedToRefreshRecently = false;\n\n        // If this isn't the first time we've run, we need to reset the project\n        // context since everything we have cached may have changed.\n        // XXX We can try to be a little less conservative here:\n        // - Don't re-build the whole local catalog if we know which local\n        //   packages have changed.  (This one might be a little trickier due\n        //   to how the WatchSets are laid out.  Might be possible to avoid\n        //   re-building the local catalog at all if packages didn't change\n        //   at all, though.)\n        self.projectContext.reset({}, {\n          // Don't forget all Isopack objects; just make sure to check that they\n          // are up to date.\n          softRefreshIsopacks: true,\n          // Don't forget the package map we calculated last time, even if we\n          // didn't write it to disk (because, eg, we're not running with a\n          // release that matches the app's release).  While we will still check\n          // our constraints, we will use the map we calculated last time as the\n          // previous solution (not what's on disk). Package deltas should be\n          // shown from the previous solution.\n          preservePackageMap: true\n        });\n        var messages = buildmessage.capture(function () {\n          self.projectContext.readProjectMetadata();\n        });\n        if (messages.hasMessages()) {\n          return {\n            runResult: {\n              outcome: 'bundle-fail',\n              errors: messages,\n              watchSet: self.projectContext.getProjectAndLocalPackagesWatchSet()\n            }\n          };\n        }\n      }\n\n      // Check to make sure we're running the right version of Meteor.\n      var wrongRelease = ! release.usingRightReleaseForApp(self.projectContext);\n      if (wrongRelease) {\n        return {\n          runResult: {\n            outcome: 'wrong-release',\n            displayReleaseNeeded:\n              self.projectContext.releaseFile.displayReleaseName\n          }\n        };\n      }\n\n      messages = buildmessage.capture(function () {\n        self.projectContext.prepareProjectForBuild();\n      });\n      if (messages.hasMessages()) {\n        return {\n          runResult: {\n            outcome: 'bundle-fail',\n            errors: messages,\n            watchSet: self.projectContext.getProjectAndLocalPackagesWatchSet()\n          }\n        };\n      }\n\n      // Show package changes... unless it's the first time in test-packages.\n      if (!(self.omitPackageMapDeltaDisplayOnFirstRun && firstRun)) {\n        self.projectContext.packageMapDelta.displayOnConsole();\n      }\n\n      if (self.recordPackageUsage) {\n        stats.recordPackages({\n          what: \"sdk.run\",\n          projectContext: self.projectContext\n        });\n      }\n\n      var bundleResult = Profile.run((firstRun?\"B\":\"Reb\")+\"uild App\", () => {\n        var bundleResult = bundler.bundle({\n          projectContext: self.projectContext,\n          outputPath: bundlePath,\n          includeNodeModules: \"symlink\",\n          buildOptions: self.buildOptions,\n          hasCachedBundle: !! cachedServerWatchSet,\n          previousBuilders: self.builders\n        });\n\n        // save new builders with their caches\n        self.builders = bundleResult.builders;\n\n        return bundleResult;\n      });\n\n      // Keep the server watch set from the initial bundle, because subsequent\n      // bundles will not contain a server target.\n      if (cachedServerWatchSet) {\n        bundleResult.serverWatchSet = cachedServerWatchSet;\n      } else {\n        cachedServerWatchSet = bundleResult.serverWatchSet;\n      }\n\n      if (bundleResult.errors) {\n        return {\n          runResult: {\n            outcome: 'bundle-fail',\n            errors: bundleResult.errors,\n            watchSet: combinedWatchSetForBundleResult(bundleResult)\n          }\n        };\n      } else {\n        return { bundleResult: bundleResult };\n      }\n    };\n\n    var combinedWatchSetForBundleResult = function (br) {\n      var watchSet = br.serverWatchSet.clone();\n      watchSet.merge(br.clientWatchSet);\n      return watchSet;\n    };\n\n    var bundleResult;\n    var bundleResultOrRunResult = bundleApp();\n    if (bundleResultOrRunResult.runResult) {\n      return bundleResultOrRunResult.runResult;\n    }\n    bundleResult = bundleResultOrRunResult.bundleResult;\n\n    firstRun = false;\n\n    // Read the settings file, if any\n    var settings = null;\n    var settingsWatchSet = new watch.WatchSet;\n    var settingsMessages = buildmessage.capture({\n      title: \"preparing to run\",\n      rootPath: process.cwd()\n    }, function () {\n      if (self.settingsFile) {\n        settings = files.getSettings(self.settingsFile, settingsWatchSet);\n      }\n    });\n    if (settingsMessages.hasMessages()) {\n      return {\n        outcome: 'bundle-fail',\n        errors: settingsMessages,\n        watchSet: settingsWatchSet\n      };\n    }\n\n    var serverWatchSet = bundleResult.serverWatchSet;\n    serverWatchSet.merge(settingsWatchSet);\n\n    // We only can refresh the client without restarting the server if the\n    // client contains the 'autoupdate' package.\n    var canRefreshClient = self.projectContext.packageMap &&\n          self.projectContext.packageMap.getInfo('autoupdate');\n\n    if (! canRefreshClient) {\n      // Restart server on client changes if we can't refresh the client.\n      serverWatchSet = combinedWatchSetForBundleResult(bundleResult);\n    }\n\n    const cordovaRunner = self.cordovaRunner;\n    if (cordovaRunner) {\n      const pluginVersions =\n        cordova.pluginVersionsFromStarManifest(bundleResult.starManifest);\n\n      if (!cordovaRunner.started) {\n        const { settingsFile, mobileServerUrl } = self;\n        const messages = buildmessage.capture(() => {\n          cordovaRunner.prepareProject(bundlePath, pluginVersions,\n            { settingsFile, mobileServerUrl });\n        });\n\n        if (messages.hasMessages()) {\n          return {\n            outcome: 'bundle-fail',\n            errors: messages,\n            watchSet: combinedWatchSetForBundleResult(bundleResult)\n          };\n        }\n        cordovaRunner.printWarningsIfNeeded();\n      } else {\n        // If the set of Cordova platforms or plugins changes from one run\n        // to the next, we just exit, because we don't yet have a way to,\n        // for example, get the new plugins to the mobile clients or stop a\n        // running client on a platform that has been removed.\n\n        if (cordovaRunner.havePlatformsChangedSinceLastRun()) {\n          return { outcome: 'outdated-cordova-platforms' };\n        }\n\n        if (cordovaRunner.havePluginsChangedSinceLastRun(pluginVersions)) {\n          return { outcome: 'outdated-cordova-plugins' };\n        }\n      }\n    }\n\n    // Atomically (1) see if we've been stop()'d, (2) if not, create a\n    // promise that can be used to stop() us once we start running.\n    if (self.exitPromise) {\n      return { outcome: 'stopped' };\n    }\n\n    if (self.runPromise) {\n      throw new Error(\"already have promise?\");\n    }\n\n    var runPromise = self.runPromise = self._makePromise(\"run\");\n\n    // Run the program\n    options.beforeRun && options.beforeRun();\n    var appProcess = new AppProcess({\n      projectContext: self.projectContext,\n      bundlePath: bundlePath,\n      port: self.port,\n      listenHost: self.listenHost,\n      rootUrl: self.rootUrl,\n      mongoUrl: self.mongoUrl,\n      oplogUrl: self.oplogUrl,\n      mobileServerUrl: self.mobileServerUrl,\n      onExit: function (code, signal) {\n        self._resolvePromise(\"run\", {\n          outcome: 'terminated',\n          code: code,\n          signal: signal,\n          watchSet: combinedWatchSetForBundleResult(bundleResult)\n        });\n      },\n      debugPort: self.debugPort,\n      onListen: function () {\n        self.proxy.setMode(\"proxy\");\n        options.onListen && options.onListen();\n        self._resolvePromise(\"start\");\n      },\n      nodeOptions: getNodeOptionsFromEnvironment(),\n      nodePath: _.map(bundleResult.nodePath, files.convertToOSPath),\n      settings: settings,\n      testMetadata: self.testMetadata,\n      ipcPipe: self.watchForChanges\n    });\n\n    if (options.firstRun && self._beforeStartPromise) {\n      var stopped = self._beforeStartPromise.await();\n      if (stopped) {\n        return true;\n      }\n    }\n\n    appProcess.start();\n    function maybePrintLintWarnings(bundleResult) {\n      if (! (self.projectContext.lintAppAndLocalPackages &&\n             bundleResult.warnings)) {\n        return;\n      }\n      if (bundleResult.warnings.hasMessages()) {\n        const formattedMessages = bundleResult.warnings.formatMessages();\n        runLog.log(\n          `Linted your app.\\n\\n${ formattedMessages }`,\n          { arrow: true });\n      } else {\n        runLog.log('Linted your app. No linting errors.',\n                   { arrow: true });\n      }\n    }\n    maybePrintLintWarnings(bundleResult);\n\n    if (cordovaRunner && !cordovaRunner.started) {\n      cordovaRunner.startRunTargets();\n    }\n\n    // Start watching for changes for files if requested. There's no\n    // hurry to do this, since clientWatchSet contains a snapshot of the\n    // state of the world at the time of bundling, in the form of\n    // hashes and lists of matching files in each directory.\n    var serverWatcher;\n    var clientWatcher;\n\n    if (self.watchForChanges) {\n      serverWatcher = new watch.Watcher({\n        watchSet: serverWatchSet,\n        onChange: function () {\n          self._resolvePromise(\"run\", {\n            outcome: 'changed'\n          });\n        }\n      });\n    }\n\n    var setupClientWatcher = function () {\n      clientWatcher && clientWatcher.stop();\n      clientWatcher = new watch.Watcher({\n         watchSet: bundleResult.clientWatchSet,\n         onChange: function () {\n          var outcome = watch.isUpToDate(serverWatchSet)\n                      ? 'changed-refreshable' // only a client asset has changed\n                      : 'changed'; // both a client and server asset changed\n          self._resolvePromise('run', { outcome: outcome });\n         }\n      });\n    };\n    if (self.watchForChanges && canRefreshClient) {\n      setupClientWatcher();\n    }\n\n    Console.enableProgressDisplay(false);\n\n    // Wait for either the process to exit, or (if watchForChanges) a\n    // source file to change. Or, for stop() to be called.\n    var ret = runPromise.await();\n\n    try {\n      while (ret.outcome === 'changed-refreshable') {\n        if (! canRefreshClient) {\n          throw Error(\"Can't refresh client?\");\n        }\n\n        // We stay in this loop as long as only refreshable assets have changed.\n        // When ret.refreshable becomes false, we restart the server.\n        bundleResultOrRunResult = bundleApp();\n        if (bundleResultOrRunResult.runResult) {\n          return bundleResultOrRunResult.runResult;\n        }\n        bundleResult = bundleResultOrRunResult.bundleResult;\n\n        maybePrintLintWarnings(bundleResult);\n\n        runLog.logClientRestart();\n\n        var oldPromise = self.runPromise = self._makePromise(\"run\");\n\n        // Notify the server that new client assets have been added to the\n        // build.\n        self._refreshing = true;\n        // ChildProcess.prototype.send used to be synchronous, but is now\n        // asynchronous: https://github.com/nodejs/node/pull/2620\n        appProcess.proc.send({\n          refresh: 'client'\n        }, err => {\n          self._refreshing = false;\n          if (err) throw err;\n        });\n\n        // Establish a watcher on the new files.\n        setupClientWatcher();\n\n        // Wait until another file changes.\n        ret = oldPromise.await();\n      }\n    } finally {\n      self.runPromise = null;\n\n      if (ret.outcome === 'changed') {\n        runLog.logTemporary(\"=> Server modified -- restarting...\");\n      }\n\n      self.proxy.setMode(\"hold\");\n      appProcess.stop();\n\n      serverWatcher && serverWatcher.stop();\n      clientWatcher && clientWatcher.stop();\n    }\n\n    return ret;\n  },\n\n  _fiber: function () {\n    var self = this;\n\n    var crashCount = 0;\n    var crashTimer = null;\n    var firstRun = true;\n\n    while (true) {\n\n      var resetCrashCount = function () {\n        crashTimer = setTimeout(function () {\n          crashCount = 0;\n        }, 8000);\n      };\n\n      var runResult = self._runOnce({\n        onListen: function () {\n          if (! self.noRestartBanner && ! firstRun) {\n            runLog.logRestart();\n            Console.enableProgressDisplay(false);\n          }\n        },\n        beforeRun: resetCrashCount,\n        firstRun: firstRun\n      });\n      firstRun = false;\n\n      clearTimeout(crashTimer);\n      if (runResult.outcome !== \"terminated\") {\n        crashCount = 0;\n      }\n\n      var wantExit = self.onRunEnd ? !self.onRunEnd(runResult) : false;\n      if (wantExit || self.exitPromise || runResult.outcome === \"stopped\") {\n        break;\n      }\n\n      if (runResult.outcome === \"wrong-release\" ||\n          runResult.outcome === \"conflicting-versions\") {\n        // Since the only implementation of onRunEnd sets wantExit on these\n        // outcomes, we will never get here currently. Moreover, it's not\n        // actually possible for us to handle these cases correctly, because our\n        // contract says that we should wait for changes, but runResult doesn't\n        // actually contain a watchset. Oops. Just throw an exception for now.\n        throw new Error(\"can't handle outcome \" + runResult.outcome);\n      }\n\n      else if (runResult.outcome === \"bundle-fail\") {\n        runLog.log(\"Errors prevented startup:\\n\\n\" +\n                        runResult.errors.formatMessages(),  { arrow: true });\n        if (self.watchForChanges) {\n          runLog.log(\"Your application has errors. \" +\n                     \"Waiting for file change.\",  { arrow: true });\n          Console.enableProgressDisplay(false);\n        }\n      }\n\n      else if (runResult.outcome === \"changed\") {\n        continue;\n      } else if (runResult.outcome === \"terminated\") {\n        if (runResult.signal) {\n          runLog.log('Exited from signal: ' + runResult.signal, { arrow: true });\n        } else if (runResult.code !== undefined) {\n          runLog.log('Exited with code: ' + runResult.code, { arrow: true });\n        } else {\n          // explanation should already have been logged\n        }\n\n        crashCount ++;\n        if (crashCount < 3) {\n          continue;\n        }\n\n        if (self.watchForChanges) {\n          runLog.log(\"Your application is crashing. \" +\n                     \"Waiting for file change.\",\n                     { arrow: true });\n          Console.enableProgressDisplay(false);\n        }\n      }\n\n      else {\n        throw new Error(\"unknown run outcome?\");\n      }\n\n      if (self.watchForChanges) {\n        self.watchPromise = self._makePromise(\"watch\");\n\n        if (!runResult.watchSet) {\n          throw Error(\"watching for changes with no watchSet?\");\n        }\n        // XXX reference to watcher is lost later?\n        var watcher = new watch.Watcher({\n          watchSet: runResult.watchSet,\n          onChange: function () {\n            self._resolvePromise(\"watch\");\n          }\n        });\n        self.proxy.setMode(\"errorpage\");\n        // If onChange wasn't called synchronously (clearing watchPromise), wait\n        // on it.\n        self.watchPromise && self.watchPromise.await();\n        // While we were waiting, did somebody stop() us?\n        if (self.exitPromise) {\n          break;\n        }\n        runLog.log(\"Modified -- restarting.\",  { arrow: true });\n        Console.enableProgressDisplay(true);\n        continue;\n      }\n\n      break;\n    }\n\n    // Allow the process to exit normally, since optimistic file watchers\n    // may be keeping the event loop busy.\n    closeAllWatchers();\n\n    // Giving up for good.\n    self._cleanUpPromises();\n\n    self.fiber = null;\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////\n\nexports.AppRunner = AppRunner;\n"]}