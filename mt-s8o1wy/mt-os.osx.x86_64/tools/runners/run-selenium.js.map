{"version":3,"sources":["/tools/runners/run-selenium.js"],"names":["_","require","Fiber","files","runLog","utils","Selenium","options","self","driver","server","browserId","url","xunitOutputFile","runner","browser","xunitLines","MAGIC_PREFIX","DUMMY_FLUSH","extend","prototype","start","Error","webdriver","capabilities","loggingPrefs","Capabilities","chrome","firefox","set","builder","Builder","withCapabilities","build","Promise","await","getSession","get","_pollLogs","err","log","run","stop","close","quit","_flushLogs","executeScript","_getLogs","manage","logs","_gotStateDone","writeFile","join","process","exit","_gotState","state","_gotMagicLog","facility","msg","push","_pollLogsOnce","each","message","regex","match","exec","JSON","stringify","indexOf","substring","length","colonIndex","sleepMs","exports"],"mappings":"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","file":"tools/runners/run-selenium.js.map","sourcesContent":["var _ = require('underscore');\nvar Fiber = require('fibers');\nvar files = require('../fs/files.js');\nvar runLog = require('./run-log.js');\nvar utils = require('../utils/utils.js');\n\n// options: runner url browserId xunitOutputFile\nvar Selenium = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.driver = null;\n  self.server = null;\n\n  self.browserId = options.browserId || 'xunit';\n  self.url = options.url || 'http://localhost:3000/' + self.browserId;\n  self.xunitOutputFile = options.xunitOutputFile || 'test-results.xml';\n\n  self.runner = options.runner;\n  self.browser = options.browser || 'chrome';\n\n  self.xunitLines = null;\n};\n\n\n// The magic prefix for special log output\n// Must match packages/test-in-console/driver.js\nvar MAGIC_PREFIX = '##_meteor_magic##';\n\n// For some reason, we can't see the console.log output\n// unless we 'flush' it by sending another console.log via execute()\n// Note that this is actually a magic message, so we get it echoed back to us;\n// that's not necessary for this to work, but it keeps the output clean for users.\nvar DUMMY_FLUSH = MAGIC_PREFIX + \"flush: flush\";\n\n_.extend(Selenium.prototype, {\n  // Start the selenium server, block (yield) until it is ready to go\n  // (actively listening on outer and proxying to inner), and then\n  // return.\n  start: function () {\n    var self = this;\n\n    if (self.server) {\n      throw new Error(\"already running?\");\n    }\n\n    self.xunitLines = [];\n\n    var webdriver = require('selenium-webdriver');\n\n    var capabilities;\n    var loggingPrefs;\n    if (self.browser === 'chrome') {\n      capabilities = webdriver.Capabilities.chrome();\n      loggingPrefs = {'browser': 'ALL'};\n    } else if (self.browser === 'firefox') {\n      capabilities = webdriver.Capabilities.firefox();\n      loggingPrefs = {'browser': 'ALL'};\n    } else {\n      throw new Error(\"Unhandled browser: \" + self.browser);\n    }\n\n    if (loggingPrefs) {\n      capabilities = capabilities.set('loggingPrefs', loggingPrefs);\n    }\n\n    var builder = new webdriver.Builder().withCapabilities(capabilities);\n    self.driver = builder.build();\n\n    Promise.await(self.driver.getSession());\n    Promise.await(self.driver.get(self.url));\n\n    Fiber(function () {\n      try {\n        self._pollLogs();\n      } catch (err) {\n        runLog.log(\"Log polling exited unexpectedly: \" + err);\n      }\n    }).run();\n  },\n\n  stop: function () {\n    var self = this;\n\n    if (! self.driver) {\n      return;\n    }\n\n    Promise.await(self.driver.close());\n    Promise.await(self.driver.quit());\n\n    self.driver = null;\n  },\n\n  _flushLogs: function () {\n    var self = this;\n    Promise.await(\n      self.driver.executeScript(\"console.log('\" + DUMMY_FLUSH + \"');\", [])\n    );\n  },\n\n  _getLogs: function () {\n    var self = this;\n\n    Promise.await(self.driver.manage().logs().get('browser'));\n  },\n\n  _gotStateDone: function () {\n    var self = this;\n\n    if (self.xunitOutputFile) {\n      runLog.log(\"Writing xunit output to: \" + self.xunitOutputFile);\n      files.writeFile(self.xunitOutputFile, self.xunitLines.join('\\n'));\n    }\n\n    if (self.runner) {\n      runLog.log(\"Shutting down in response to 'done' state\");\n      self.runner.stop();\n      process.exit(0);\n    }\n  },\n\n  _gotState: function (state) {\n    var self = this;\n\n    runLog.log(\"State -> \" + state);\n\n    if (state === \"done\") {\n      self._gotStateDone();\n    }\n  },\n\n  _gotMagicLog: function (facility, msg) {\n    var self = this;\n\n    if (facility === 'xunit') {\n      self.xunitLines.push(msg);\n    } else if (facility === 'state') {\n      self._gotState(msg);\n    } else if (facility === 'flush') {\n      // Ignore\n    } else {\n      runLog.log(\"Unknown magic: \" + facility + \": \" + msg);\n    }\n  },\n\n  _pollLogsOnce: function () {\n    var self = this;\n\n    self._flushLogs();\n    var logs = self._getLogs();\n    _.each(logs, function (log) {\n      var msg = log.message;\n      var regex = /([^\\s]*)\\s*([^\\s]*)\\s*(.*)/i;\n      var match = regex.exec(msg);\n      if (!match) {\n        runLog.log(\"Unknown console.log message format: \" + JSON.stringify(log));\n        return;\n      }\n      msg = match[3];\n      if (msg === DUMMY_FLUSH) {\n        return;\n      }\n      if (msg.indexOf(MAGIC_PREFIX) === 0) {\n        msg = msg.substring(MAGIC_PREFIX.length);\n        var colonIndex = msg.indexOf(': ');\n        if (colonIndex === -1) {\n          self._gotMagicLog('', msg);\n        } else {\n          var facility = msg.substring(0, colonIndex);\n          msg = msg.substring(colonIndex + 2);\n          self._gotMagicLog(facility, msg);\n        }\n      } else {\n        runLog.log(msg);\n      }\n    });\n  },\n\n  _pollLogs: function () {\n    var self = this;\n\n    while (self.driver) {\n      try {\n        self._pollLogsOnce();\n      } catch (err) {\n        runLog.log(\"Error reading console log: \" + err);\n      }\n      utils.sleepMs(1000);\n    }\n  },\n});\n\nexports.Selenium = Selenium;\n"]}