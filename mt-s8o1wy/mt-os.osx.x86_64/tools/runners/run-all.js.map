{"version":3,"sources":["/tools/runners/run-all.js"],"names":["_","require","files","buildmessage","utils","runLog","release","Console","Proxy","Selenium","AppRunner","MongoRunner","Updater","Runner","appHost","appPort","banner","disableOplog","cordovaRunner","mongoUrl","onFailure","oplogUrl","projectContext","proxyHost","proxyPort","quiet","rootUrl","selenium","seleniumBrowser","noReleaseCheck","optionsForAppRunner","self","Error","listenPort","mongoPort","parseInt","specifiedAppPort","regenerateAppPort","stopped","convertToOSPath","prettyPath","projectDir","formatUrl","protocol","hostname","port","proxy","listenHost","proxyToPort","proxyToHost","mongoRunner","projectLocalDir","multiple","process","env","METEOR_TEST_MULTIPLE_MONGOD_REPLSET","updater","appRunner","noRestartBanner","runner","browser","start","log","arrow","unblockAppRunner","makeBeforeStartPromise","_startMongoAsync","then","enterJob","title","platform","stop","finish","randomPort","exports","run","options","runOptions","clone","once","promise","Promise","resolve","outcome","onRunEnd","result","signal","undefined","code","watchForChanges","buildMode","buildOptions","NODE_ENV","nodeEnv","await","error","from","current","getDisplayName","to","displayReleaseNeeded","arrowError","errors","formatMessages"],"mappings":"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","file":"tools/runners/run-all.js.map","sourcesContent":["const _ = require('underscore');\n\nconst files = require('../fs/files.js');\nconst buildmessage = require('../utils/buildmessage.js');\nconst utils = require('../utils/utils.js');\nconst runLog = require('./run-log.js');\nconst release = require('../packaging/release.js');\n\nconst Console = require('../console/console.js').Console;\n\nconst Proxy = require('./run-proxy.js').Proxy;\nconst Selenium = require('./run-selenium.js').Selenium;\nconst AppRunner = require('./run-app.js').AppRunner;\nconst MongoRunner = require('./run-mongo.js').MongoRunner;\nconst Updater = require('./run-updater.js').Updater;\n\nclass Runner {\n  constructor({\n    appHost,\n    appPort,\n    banner,\n    disableOplog,\n    cordovaRunner,\n    mongoUrl,\n    onFailure,\n    oplogUrl,\n    projectContext,\n    proxyHost,\n    proxyPort,\n    quiet,\n    rootUrl,\n    selenium,\n    seleniumBrowser,\n    noReleaseCheck,\n    ...optionsForAppRunner\n  }) {\n    const self = this;\n    self.projectContext = projectContext;\n\n    if (typeof proxyPort === 'undefined') {\n      throw new Error('no proxyPort?');\n    }\n\n    const listenPort = proxyPort;\n    const mongoPort = parseInt(listenPort, 10) + 1;\n    self.specifiedAppPort = appPort;\n    self.regenerateAppPort();\n\n    self.stopped = false;\n    self.noReleaseCheck = noReleaseCheck;\n    self.quiet = quiet;\n    self.banner = banner || files.convertToOSPath(\n      files.prettyPath(self.projectContext.projectDir)\n    );\n\n    if (rootUrl) {\n      self.rootUrl = rootUrl;\n    } else {\n      self.rootUrl = utils.formatUrl({\n        protocol: 'http',\n        hostname: proxyHost || \"localhost\",\n        port: listenPort,\n      });\n    }\n\n    self.proxy = new Proxy({\n      listenPort,\n      listenHost: proxyHost,\n      proxyToPort: self.appPort,\n      proxyToHost: appHost,\n      onFailure\n    });\n\n    self.mongoRunner = null;\n    if (mongoUrl) {\n      oplogUrl = disableOplog ? null : oplogUrl;\n    } else {\n      self.mongoRunner = new MongoRunner({\n        projectLocalDir: self.projectContext.projectLocalDir,\n        port: mongoPort,\n        onFailure,\n        // For testing mongod failover, run with 3 mongod if the env var is\n        // set. Note that data is not preserved from one run to the next.\n        multiple: !!process.env.METEOR_TEST_MULTIPLE_MONGOD_REPLSET\n      });\n\n      mongoUrl = self.mongoRunner.mongoUrl();\n      oplogUrl = disableOplog ? null : self.mongoRunner.oplogUrl();\n    }\n\n    self.updater = new Updater();\n\n    self.appRunner = new AppRunner({\n      ...optionsForAppRunner,\n      projectContext: self.projectContext,\n      port: self.appPort,\n      listenHost: appHost,\n      mongoUrl,\n      oplogUrl,\n      rootUrl: self.rootUrl,\n      proxy: self.proxy,\n      noRestartBanner: self.quiet,\n      cordovaRunner: cordovaRunner\n    });\n\n    self.selenium = null;\n    if (selenium) {\n      self.selenium = new Selenium({\n        runner: self,\n        browser: seleniumBrowser\n      });\n    }\n  }\n\n  // XXX leave a pidfile and check if we are already running\n  start() {\n    const self = this;\n\n    self.proxy.start();\n\n    // print the banner only once we've successfully bound the port\n    if (! self.quiet && ! self.stopped) {\n      runLog.log(\"[[[[[ \" + self.banner + \" ]]]]]\\n\");\n      runLog.log(\"Started proxy.\",  { arrow: true });\n    }\n\n    var unblockAppRunner = self.appRunner.makeBeforeStartPromise();\n    self._startMongoAsync().then(unblockAppRunner);\n\n    if (!self.noReleaseCheck && ! self.stopped) {\n      self.updater.start();\n    }\n\n    if (! self.stopped) {\n      buildmessage.enterJob({ title: \"starting your app\" }, function () {\n        self.appRunner.start();\n      });\n      if (! self.quiet && ! self.stopped) {\n        runLog.log(\"Started your app.\",  { arrow: true });\n      }\n    }\n\n    if (! self.stopped && ! self.quiet) {\n      runLog.log(\"\");\n      runLog.log(\"App running at: \" + self.rootUrl,  { arrow: true });\n\n      if (process.platform === \"win32\") {\n        runLog.log(\"   Type Control-C twice to stop.\");\n        runLog.log(\"\");\n      }\n    }\n\n    if (self.selenium && ! self.stopped) {\n      buildmessage.enterJob({ title: \"starting Selenium\" }, function () {\n        self.selenium.start();\n      });\n      if (! self.quiet && ! self.stopped) {\n        runLog.log(\"Started Selenium.\", { arrow: true });\n      }\n    }\n\n    // XXX It'd be nice to (cosmetically) handle failure better. Right\n    // now we overwrite the \"starting foo...\" message with the\n    // error. It'd be better to overwrite it with \"failed to start\n    // foo\" and then print the error.\n  }\n\n  async _startMongoAsync() {\n    if (! this.stopped && this.mongoRunner) {\n      this.mongoRunner.start();\n      if (! this.stopped && ! this.quiet) {\n        runLog.log(\"Started MongoDB.\", { arrow: true });\n      }\n    }\n  }\n\n  // Idempotent\n  stop() {\n    const self = this;\n    if (self.stopped) {\n      return;\n    }\n\n    self.stopped = true;\n    self.proxy.stop();\n    self.updater.stop();\n    self.mongoRunner && self.mongoRunner.stop();\n    self.appRunner.stop();\n    self.selenium && self.selenium.stop();\n    // XXX does calling this 'finish' still make sense now that runLog is a\n    // singleton?\n    runLog.finish();\n  }\n\n  // Call this whenever you want to regenerate the app's port (if it is not\n  // explicitly specified by the user).\n  //\n  // Rationale: if we randomly chose a port that's in use and the app failed to\n  // listen on it, we should try a different port when we restart the app!\n  regenerateAppPort() {\n    const self = this;\n    if (self.specifiedAppPort) {\n      self.appPort = self.specifiedAppPort;\n    } else {\n      self.appPort = require('../utils/utils.js').randomPort();\n    }\n    if (self.proxy) {\n      self.proxy.proxyToPort = self.appPort;\n    }\n    if (self.appRunner) {\n      self.appRunner.port = self.appPort;\n    }\n  }\n}\n\n// Run the app and all of its associated processes. Runs (and does not\n// return) until an unrecoverable failure happens. Logs to\n// stdout. Returns a suggested exit code.\n//\n// If 'once' is set, run the app process exactly once and pass through\n// its exit code. Return an exit code of 255 if the app process was\n// killed by a signal and 254 if the app process could not start\n// (build failure, invalid program name, database couldn't start, and\n// so on).\n//\n// If the 'once' option is not set, the default, restart the app\n// process if it crashes or if source files change. (Non-app\n// processes, such as the database, are always restarted as\n// necessary.) The function will only return if there is an\n// unrecoverable error, which generally means an error that could not\n// be fixed by source code changes (such as the database refusing to\n// run), but also currently includes Meteor version mismatches. So the\n// exit code will always be 254 because in all other cases we'll\n// persevere.\n//\n// Options:\n//\n// - proxyPort: the port to connect to to access the application (we will\n//   run a proxy here that proxies to the actual app process). required\n// - buildOptions: 'buildOptions' argument to bundler.bundle()\n// - settingsFile: path to file containing deploy-time settings\n// - once: see above\n// - banner: replace the application path that is normally printed on\n//   startup with an arbitrary string (eg, 'Tests')\n// - rootUrl: tell the app that traffic at this URL will be routed to\n//   it at '/' (used by the app to construct absolute URLs)\n// - disableOplog: don't use oplog tailing\n// - mongoUrl: don't start a mongo process; instead use the mongo at\n//   this mongo URL\n// - oplogUrl: URL of the mongo oplog to use. if mongoUrl isn't\n//   set (we're starting a mongo) a default will be provided, but can\n//   be overridden. if mongoUrl is set, you must set this or you don't\n//   get oplog tailing.\n// - recordPackageUsage: (default true) if set to false, don't send\n//   information about packages used by this app to the package stats\n//   server.\nexports.run = function (options) {\n  var runOptions = _.clone(options);\n  var once = runOptions.once;\n  delete runOptions.once;\n\n  var promise = new Promise(function (resolve) {\n    runOptions.onFailure = function () {\n      // Ensure that runner stops now. You might think this is unnecessary\n      // because the runner is stopped immediately after promise.await(), but if\n      // the failure happens while runner.start() is still running, we want the\n      // rest of start to stop, and it's not like resolve() magically makes\n      // us jump to a promise.await() that hasn't happened yet!.\n      runner.stop();\n      resolve({ outcome: 'failure' });\n    };\n\n    runOptions.onRunEnd = function (result) {\n      if (once ||\n          result.outcome === \"conflicting-versions\" ||\n          result.outcome === \"wrong-release\" ||\n          result.outcome === \"outdated-cordova-platforms\" ||\n          result.outcome === \"outdated-cordova-plugins\" ||\n          (result.outcome === \"terminated\" &&\n           result.signal === undefined && result.code === undefined)) {\n        resolve(result);\n        return false;  // stop restarting\n      }\n      runner.regenerateAppPort();\n      return true;  // restart it\n    };\n  });\n\n  runOptions.watchForChanges = ! once;\n  runOptions.quiet = false;\n\n  // Ensure process.env.NODE_ENV matches the build mode, with the following precedence:\n  // 1. Passed in build mode (if development or production)\n  // 2. Existing process.env.NODE_ENV (if it's valid)\n  // 3. Default to development (in both cases) otherwise\n\n  // NOTE: because this code only runs when using `meteor run` or `meteor test[-packages`,\n  // We *don't* end up defaulting NODE_ENV in this way when bundling/deploying.\n  // In those cases, it will default to \"production\" in packages/meteor/*_env.js\n\n  // We *override* NODE_ENV if build mode is one of these values\n  let buildMode = runOptions.buildOptions.buildMode;\n  if (buildMode === \"development\" || buildMode === \"production\") {\n    process.env.NODE_ENV = buildMode;\n  }\n\n  let nodeEnv = process.env.NODE_ENV;\n  // We *never* override buildMode (it can be \"test\")\n  if (!buildMode) {\n    if (nodeEnv === \"development\" || nodeEnv === \"production\") {\n      runOptions.buildOptions.buildMode = nodeEnv;\n    } else {\n      runOptions.buildOptions.buildMode = \"development\";\n    }\n  }\n\n  if (!nodeEnv) {\n    process.env.NODE_ENV = \"development\";\n  }\n\n  var runner = new Runner(runOptions);\n  runner.start();\n  var result = promise.await();\n  runner.stop();\n\n  if (result.outcome === \"conflicting-versions\") {\n    Console.error(\n      \"The constraint solver could not find a set of package versions to\",\n      \"use that would satisfy the constraints of .meteor/versions and\",\n      \".meteor/packages. This could be caused by conflicts in\",\n      \".meteor/versions, conflicts in .meteor/packages, and/or\",\n      \"inconsistent changes to the dependencies in local packages.\");\n    return 254;\n  }\n\n  if (result.outcome === \"outdated-cordova-plugins\") {\n    Console.error(\"Your app's Cordova plugins have changed.\");\n    Console.error(\"Restart meteor to use the new set of plugins.\");\n    return 254;\n  }\n\n  if (result.outcome === \"outdated-cordova-platforms\") {\n    Console.error(\"Your app's platforms have changed.\");\n    Console.error(\"Restart meteor to use the new set of platforms.\");\n    return 254;\n  }\n\n  if (result.outcome === \"wrong-release\") {\n    if (once) {\n      // We lost a race where the user ran 'meteor update' and 'meteor\n      // run --once' simultaneously.\n      throw new Error(\"wrong release?\");\n    }\n\n    // If the user did not specify a --release on the command line,\n    // and simultaneously runs `meteor update` during this run, just\n    // exit and let them restart the run. (We can do something fancy\n    // like allowing this to work if the tools version didn't change,\n    // or even springboarding if the tools version does change, but\n    // this (which prevents weird errors) is a start.)\n    var from = release.current.getDisplayName();\n    var to = result.displayReleaseNeeded;\n    Console.error(\n      \"Your app has been updated to \" + to + \" from \" + from + \".\",\n      \"Restart meteor to use the new release.\");\n    return 254;\n  }\n\n  if (result.outcome === \"failure\" ||\n      (result.outcome === \"terminated\" &&\n       result.signal === undefined && result.code === undefined)) {\n    // Fatal problem with something other than the app process. An\n    // explanation should already have been logged.\n    return 254;\n  }\n\n  if (once && result.outcome === \"bundle-fail\") {\n    Console.arrowError(\"Build failed:\\n\\n\" +\n                       result.errors.formatMessages());\n    return 254;\n  }\n\n  if (once && result.outcome === \"terminated\") {\n    if (result.signal) {\n      Console.error(\"Killed (\" + result.signal + \")\");\n      return 255;\n    } else if (typeof result.code === \"number\") {\n      // We used to print 'Your application is exiting' here, but that\n      // seems unnecessarily chatty? once mode is otherwise silent\n      return result.code;\n    } else {\n      // If there is neither a code nor a signal, it means that we\n      // failed to start the process. We logged the reason. Probably a\n      // bad program name.\n      return 254;\n    }\n  }\n\n  throw new Error(\"unexpected outcome \" + result.outcome);\n};\n"]}