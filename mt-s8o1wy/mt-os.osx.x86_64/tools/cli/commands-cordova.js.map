{"version":3,"sources":["/tools/cli/commands-cordova.js"],"names":["_","main","Console","catalog","ProjectContext","PlatformList","buildmessage","files","cordova","CordovaProject","createProjectContext","appDir","projectContext","projectDir","captureAndExit","readProjectMetadata","registerCommand","name","options","verbose","type","Boolean","short","minArgs","maxArgs","Infinity","requiresApp","catalogRefresh","Refresh","Never","notOnWindows","setVerbose","platformsToAdd","args","installedPlatforms","platformList","getPlatforms","platform","contains","error","CORDOVA_PLATFORMS","jobHasMessages","cordovaProject","concat","cordovaPlatforms","filterPlatforms","ensurePlatformsAreSynchronized","write","info","checkPlatformRequirements","platformsToRemove","DEFAULT_PLATFORMS","without","process","rawInfo","join","hidden","url"],"mappings":"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","file":"tools/cli/commands-cordova.js.map","sourcesContent":["import _ from 'underscore';\nimport main from './main.js';\nimport { Console } from '../console/console.js';\nimport catalog from '../packaging/catalog/catalog.js';\nimport { ProjectContext, PlatformList } from '../project-context.js';\nimport buildmessage from '../utils/buildmessage.js';\nimport files from '../fs/files.js';\n\nimport * as cordova from '../cordova';\nimport { CordovaProject } from '../cordova/project.js';\n\nfunction createProjectContext(appDir) {\n  const projectContext = new ProjectContext({\n    projectDir: appDir\n  });\n  main.captureAndExit('=> Errors while initializing project:', () => {\n    // We're just reading metadata here; we don't need to resolve constraints.\n    projectContext.readProjectMetadata();\n  });\n  return projectContext;\n}\n\n// Add one or more Cordova platforms\nmain.registerCommand({\n  name: 'add-platform',\n  options: {\n    verbose: { type: Boolean, short: \"v\" }\n  },\n  minArgs: 1,\n  maxArgs: Infinity,\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never(),\n  notOnWindows: false\n}, function (options) {\n  Console.setVerbose(!!options.verbose);\n\n  const projectContext = createProjectContext(options.appDir);\n\n  const platformsToAdd = options.args;\n  let installedPlatforms = projectContext.platformList.getPlatforms();\n\n  main.captureAndExit('', 'adding platforms', () => {\n    for (platform of platformsToAdd) {\n      if (_.contains(installedPlatforms, platform)) {\n        buildmessage.error(`${platform}: platform is already added`);\n      } else if (!_.contains(cordova.CORDOVA_PLATFORMS, platform)) {\n        buildmessage.error(`${platform}: no such platform`);\n      }\n    }\n\n    if (buildmessage.jobHasMessages()) {\n      return;\n    }\n\n    const cordovaProject = new CordovaProject(projectContext);\n    if (buildmessage.jobHasMessages()) return;\n\n    installedPlatforms = installedPlatforms.concat(platformsToAdd)\n    const cordovaPlatforms = cordova.filterPlatforms(installedPlatforms);\n    cordovaProject.ensurePlatformsAreSynchronized(cordovaPlatforms);\n\n    if (buildmessage.jobHasMessages()) {\n      return;\n    }\n\n    // Only write the new platform list when we have succesfully synchronized\n    projectContext.platformList.write(installedPlatforms);\n\n    for (platform of platformsToAdd) {\n      Console.info(`${platform}: added platform`);\n      if (_.contains(cordovaPlatforms, platform)) {\n        cordovaProject.checkPlatformRequirements(platform);\n      }\n    }\n  });\n});\n\n// Remove one or more Cordova platforms\nmain.registerCommand({\n  name: 'remove-platform',\n  minArgs: 1,\n  maxArgs: Infinity,\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never()\n}, function (options) {\n  const projectContext = createProjectContext(options.appDir);\n\n  const platformsToRemove = options.args;\n  let installedPlatforms = projectContext.platformList.getPlatforms();\n\n  main.captureAndExit('', 'removing platforms', () => {\n    for (platform of platformsToRemove) {\n      // Explain why we can't remove server or browser platforms\n      if (_.contains(PlatformList.DEFAULT_PLATFORMS, platform)) {\n        buildmessage.error(`${platform}: cannot remove platform in this \\\nversion of Meteor`);\n      } else if (!_.contains(installedPlatforms, platform)) {\n        buildmessage.error(`${platform}: platform is not in this project`);\n      }\n    }\n\n    if (buildmessage.jobHasMessages()) {\n      return;\n    }\n\n    installedPlatforms = _.without(installedPlatforms, ...platformsToRemove);\n    projectContext.platformList.write(installedPlatforms);\n\n    for (platform of platformsToRemove) {\n      Console.info(`${platform}: removed platform`);\n    }\n\n    if (process.platform !== 'win32') {\n      const cordovaProject = new CordovaProject(projectContext);\n      if (buildmessage.jobHasMessages()) return;\n      const cordovaPlatforms = cordova.filterPlatforms(installedPlatforms);\n      cordovaProject.ensurePlatformsAreSynchronized(cordovaPlatforms);\n    }\n  });\n});\n\nmain.registerCommand({\n  name: 'list-platforms',\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never()\n}, function (options) {\n  const projectContext = createProjectContext(options.appDir);\n\n  const installedPlatforms = projectContext.platformList.getPlatforms();\n\n  Console.rawInfo(installedPlatforms.join('\\n') + '\\n');\n});\n\nmain.registerCommand({\n  name: 'install-sdk',\n  options: {\n    verbose: { type: Boolean, short: \"v\" }\n  },\n  minArgs: 0,\n  maxArgs: Infinity,\n  catalogRefresh: new catalog.Refresh.Never(),\n  hidden: true,\n  notOnWindows: true\n}, function (options) {\n  Console.setVerbose(!!options.verbose);\n\n  Console.info(\"Please follow the installation instructions in the mobile guide:\");\n  Console.info(Console.url(\"http://guide.meteor.com/mobile.html#installing-prerequisites\"));\n\n  return 0;\n});\n\nmain.registerCommand({\n  name: 'configure-android',\n  options: {\n    verbose: { type: Boolean, short: \"v\" }\n  },\n  minArgs: 0,\n  maxArgs: Infinity,\n  catalogRefresh: new catalog.Refresh.Never(),\n  hidden: true,\n  notOnWindows: true\n}, function (options) {\n  Console.setVerbose(!!options.verbose);\n\n  Console.info(`You can launch the Android SDK Manager from within Android \\\nStudio.\nSee`, Console.url(\"http://developer.android.com/tools/help/sdk-manager.html\"), `\nAlternatively, you can launch it by running the 'android' command.\n(This requires that you have set ANDROID_HOME and added ANDROID_HOME/tools \\\nto your PATH.)`);\n\n  return 0;\n});\n"]}