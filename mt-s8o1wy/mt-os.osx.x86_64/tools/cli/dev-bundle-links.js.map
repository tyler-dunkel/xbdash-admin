{"version":3,"sources":["/tools/cli/dev-bundle-links.js"],"names":["fs","require","files","exports","makeLink","target","linkPath","convertToOSPath","tempPath","Math","random","toString","slice","symlinkSync","e","writeFileSync","renameSync","unlinkSync","readLink","stat","lstatSync","isSymbolicLink","realpathSync","isFile","readFileSync"],"mappings":"AAAA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,QAAQD,QAAQ,qBAAR,CAAZ;;AAEAE,QAAQC,QAAR,GAAmB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAC7CD,WAASH,MAAMK,eAAN,CAAsBF,MAAtB,CAAT;AACAC,aAAWJ,MAAMK,eAAN,CAAsBD,QAAtB,CAAX;;AAEA,MAAIE,WAAWF,WAAW,GAAX,GAAiBG,KAAKC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAhC;;AAEA,MAAI;AACFZ,OAAGa,WAAH,CAAeR,MAAf,EAAuBG,QAAvB,EAAiC,UAAjC;AACD,GAFD,CAEE,OAAOM,CAAP,EAAU;AACVd,OAAGe,aAAH,CAAiBP,QAAjB,EAA2BH,MAA3B,EAAmC,MAAnC;AACD;;AAED,MAAI;AACFL,OAAGgB,UAAH,CAAcR,QAAd,EAAwBF,QAAxB;AACD,GAFD,CAEE,OAAOQ,CAAP,EAAU;AACV;AACAd,OAAGiB,UAAH,CAAcX,QAAd;AACAN,OAAGgB,UAAH,CAAcR,QAAd,EAAwBF,QAAxB;AACD;AACF,CAnBD;;AAqBA;AACAH,QAAQe,QAAR,GAAmB,UAAUZ,QAAV,EAAoB;AACrCA,aAAWJ,MAAMK,eAAN,CAAsBD,QAAtB,CAAX;;AAEA,MAAIa,OAAOnB,GAAGoB,SAAH,CAAad,QAAb,CAAX;AACA,MAAIa,KAAKE,cAAL,EAAJ,EAA2B;AACzBf,eAAWN,GAAGsB,YAAH,CAAgBhB,QAAhB,CAAX;AACD,GAFD,MAEO,IAAIa,KAAKI,MAAL,EAAJ,EAAmB;AACxBjB,eAAWN,GAAGwB,YAAH,CAAgBlB,QAAhB,EAA0B,MAA1B,CAAX;AACD;;AAED,SAAOA,QAAP;AACD,CAXD","file":"tools/cli/dev-bundle-links.js.map","sourcesContent":["var fs = require(\"fs\");\nvar files = require(\"../fs/mini-files.js\");\n\nexports.makeLink = function (target, linkPath) {\n  target = files.convertToOSPath(target);\n  linkPath = files.convertToOSPath(linkPath);\n\n  var tempPath = linkPath + \"-\" + Math.random().toString(36).slice(2);\n\n  try {\n    fs.symlinkSync(target, tempPath, \"junction\");\n  } catch (e) {\n    fs.writeFileSync(tempPath, target, \"utf8\");\n  }\n\n  try {\n    fs.renameSync(tempPath, linkPath);\n  } catch (e) {\n    // If renaming fails, try unlinking first.\n    fs.unlinkSync(linkPath);\n    fs.renameSync(tempPath, linkPath);\n  }\n};\n\n// Note: this function returns an OS-specific path!\nexports.readLink = function (linkPath) {\n  linkPath = files.convertToOSPath(linkPath);\n\n  var stat = fs.lstatSync(linkPath);\n  if (stat.isSymbolicLink()) {\n    linkPath = fs.realpathSync(linkPath);\n  } else if (stat.isFile()) {\n    linkPath = fs.readFileSync(linkPath, \"utf8\");\n  }\n\n  return linkPath;\n};\n"]}