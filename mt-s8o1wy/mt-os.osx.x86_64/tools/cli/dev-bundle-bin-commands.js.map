{"version":3,"sources":["/tools/cli/dev-bundle-bin-commands.js"],"names":["fs","require","path","devBundleBinCommand","process","argv","args","slice","getChildProcess","Promise","resolve","helpers","all","getDevBundle","getEnv","then","devBundleAndEnv","devBundleDir","cmd","getCommand","env","child","spawn","stdio","on","error","console","log","stack","exitCode","exit","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;AAEA;AACA;AACA;AACA,IAAIE,sBAAsBC,QAAQC,IAAR,CAAa,CAAb,CAA1B;AACA,IAAIC,OAAOF,QAAQC,IAAR,CAAaE,KAAb,CAAmB,CAAnB,CAAX;;AAEA,SAASC,eAAT,GAA2B;AACzB,MAAI,OAAOL,mBAAP,KAA+B,QAAnC,EAA6C;AAC3C,WAAOM,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,MAAIC,UAAUV,QAAQ,6BAAR,CAAd;;AAEA,SAAOQ,QAAQG,GAAR,CAAY,CACjBD,QAAQE,YAAR,EADiB,EAEjBF,QAAQG,MAAR,EAFiB,CAAZ,EAGJC,IAHI,CAGC,UAAUC,eAAV,EAA2B;AACjC,QAAIC,eAAeD,gBAAgB,CAAhB,CAAnB;AACA,QAAIE,MAAMP,QAAQQ,UAAR,CAAmBhB,mBAAnB,EAAwCc,YAAxC,CAAV;AACA,QAAI,CAAEC,GAAN,EAAW;AACT,aAAO,IAAP;AACD;;AAED,QAAIE,MAAMJ,gBAAgB,CAAhB,CAAV;AACA,QAAIK,QAAQpB,QAAQ,eAAR,EAAyBqB,KAAzB,CAA+BJ,GAA/B,EAAoCZ,IAApC,EAA0C;AACpDiB,aAAO,SAD6C;AAEpDH,WAAKA;AAF+C,KAA1C,CAAZ;;AAKAnB,YAAQ,uCAAR;;AAEAoB,UAAMG,EAAN,CAAS,OAAT,EAAkB,UAAUC,KAAV,EAAiB;AACjCC,cAAQC,GAAR,CAAYF,MAAMG,KAAN,IAAeH,KAA3B;AACD,KAFD;;AAIAJ,UAAMG,EAAN,CAAS,MAAT,EAAiB,UAAUK,QAAV,EAAoB;AACnCzB,cAAQ0B,IAAR,CAAaD,QAAb;AACD,KAFD;;AAIA,WAAOR,KAAP;AACD,GA3BM,CAAP;AA4BD;;AAEDU,OAAOC,OAAP,GAAiBxB,iBAAjB","file":"tools/cli/dev-bundle-bin-commands.js.map","sourcesContent":["// Note that this file is required before we install our Babel hooks in\n// ../tool-env/install-babel.js, so we can't use ES2015+ syntax here.\n\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\n// The dev_bundle/bin command has to come immediately after the meteor\n// command, as in `meteor npm` or `meteor node`, because we don't want to\n// require(\"./main.js\") for these commands.\nvar devBundleBinCommand = process.argv[2];\nvar args = process.argv.slice(3);\n\nfunction getChildProcess() {\n  if (typeof devBundleBinCommand !== \"string\") {\n    return Promise.resolve(null);\n  }\n\n  var helpers = require(\"./dev-bundle-bin-helpers.js\");\n\n  return Promise.all([\n    helpers.getDevBundle(),\n    helpers.getEnv()\n  ]).then(function (devBundleAndEnv) {\n    var devBundleDir = devBundleAndEnv[0];\n    var cmd = helpers.getCommand(devBundleBinCommand, devBundleDir);\n    if (! cmd) {\n      return null;\n    }\n\n    var env = devBundleAndEnv[1];\n    var child = require(\"child_process\").spawn(cmd, args, {\n      stdio: \"inherit\",\n      env: env\n    });\n\n    require(\"./flush-buffers-on-exit-in-windows.js\");\n\n    child.on(\"error\", function (error) {\n      console.log(error.stack || error);\n    });\n\n    child.on(\"exit\", function (exitCode) {\n      process.exit(exitCode);\n    });\n\n    return child;\n  });\n}\n\nmodule.exports = getChildProcess();\n"]}