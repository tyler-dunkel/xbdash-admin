{"version":3,"sources":["/tools/cli/commands-packages.js"],"names":["main","require","_","files","buildmessage","auth","config","utils","httpHelpers","compiler","catalog","catalogRemote","isopack","updater","Console","projectContextModule","colonConverter","catalogUtils","release","packageVersionParser","packageMapModule","packageClient","tropohouse","cordova","updateMeteorToolSymlink","getReleaseOrPackageRecord","name","rec","official","getPackage","rel","getReleaseTrack","record","isRelease","refreshOfficialCatalogOrDie","options","refreshOrWarn","error","ExitWithCode","removeIfEndsWith","s","suffix","endsWith","substring","length","registerCommand","catalogRefresh","Refresh","OnceAtStart","ignoreErrors","type","Boolean","projectContext","ProjectContext","projectDir","appDir","mkdtemp","neverWriteProjectConstraintsFile","neverWritePackageMap","allowIncompatibleUpdate","captureAndExit","initializeCatalog","addPackages","packageNames","projectConstraintsFile","addConstraints","map","p","parsePackageConstraint","localCatalog","getAllPackageNames","current","isProperRelease","keys","getPackages","prepareProjectForBuild","requiresApp","Never","packageMapDelta","displayOnConsole","updatePackageMetadata","packageSource","conn","version","existingRecord","getVersion","command","readmeInfo","processReadme","hash","blankHash","connection","info","minArgs","maxArgs","create","update","requiresPackage","tempProjectDir","explicitlyAddedLocalPackageDirs","packageDir","packageMapFilename","pathJoin","alwaysWritePackageMap","forceIncludeCordovaUnibuild","lintPackageWithSourceRoot","process","env","METEOR_TEST_NO_PUBLISH","loggedInPackagesConnection","err","handlePackageServerConnectionError","localVersionRecord","getVersionBySourceRoot","packageName","getPackageSource","Error","versionExplicitlyProvided","packageInfo","match","isLoggedIn","properName","loggedInUsername","each","testName","getConstraint","warnings","getLintingMessagesForLocalPackages","hasMessages","arrowError","printMessages","arrowInfo","isopackCache","getIsopack","binary","platformSpecific","publishPackage","existingVersion","doNotPublishBuild","close","warn","labelWarn","a","indent","url","all","args","split","ShowUsage","versionString","pkgVersion","source","has","inCheckout","exit","SpringboardToSpecificRelease","releaseName","sourceTarball","enterJob","getUrlWithResuming","encoding","jobHasMessages","sourcePath","extractTarGz","convert","exists","versionsFile","copyFile","title","isopk","buildArchitectures","createAndPublishBuiltPackage","relConf","data","readFile","JSON","parse","e","message","description","orderKey","defaultOrderKeyForReleaseVersion","recommended","track","DEFAULT_TRACK","start","slice","trackRecord","amIAuthorized","packages","tool","ignorePackageDirsEnvVar","allPackagesWithTests","allPackages","getAllNonTestPackageNames","includeNonCore","toPublish","oldVersionRecord","newVersion","push","existingBuild","getBuildWithPreciseBuildArchitectures","somethingChanged","bundleBuildResult","bundleBuild","treeHash","build","unfinishedBuilds","callPackageServerBM","patchFrom","gitTag","getPackageServerFilePrefix","indexOf","runGitInCheckout","fail","isEmpty","items","newVersionsAvailable","anyBuiltLocally","eachConstraint","constraint","isIsobuildFeaturePackage","mapInfo","packageMap","getInfo","versionRecord","projectCatalog","versionAddendum","kind","getNewerVersion","cordovaPluginsFile","getPluginVersions","printPackageList","bulletPoint","curVersion","whichCatalog","latest","test","getLatestVersion","getLatestMainlineVersion","latestVersion","lessThan","maybeUpdateRelease","isCheckout","releaseTrack","forced","latestRelease","latestKnown","isRecommended","patch","releaseVersion","getReleaseVersion","newerRecommendedReleases","getLaterReleaseVersions","SpringboardToLatestRelease","getDisplayName","noPrefix","readProjectMetadata","releaseFile","fullReleaseName","maybeTheLatestRelease","explicit","normalReleaseSpecified","updateTo","patchReleaseVersion","patchRecord","noWrap","displayReleaseName","upgraders","upgradersToRun","releaseRecord","updateReleaseConstraints","writeReleaseFileAndDevBundleLink","pathBasename","upgrader","runUpgrader","finishedUpgraders","appendUpgraders","releaseInfo","getSortedRecommendedReleaseVersions","requiresRelease","Infinity","releaseUpdateStatus","upgradePackageNames","upgradeIndirectDepPatchVersions","filter","packageMapFile","getCachedVersions","upgradePackagesWithoutCordova","isEqual","reset","resolveConstraints","hasChanges","topLevelPkgSet","nonlatestDirectDeps","nonlatestIndirectDeps","eachPackage","selectedVersion","printItem","join","hidden","console","log","tryToDownloadUpdate","showBanner","printErrors","wipeAllPackages","checkoutVersion","remoteLatestVersion","exitCode","splitPluginsAndPackages","pluginsToAdd","plugins","packagesToAdd","changed","target","id","newId","newPluginId","isValidVersion","forCordova","write","infoMessages","constraintsToAdd","messages","capture","packageReq","useBuildmessage","packageRecord","versionConstraint","alternatives","subConstr","constraintString","explainIfRefreshFailed","pluginsToRemove","packagesToRemove","removePackages","add","String","short","remove","list","fullRecord","callPackageServer","maintainers","user","username","rawInfo","releaseNameAndVersion","outputDirectory","convertToStandardPath","trackAndVersion","splitReleaseName","toolPackageVersion","parsePackageAndVersion","toolPackage","toolVersion","toolPkgBuilds","getAllBuilds","buildArches","pluck","osArches","buildArch","subArches","subArch","substr","arch","contains","osArch","pkgName","getBuildsForArches","mkdir_p","dataTmpdir","tmpDataFile","tmpCatalog","RemoteCatalog","initialize","packageStorage","updateServerPackageData","forceRecommendRelease","closePermanently","PackageMap","fromReleaseVersion","tmpdir","targetPlatform","tmpTropo","Tropohouse","platform","downloadPackagesMissingFromMap","serverArchitectures","getPackageStorage","root","toolIsopackPath","packagePath","toolIsopack","Isopack","initFromPath","toolRecord","findWhere","toolsOnDisk","linkToLatestMeteor","path","unpacked","cp_r","createTarball","bannersFile","bannersData","banners","unrecommend","versions","nSplit","getSortedVersions","status","success"],"mappings":"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","file":"tools/cli/commands-packages.js.map","sourcesContent":["var main = require('./main.js');\nvar _ = require('underscore');\nvar files = require('../fs/files.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar auth = require('../meteor-services/auth.js');\nvar config = require('../meteor-services/config.js');\nvar utils = require('../utils/utils.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar compiler = require('../isobuild/compiler.js');\nvar catalog = require('../packaging/catalog/catalog.js');\nvar catalogRemote = require('../packaging/catalog/catalog-remote.js');\nvar isopack = require('../isobuild/isopack.js');\nvar updater = require('../packaging/updater.js');\nvar Console = require('../console/console.js').Console;\nvar projectContextModule = require('../project-context.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar catalogUtils = require('../packaging/catalog/catalog-utils.js');\n\nvar release = require('../packaging/release.js');\nvar packageVersionParser = require('../packaging/package-version-parser.js');\nvar updater = require('../packaging/updater.js');\nvar packageMapModule = require('../packaging/package-map.js');\nvar packageClient = require('../packaging/package-client.js');\nvar tropohouse = require('../packaging/tropohouse.js');\n\nimport * as cordova from '../cordova';\nimport { updateMeteorToolSymlink } from \"../packaging/updater.js\";\n\n// For each release (or package), we store a meta-record with its name,\n// maintainers, etc. This function takes in a name, figures out if\n// it is a release or a package, and fetches the correct record.\n//\n// Specifically, it returns an object with the following keys:\n//  - record : (a package or version record)\n//  - isRelease : true if it is a release instead of a package.\nvar getReleaseOrPackageRecord = function(name) {\n  var rec = catalog.official.getPackage(name);\n  var rel = false;\n  if (!rec) {\n    // Not a package! But is it a release track?\n    rec = catalog.official.getReleaseTrack(name);\n    if (rec) {\n      rel = true;\n    }\n  }\n  return { record: rec, isRelease: rel };\n};\n\n// Seriously, this dies if it can't refresh. Only call it if you're sure you're\n// OK that the command doesn't work while offline.\nvar refreshOfficialCatalogOrDie = function (options) {\n  if (!catalog.refreshOrWarn(options)) {\n    Console.error(\n      \"This command requires an up-to-date package catalog. Exiting.\");\n    throw new main.ExitWithCode(1);\n  }\n};\n\nvar removeIfEndsWith = function (s, suffix) {\n  if (s.endsWith(suffix)) {\n    return s.substring(0, s.length - suffix.length);\n  }\n  return s;\n};\n\n// Internal use only. Makes sure that your Meteor install is totally good to go\n// (is \"airplane safe\"). Specifically, it:\n//    - Builds all local packages, even those you're not using in your current\n//      app. (If you're not in an app, it still does this even though there is\n//      no persistent IsopackCache, because this still causes npm dependencies\n//      to be downloaded.)\n//    - Ensures that all packages in your current release are downloaded, even\n//      those you're not using in your current app.\n//    - Ensures that all packages used by your app (if any) are downloaded\n// (It also ensures you have the dev bundle downloaded, just like every command\n// in a checkout.)\n//\n// The use case is, for example, cloning an app from github, running this\n// command, then getting on an airplane.\n//\n// This does NOT guarantee a *re*build of all local packages (though it will\n// download any new dependencies): we still trust the buildinfo files in your\n// app's IsopackCache. If you want to rebuild all local packages that are used\n// in your app, call meteor rebuild. That said, rebuild should only be necessary\n// if there's a bug in the build tool... otherwise, packages should be rebuilt\n// whenever necessary!\nmain.registerCommand({\n  name: '--get-ready',\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false }),\n  options: {\n    'allow-incompatible-update': { type: Boolean }\n  }\n}, function (options) {\n  // If we're in an app, make sure that we can build the current app. Otherwise\n  // just make sure that we can build some fake app.\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir || files.mkdtemp('meteor-get-ready'),\n    neverWriteProjectConstraintsFile: true,\n    neverWritePackageMap: true,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.initializeCatalog();\n  });\n\n  // Add every local package (including tests) and every release package to this\n  // project. (Hopefully they can all be built at once!)\n  var addPackages = function (packageNames) {\n    projectContext.projectConstraintsFile.addConstraints(\n      _.map(packageNames, function (p) {\n        return utils.parsePackageConstraint(p);\n      })\n    );\n  };\n  addPackages(projectContext.localCatalog.getAllPackageNames());\n  if (release.current.isProperRelease()) {\n    addPackages(_.keys(release.current.getPackages()));\n  }\n\n  // Now finish building and downloading.\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  // We don't display package changes because they'd include all these packages\n  // not actually in the app!\n  // XXX Maybe we should do a first pass that only builds packages actually in\n  // the app and does display the PackageMapDelta?\n  return 0;\n});\n\n\n// Internal use only. A simpler version of --get-ready which doesn't try to also\n// build/download local and release packages that aren't currently used. Just\n// builds and downloads packages used by the current app.\nmain.registerCommand({\n  name: '--prepare-app',\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never(),\n  options: {\n    'allow-incompatible-update': { type: Boolean }\n  }\n}, function (options) {\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  projectContext.packageMapDelta.displayOnConsole();\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// publish a package\n///////////////////////////////////////////////////////////////////////////////\n\n// Updates the metadata for a given package version. Prints user-friendly\n// messages if certain new values are invalid; calls to the packageClient to\n// perform the actual update.\n//\n// Takes in a packageSource and a connection to the package server. Returns 0 on\n// success and an exit code on failure.\nvar updatePackageMetadata = function (packageSource, conn) {\n    var name = packageSource.name;\n    var version = packageSource.version;\n\n    // You can't change the metadata of a record that doesn't exist.\n    var existingRecord =\n          catalog.official.getVersion(name, version);\n    if (! existingRecord) {\n      Console.error(\n        \"You can't call\",  Console.command(\"`meteor publish --update`\"),\n        \"on version \" + version + \" of \" + \"package '\" + name +\n          \"' without publishing it first.\");\n      return 1;\n    }\n\n    // Load in the user's documentation, and check that it isn't blank.\n    var readmeInfo;\n    main.captureAndExit(\n      \"=> Errors while publishing:\", \"reading documentation\",\n      function () {\n       readmeInfo = packageSource.processReadme();\n    });\n\n    // You are still not allowed to upload a blank README.md.\n    if (readmeInfo && readmeInfo.hash === files.blankHash) {\n      Console.error(\n        \"Your documentation file is blank, so users may have trouble\",\n        \"figuring out how to use your package. Please fill it out, or\",\n        \"set 'documentation: null' in your Package.describe.\");\n      return 1;\n    };\n\n    // Finally, call to the server.\n    main.captureAndExit(\n      \"=> Errors while publishing:\",\n      \"updating package metadata\",\n      function () {\n        packageClient.updatePackageMetadata({\n          packageSource: packageSource,\n          readmeInfo: readmeInfo,\n          connection: conn\n        });\n    });\n\n    Console.info(\n      \"Success. You can take a look at the new metadata by running\",\n      Console.command(\"'meteor show \" + name + \"@\" + version + \"'\"),\n      \"outside the current project directory.\");\n\n    // Refresh, so that we actually learn about the thing we just published.\n    refreshOfficialCatalogOrDie();\n    return 0;\n}\n\nmain.registerCommand({\n  name: 'publish',\n  minArgs: 0,\n  maxArgs: 0,\n  options: {\n    create: { type: Boolean },\n    update: { type: Boolean },\n    // This is similar to publish-for-arch, but uses the source code you have\n    // locally (and other local packages you may have) instead of downloading\n    // the source bundle. It does verify that the source is the same, though.\n    // Good for bootstrapping things in the core release.\n    'existing-version': { type: Boolean },\n    // This is the equivalent of \"sudo\": make sure that administrators don't\n    // accidentally put their personal packages in the top level namespace.\n    'top-level': { type: Boolean },\n    // An option to publish despite linting errors\n    'no-lint': { type: Boolean }\n  },\n  requiresPackage: true,\n  // We optimize the workflow by using up-to-date package data to weed out\n  // obviously incorrect submissions before they ever hit the wire.\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false }),\n  'allow-incompatible-update': { type: Boolean }\n}, function (options) {\n  if (options.create && options['existing-version']) {\n    // Make up your mind!\n    Console.error(\n      \"The --create and --existing-version options cannot\",\n      \"both be specified.\");\n    return 1;\n  }\n\n  if (options.update && options.create) {\n    Console.error(\n      \"The --create and --update options cannot both be specified.\");\n    return 1;\n  }\n\n  if (options.update && options[\"existing-version\"]) {\n    Console.error(\n      \"The --update option implies that the version already exists.\",\n      \"You do not need to use the --existing-version flag with --update.\");\n    return 1;\n  }\n\n  var projectContext;\n  if (! options.appDir) {\n    // We're not in an app? OK, make a temporary app directory, and make sure\n    // that the current package directory is found by its local catalog.\n    var tempProjectDir = files.mkdtemp('meteor-package-build');\n    projectContext = new projectContextModule.ProjectContext({\n      projectDir: tempProjectDir,  // won't have a packages dir, that's OK\n      explicitlyAddedLocalPackageDirs: [options.packageDir],\n      packageMapFilename: files.pathJoin(options.packageDir, '.versions'),\n      // We always want to write our '.versions' package map, overriding a\n      // comparison against the value of a release file that doesn't exist.\n      alwaysWritePackageMap: true,\n      // When we publish, we should always include web.cordova unibuilds, even\n      // though this temporary directory does not have any cordova platforms\n      forceIncludeCordovaUnibuild: true,\n      allowIncompatibleUpdate: options['allow-incompatible-update'],\n      lintPackageWithSourceRoot: options['no-lint'] ? null : options.packageDir,\n    });\n  } else {\n    // We're in an app; let the app be our context, but make sure we don't\n    // overwrite .meteor/packages or .meteor/versions when we add some temporary\n    // constraints (which ensure that we can actually build the package and its\n    // tests).\n    projectContext = new projectContextModule.ProjectContext({\n      projectDir: options.appDir,\n      neverWriteProjectConstraintsFile: true,\n      neverWritePackageMap: true,\n      // When we publish, we should always include web.cordova unibuilds, even\n      // if this project does not have any cordova platforms\n      forceIncludeCordovaUnibuild: true,\n      allowIncompatibleUpdate: options['allow-incompatible-update'],\n      lintPackageWithSourceRoot: options['no-lint'] ? null : options.packageDir,\n    });\n  }\n\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    // Just get up to initializing the catalog. We're going to mutate the\n    // constraints file a bit before we prepare the build.\n    projectContext.initializeCatalog();\n  });\n\n  if (!process.env.METEOR_TEST_NO_PUBLISH) {\n    // Connect to the package server and log in.\n    try {\n      var conn = packageClient.loggedInPackagesConnection();\n    } catch (err) {\n      packageClient.handlePackageServerConnectionError(err);\n      return 1;\n    }\n    if (! conn) {\n      Console.error('No connection: Publish failed.');\n      return 1;\n    }\n  }\n\n  var localVersionRecord = projectContext.localCatalog.getVersionBySourceRoot(\n    options.packageDir);\n  if (! localVersionRecord) {\n    // OK, we're inside a package (ie, a directory with a package.js) and we're\n    // inside an app (ie, a directory with a file named .meteor/packages) but\n    // the package is not on the app's search path (ie, it's probably not\n    // directly inside the app's packages directory).  That's kind of\n    // weird. Let's not allow this.\n    Console.error(\n      \"The package you are in appears to be inside a Meteor app but is not \" +\n       \"in its packages directory. You may only publish packages that are \" +\n       \"entirely outside of a project or that are loaded by the project \" +\n       \"that they are inside.\");\n    return 1;\n  }\n  var packageName = localVersionRecord.packageName;\n  var packageSource = projectContext.localCatalog.getPackageSource(packageName);\n  if (! packageSource) {\n    throw Error(\"no PackageSource for \" + packageName);\n  }\n\n  // Anything published to the server must explicitly set a version.\n  if (! packageSource.versionExplicitlyProvided) {\n    Console.error(\"A version must be specified for the package. Set it with \" +\n                  \"Package.describe.\");\n    return 1;\n  }\n\n  // If we just want to update the package metadata, then we have all we\n  // need. Don't bother building the package, just update the metadata and\n  // return the result.\n  if (options.update) {\n    return updatePackageMetadata(packageSource, conn);\n  }\n\n  // Fail early if the package record exists, but we don't think that it does\n  // and are passing in the --create flag!\n  if (options.create) {\n    var packageInfo = catalog.official.getPackage(packageName);\n    if (packageInfo) {\n      Console.error(\n        \"Package already exists. To create a new version of an existing \"+\n        \"package, do not use the --create flag!\");\n      return 2;\n    }\n\n    if (!options['top-level'] && !packageName.match(/:/)) {\n      Console.error(\n        \"Only administrators can create top-level packages without an\",\n        \"account prefix. (To confirm that you wish to create a top-level\",\n        \"package with no account prefix, please run this command again\",\n        \"with the --top-level option.)\");\n      // You actually shouldn't be able to get here without being logged in, but\n      // it seems poor form to assume anything like that for the point of a\n      // brief error message.\n      if (auth.isLoggedIn()) {\n        var properName =  auth.loggedInUsername() + \":\" + packageName;\n        Console.error(\n          \"\\nDid you mean to create \" + properName + \" instead?\"\n       );\n      }\n      return 2;\n    }\n  }\n\n  // Make sure that both the package and its test (if any) are actually built.\n  _.each([packageName, packageSource.testName], function (name) {\n    if (! name) {\n      // for testName\n      return;\n    }\n\n    // If we're already using this package, that's OK; no need to override.\n    if (projectContext.projectConstraintsFile.getConstraint(name)) {\n      return;\n    }\n    projectContext.projectConstraintsFile.addConstraints(\n      [utils.parsePackageConstraint(name)]);\n  });\n\n  // Now resolve constraints and build packages.\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  // We don't display the package map delta here, because it includes adding the\n  // package's test and all the test's dependencies.\n\n  if (!options['no-lint']) {\n    const warnings = projectContext.getLintingMessagesForLocalPackages();\n    if (warnings && warnings.hasMessages()) {\n      Console.arrowError(\n        \"Errors linting your package; run with --no-lint to ignore.\");\n      Console.printMessages(warnings);\n      return 1;\n    } else if (warnings) {\n      Console.arrowInfo('Linted your package. No linting errors.');\n    }\n  }\n\n  if (process.env.METEOR_TEST_NO_PUBLISH) {\n    Console.error(\n      'Would publish the package at this point, but since the ' +\n      'METEOR_TEST_NO_PUBLISH environment variable is set, just going ' +\n      'to finish here.');\n    return 0;\n  }\n\n  var isopack = projectContext.isopackCache.getIsopack(packageName);\n  if (! isopack) {\n    // This shouldn't happen; we already threw a different error if the package\n    // wasn't even in the local catalog, and we explicitly added this package to\n    // the project's constraints file, so it should have been built.\n    throw Error(\"package not built even though added to constraints?\");\n  }\n\n  // We have initialized everything, so perform the publish operation.\n  var binary = isopack.platformSpecific();\n  main.captureAndExit(\n    \"=> Errors while publishing:\",\n    \"publishing the package\",\n    function () {\n      packageClient.publishPackage({\n        projectContext: projectContext,\n        packageSource: packageSource,\n        connection: conn,\n        new: options.create,\n        existingVersion: options['existing-version'],\n        doNotPublishBuild: binary && !options['existing-version']\n      });\n    });\n\n  Console.info('Published ' + packageName + '@' + localVersionRecord.version +\n               '.');\n\n  // We are only publishing one package, so we should close the connection, and\n  // then exit with the previous error code.\n  conn.close();\n\n  // Warn the user if their package is not good for all architectures.\n  if (binary && options['existing-version']) {\n    // This is an undocumented command that you are not supposed to run! We\n    // assume that you know what you are doing, if you ran it, and are OK with\n    // overrwriting normal compatibilities.\n    Console.warn();\n    Console.labelWarn(\"Your package contains binary code.\");\n  } else if (binary) {\n    // Normal publish flow. Tell the user nicely.\n    Console.warn();\n    Console.warn(\n      \"You're not done publishing yet! This package contains binary code and\",\n      \"must be built on all of Meteor's architectures, including this\",\n      \"machine's architecture.\");\n    Console.warn();\n    Console.info(\n      \"You can access Meteor provided build machines, pre-configured to\",\n      \"support older versions of MacOS and Linux, by running:\");\n    _.each([\"os.osx.x86_64\", \"os.linux.x86_64\",\n            \"os.linux.x86_32\", \"os.windows.x86_32\"],\n      function (a) {\n        Console.info(\n          Console.command(\"meteor admin get-machine \" + a),\n          Console.options({ indent: 2 }));\n    });\n\n    Console.info();\n    Console.info(\"On each machine, run:\");\n    Console.info();\n    Console.info(\n      Console.command(\n        \"meteor publish-for-arch \" +\n        packageSource.name + \"@\" + packageSource.version),\n      Console.options({ indent: 2 }));\n    Console.info();\n    Console.info(\n      \"For more information on binary ABIs and consistent builds, see:\");\n    Console.info(\n      Console.url(\"https://github.com/meteor/meteor/wiki/Build-Machines\"),\n      Console.options({ indent: 2 })\n    );\n    Console.info();\n  }\n\n  // Refresh, so that we actually learn about the thing we just published.\n  refreshOfficialCatalogOrDie();\n\n  return 0;\n});\n\n\nmain.registerCommand({\n  name: 'publish-for-arch',\n  minArgs: 1,\n  maxArgs: 1,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false }),\n  // in theory, this option shouldn't be necessary, because when you run\n  // publish-for-arch you want to reproduce the exact same setup as when\n  // you ran 'publish', but support the option in case it comes up.\n  'allow-incompatible-update': { type: Boolean }\n}, function (options) {\n  // argument processing\n  var all = options.args[0].split('@');\n  if (all.length !== 2) {\n    Console.error(\n      'Incorrect argument. Please use the form of <packageName>@<version>');\n    throw new main.ShowUsage;\n  }\n  var name = all[0];\n  var versionString = all[1];\n\n  var packageInfo = catalog.official.getPackage(name);\n  if (! packageInfo) {\n    Console.error(\n      \"You can't call \" + Console.command(\"`meteor publish-for-arch`\") +\n      \"on package '\" + name + \"' without \" +\" publishing it first.\"\n    );\n    Console.error();\n    Console.error(\n      \"To publish the package, run \" +\n       Console.command(\"`meteor publish --create` \") +\n      \"from the package directory.\");\n    Console.error();\n    return 1;\n  }\n\n  var pkgVersion = catalog.official.getVersion(name, versionString);\n  if (! pkgVersion) {\n    Console.error(\n      \"You can't call\",  Console.command(\"`meteor publish-for-arch`\"),\n      \"on version \" + versionString + \" of \" + \"package '\" + name +\n      \"' without publishing it first.\");\n    Console.error();\n    Console.error(\n      \"To publish the package, run \" + Console.command(\"`meteor publish ` \") +\n      \"from the package directory.\");\n    Console.error();\n    return 1;\n  }\n\n  if (! pkgVersion.source || ! pkgVersion.source.url) {\n    Console.error(\n      \"There is no source uploaded for\",\n      name + '@' + versionString);\n    return 1;\n  }\n\n  // No releaseName (not even null): this predates the isopack-cache\n  // refactorings. Let's just springboard to Meteor 1.0 and let it deal with any\n  // further springboarding based on reading a nested json file.\n  if (! _.has(pkgVersion, 'releaseName')) {\n    if (files.inCheckout()) {\n      Console.error(\n        \"This package was published from an old version of meteor, \" +\n        \"but you are running from checkout! Consider running \" +\n        Console.command(\"`meteor --release 1.0`\"),\n        \"so we can springboard correctly.\");\n      process.exit(1);\n    }\n    throw new main.SpringboardToSpecificRelease(\"METEOR@1.0\");\n  }\n\n  if (pkgVersion.releaseName === null) {\n    if (! files.inCheckout()) {\n      Console.error(\n        \"This package was published from a checkout of meteor!\",\n        \"The tool cannot replicate that environment and will not even try.\",\n        \"Please check out meteor at the \" +\n        \"corresponding git commit and try again.\");\n      process.exit(1);\n    }\n  } else if (files.inCheckout()) {\n    Console.error(\n      \"This package was published from a built version of meteor, \" +\n      \"but you are running from checkout! Consider running from a \" +\n      \"proper Meteor release with \" +\n      Console.command(\"`meteor --release \" + pkgVersion.releaseName + \"`\"),\n      \"so we can springboard correctly.\");\n    process.exit(1);\n  } else if (pkgVersion.releaseName !== release.current.name) {\n    // We are in a built release, and so is the package, but it's a different\n    // one. Springboard!\n    throw new main.SpringboardToSpecificRelease(pkgVersion.releaseName);\n  }\n\n  // OK, either we're running from a checkout and so was the published package,\n  // or we're running from the same release as the published package.\n\n  // Download the source to the package.\n  var sourceTarball = buildmessage.enterJob(\"downloading package source\", function () {\n    return httpHelpers.getUrlWithResuming({\n      url: pkgVersion.source.url,\n      encoding: null\n    });\n  });\n\n  if (buildmessage.jobHasMessages()) {\n    return 1;\n  }\n\n  var sourcePath = files.mkdtemp('package-source');\n  buildmessage.enterJob(\"extracting package source\", () => {\n    // XXX check tarballHash!\n    files.extractTarGz(sourceTarball, sourcePath);\n  });\n\n  // XXX Factor out with packageClient.bundleSource so that we don't\n  // have knowledge of the tarball structure in two places.\n  var packageDir = files.pathJoin(sourcePath, colonConverter.convert(name));\n  if (! files.exists(packageDir)) {\n    Console.error('Malformed source tarball');\n    return 1;\n  }\n\n  var tempProjectDir = files.mkdtemp('meteor-package-arch-build');\n  // Copy over a version lock file from the source tarball.\n  var versionsFile = files.pathJoin(packageDir, '.versions');\n  if (! files.exists(versionsFile)) {\n    Console.error(\n      \"This package has no valid version lock file: are you trying to use \" +\n      \"publish-for-arch on a core package? Publish-for-arch cannot \" +\n      \"guarantee safety. Please use\",\n      Console.command(\"'meteor publish --existing-version'\"), \"instead.\");\n    process.exit(1);\n  }\n  files.copyFile(files.pathJoin(packageDir, '.versions'),\n                 files.pathJoin(tempProjectDir, '.meteor', 'versions'));\n\n  // Set up the project.\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: tempProjectDir,\n    explicitlyAddedLocalPackageDirs: [packageDir],\n    // When we publish, we should always include web.cordova unibuilds, even\n    // though this temporary directory does not have any cordova platforms\n    forceIncludeCordovaUnibuild: true,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  // Just get up to initializing the catalog. We're going to mutate the\n  // constraints file a bit before we prepare the build.\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.initializeCatalog();\n  });\n  projectContext.projectConstraintsFile.addConstraints(\n    [utils.parsePackageConstraint(name + \"@=\" + versionString)]);\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  projectContext.packageMapDelta.displayOnConsole({\n    title: \"Some package versions changed since this package was published!\"\n  });\n\n  var isopk = projectContext.isopackCache.getIsopack(name);\n  if (! isopk) {\n    throw Error(\"didn't build isopack for \" + name);\n  }\n\n  var conn;\n  try {\n    conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  main.captureAndExit(\n    \"=> Errors while publishing build:\",\n    (\"publishing package \" + name + \" for architecture \"\n     + isopk.buildArchitectures()),\n    function () {\n      packageClient.createAndPublishBuiltPackage(\n        conn, isopk, projectContext.isopackCache);\n    }\n  );\n\n  Console.info('Published ' + name + '@' + versionString + '.');\n\n  refreshOfficialCatalogOrDie();\n  return 0;\n});\n\nmain.registerCommand({\n  name: 'publish-release',\n  minArgs: 1,\n  maxArgs: 1,\n  options: {\n    'create-track': { type: Boolean },\n    'from-checkout': { type: Boolean }\n  },\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  var relConf = {};\n\n  // Let's read the json release file. It should, at the very minimum contain\n  // the release track name, the release version and some short freeform\n  // description.\n  try {\n    var data = files.readFile(options.args[0], 'utf8');\n    relConf = JSON.parse(data);\n  } catch (e) {\n    Console.error(\"Could not parse release file: \" + e.message);\n    return 1;\n  }\n\n  // Fill in the order key and any other generated release.json fields.\n  main.captureAndExit(\n    \"=> Errors in release schema:\",\n    \"double-checking release schema\",\n    function () {\n      // Check that the schema is valid -- release.json contains all the\n      // required fields, does not contain contradicting information, etc.\n      // XXX Check for unknown keys?\n      if (! _.has(relConf, 'track')) {\n        buildmessage.error(\n          \"Configuration file must specify release track. (track).\");\n      }\n      if (! _.has(relConf, 'version')) {\n        buildmessage.error(\n          \"Configuration file must specify release version. (version).\");\n      }\n      if (! _.has(relConf, 'description')) {\n        buildmessage.error(\n          \"Configuration file must contain a description (description).\");\n      } else if (relConf.description.length > 100) {\n        buildmessage.error(\"Description must be under 100 characters.\");\n      }\n      if (! options['from-checkout']) {\n        if (! _.has(relConf, 'tool')) {\n          buildmessage.error(\n            \"Configuration file must specify a tool version (tool) unless in \" +\n              \"--from-checkout mode.\");\n        }\n        if (! _.has(relConf, 'packages')) {\n          buildmessage.error(\n            \"Configuration file must specify package versions (packages) \" +\n              \"unless in --from-checkout mode.\");\n        }\n      }\n\n      // If you didn't specify an orderKey and it's compatible with our\n      // conventional orderKey generation algorithm, use the algorithm. If you\n      // explicitly specify orderKey: null, don't include one.\n      if (! _.has(relConf, 'orderKey')) {\n        relConf.orderKey = utils.defaultOrderKeyForReleaseVersion(\n          relConf.version);\n      }\n      // This covers both the case of \"explicitly specified {orderKey: null}\"\n      // and \"defaultOrderKeyForReleaseVersion returned null\".\n      if (relConf.orderKey === null) {\n        delete relConf.orderKey;\n      }\n\n      if (! _.has(relConf, 'orderKey') && relConf.recommended) {\n        buildmessage.error(\"Recommended releases must have order keys.\");\n      }\n      // On the main release track, we can't name the release anything beginning\n      // with 0.8 and below, because those are taken for pre-troposphere\n      // releases.\n      if ((relConf.track === catalog.DEFAULT_TRACK)) {\n        var start = relConf.version.slice(0,4);\n        if (start === \"0.8.\" || start === \"0.7.\" ||\n            start === \"0.6.\" || start === \"0.5.\") {\n          buildmessage.error(\n            \"It looks like you are trying to publish a pre-package-server \" +\n            \"meteor release. Doing this through the package server is going \" +\n            \"to cause a lot of confusion. Please use the old release process.\");\n        }\n      }\n    }\n  );\n\n  // Let's check if this is a known release track/ a track to which we are\n  // authorized to publish before we do any complicated/long operations, and\n  // before we publish its packages.\n  if (! options['create-track']) {\n    var trackRecord = catalog.official.getReleaseTrack(relConf.track);\n    if (!trackRecord) {\n      Console.error(\n        'There is no release track named ' + relConf.track +\n        '. If you are creating a new track, use the --create-track flag.');\n      return 1;\n    }\n\n    // Check with the server to see if we're organized (we can't due this\n    // locally due to organizations).\n    if (!packageClient.amIAuthorized(relConf.track,conn,  true)) {\n      Console.error('You are not an authorized maintainer of ' +\n                    relConf.track + \".\");\n      Console.error('Only authorized maintainers may publish new versions.');\n      return 1;\n    }\n  }\n\n  // This is sort of a hidden option to just take your entire meteor checkout\n  // and make a release out of it. That's what we do now (that's what releases\n  // meant pre-0.90), and it is very convenient to do that here.\n  //\n  // If you have any unpublished packages at new versions in your checkout, this\n  // WILL PUBLISH THEM at specified versions. (If you have unpublished changes,\n  // including changes to build-time dependencies, but have not incremented the\n  // version number, this will use buildmessage to error and exit.)\n  //\n  // Without any modifications about forks and package names, this particular\n  // option is not very useful outside of MDG. Right now, to run this option on\n  // a non-MDG fork of meteor, someone would probably need to go through and\n  // change the package names to have proper prefixes, etc.\n  if (options['from-checkout']) {\n    // You must be running from checkout to bundle up your checkout as a release.\n    if (!files.inCheckout()) {\n      Console.error(\"Must run from checkout to make release from checkout.\");\n      return 1;\n    };\n\n    // You should not use a release configuration with packages&tool *and* a\n    // from checkout option, at least for now. That's potentially confusing\n    // (which ones did you mean to use) and makes it likely that you did one of\n    // these by accident. So, we will disallow it for now.\n    if (relConf.packages || relConf.tool) {\n      Console.error(\n        \"Setting the --from-checkout option will use the tool and packages \" +\n        \"in your meteor checkout. \" +\n        \"Your release configuration file should not contain that information.\");\n      return 1;\n    }\n\n    // Set up a temporary project context and build everything.\n    var tempProjectDir = files.mkdtemp('meteor-release-build');\n    var projectContext = new projectContextModule.ProjectContext({\n      projectDir: tempProjectDir,  // won't have a packages dir, that's OK\n      // seriously, we only want checkout packages\n      ignorePackageDirsEnvVar: true,\n      // When we publish, we should always include web.cordova unibuilds, even\n      // though this temporary directory does not have any cordova platforms\n      forceIncludeCordovaUnibuild: true\n    });\n\n    // Read metadata and initialize catalog.\n    main.captureAndExit(\"=> Errors while building for release:\", function () {\n      projectContext.initializeCatalog();\n    });\n\n    // Ensure that all packages and their tests are built. (We need to build\n    // tests so that we can include their sources in source tarballs.)\n    var allPackagesWithTests = projectContext.localCatalog.getAllPackageNames();\n    var allPackages = projectContext.localCatalog.getAllNonTestPackageNames({\n      includeNonCore: false,\n    });\n    projectContext.projectConstraintsFile.addConstraints(\n      _.map(allPackagesWithTests, function (p) {\n        return utils.parsePackageConstraint(p);\n      })\n    );\n\n    // Build!\n    main.captureAndExit(\"=> Errors while building for release:\", function () {\n      projectContext.prepareProjectForBuild();\n    });\n    // No need to display the PackageMapDelta here, since it would include all\n    // of the packages!\n\n    relConf.packages = {};\n    var toPublish = [];\n\n    main.captureAndExit(\"=> Errors in release packages:\", function () {\n      _.each(allPackages, function (packageName) {\n        buildmessage.enterJob(\"checking consistency of \" + packageName, function () {\n          var packageSource = projectContext.localCatalog.getPackageSource(\n            packageName);\n          if (! packageSource) {\n            throw Error(\"no PackageSource for built package \" + packageName);\n          }\n\n          if (! packageSource.versionExplicitlyProvided) {\n            buildmessage.error(\n              \"A version must be specified for the package. Set it with \" +\n                \"Package.describe.\");\n            return;\n          }\n\n          // Let's get the server version that this local package is\n          // overwriting. If such a version exists, we will need to make sure\n          // that the contents are the same.\n          var oldVersionRecord = catalog.official.getVersion(\n            packageName, packageSource.version);\n\n          // Include this package in our release.\n          relConf.packages[packageName] = packageSource.version;\n\n          // If there is no old version, then we need to publish this package.\n          if (! oldVersionRecord) {\n            // We are going to check if we are publishing an official\n            // release. If this is an experimental or pre-release, then we are\n            // not ready to commit to these package semver versions either. Any\n            // packages that we should publish as part of this release should\n            // have a -(something) at the end.\n            var newVersion = packageSource.version;\n            if (! relConf.official && newVersion.split(\"-\").length < 2) {\n              buildmessage.error(\n                \"It looks like you are building an experimental release or \" +\n                  \"pre-release. Any packages we publish here should have an \" +\n                  \"pre-release identifier at the end (eg, 1.0.0-dev). If \" +\n                  \"this is an official release, please set official to true \" +\n                  \"in the release configuration file.\");\n              return;\n            }\n            toPublish.push(packageName);\n            Console.info(\"Will publish new version for \" + packageName);\n            return;\n          } else {\n            var isopk = projectContext.isopackCache.getIsopack(packageName);\n            if (! isopk) {\n              throw Error(\"no isopack for \" + packageName);\n            }\n\n            var existingBuild =\n                  catalog.official.getBuildWithPreciseBuildArchitectures(\n                    oldVersionRecord, isopk.buildArchitectures());\n\n            var somethingChanged;\n\n            if (! existingBuild) {\n              // If the version number mentioned in package.js exists,\n              // but there's no build of this architecture, then\n              // either the old version was only semi-published, or\n              // you've added some platform-specific dependencies but\n              // haven't bumped the version number yet; either way,\n              // you should probably bump the version number.\n              somethingChanged = true;\n            } else {\n              // Save the isopack, just to get its hash.\n              var bundleBuildResult = packageClient.bundleBuild(\n                isopk,\n                projectContext.isopackCache,\n              );\n\n              somethingChanged =\n                (bundleBuildResult.treeHash !== existingBuild.build.treeHash);\n            }\n\n            if (somethingChanged) {\n              buildmessage.error(\n                \"Something changed in package \" + packageName + \"@\" +\n                  isopk.version + \". Please upgrade its version number.\");\n            }\n          }\n        });\n      });\n    });\n\n    // We now have an object of packages that have new versions on disk that\n    // don't exist in the server catalog. Publish them.\n    var unfinishedBuilds = {};\n    _.each(toPublish, function (packageName) {\n      main.captureAndExit(\n        \"=> Errors while publishing:\",\n        \"publishing package \" + packageName,\n        function () {\n          var isopk = projectContext.isopackCache.getIsopack(packageName);\n          if (! isopk) {\n            throw Error(\"no isopack for \" + packageName);\n          }\n          var packageSource = projectContext.localCatalog.getPackageSource(\n            packageName);\n          if (! packageSource) {\n            throw Error(\"no PackageSource for built package \" + packageName);\n          }\n\n          var binary = isopk.platformSpecific();\n          packageClient.publishPackage({\n            projectContext: projectContext,\n            packageSource: packageSource,\n            connection: conn,\n            new: ! catalog.official.getPackage(packageName),\n            doNotPublishBuild: binary\n          });\n          if (buildmessage.jobHasMessages()) {\n            return;\n          }\n\n          Console.info(\n            'Published ' + packageName + '@' + packageSource.version + '.');\n\n          if (binary) {\n            unfinishedBuilds[packageName] = packageSource.version;\n          }\n        });\n    });\n\n    // Set the remaining release information. For now, when we publish from\n    // checkout, we always set 'meteor-tool' as the tool. We don't include the\n    // tool in the packages list.\n    relConf.tool=\"meteor-tool@\" + relConf.packages[\"meteor-tool\"];\n    delete relConf.packages[\"meteor-tool\"];\n  }\n\n  main.captureAndExit(\n    \"=> Errors while publishing release:\",\n    \"publishing release\",\n    function () {\n      // Create the new track, if we have been told to.\n      if (options['create-track']) {\n        // XXX maybe this job title should be left on the screen too?  some sort\n        // of enterJob/progress option that lets you do that?\n        buildmessage.enterJob(\"creating a new release track\", function () {\n          packageClient.callPackageServerBM(\n            conn, 'createReleaseTrack', { name: relConf.track } );\n        });\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n      }\n\n      buildmessage.enterJob(\"creating a new release version\", function () {\n        var record = {\n          track: relConf.track,\n          version: relConf.version,\n          orderKey: relConf.orderKey,\n          description: relConf.description,\n          recommended: !!relConf.recommended,\n          tool: relConf.tool,\n          packages: relConf.packages\n        };\n\n        if (relConf.patchFrom) {\n          packageClient.callPackageServerBM(\n            conn, 'createPatchReleaseVersion', record, relConf.patchFrom);\n        } else {\n          packageClient.callPackageServerBM(\n            conn, 'createReleaseVersion', record);\n        }\n      });\n    }\n  );\n\n  // Learn about it.\n  refreshOfficialCatalogOrDie();\n  Console.info(\"Done creating \" + relConf.track  + \"@\" + relConf.version + \"!\");\n  Console.info();\n\n  if (options['from-checkout']) {\n    // XXX maybe should discourage publishing if git status says we're dirty?\n    var gitTag = \"release/\" + relConf.track  + \"@\" + relConf.version;\n    if (config.getPackageServerFilePrefix() !== 'packages') {\n      // Only make a git tag if we're on the default branch.\n      Console.info(\"Skipping git tag: not using the main package server.\");\n    } else if (gitTag.indexOf(':') !== -1) {\n      // XXX could run `git check-ref-format --allow-onelevel $gitTag` like we\n      //     used to, instead of this simple check\n      // XXX could convert : to / ?\n      Console.info(\"Skipping git tag: bad format for git.\");\n    } else {\n      Console.info(\"Creating git tag \" + gitTag);\n      utils.runGitInCheckout('tag', gitTag);\n      var fail = false;\n      try {\n        Console.info(\n          \"Pushing git tag (this should fail if you are not from MDG)\");\n        utils.runGitInCheckout('push', 'git@github.com:meteor/meteor.git',\n                             'refs/tags/' + gitTag);\n      } catch (err) {\n        Console.error(\n          \"Failed to push git tag. Please push git tag manually!\");\n        fail = true;\n      }\n    }\n\n    // We need to warn the user that we didn't publish some of their\n    // packages. Unlike publish, this is advanced functionality, so the user\n    // should be familiar with the concept.\n    if (! _.isEmpty(unfinishedBuilds)) {\n      Console.warn();\n      Console.labelWarn(\n        \"Some packages contain binary dependencies.\");\n      Console.warn(\n          \"Builds have not been published for the following packages:\");\n      _.each(unfinishedBuilds, function (version, name) {\n        Console.warn(name + \"@\" + version);\n      });\n      // Note: we don't actually enforce the proper build machine thing. You\n      // can't use publish-for-arch for meteor-tool, for example, you need to\n      // use publish --existing-version and to do it from checkout. Setting that\n      // up on a build machine for a one-off experimental release could be a\n      // pain. In that case, I guess, you can just run publish\n      // --existing-version: presumably you don't care about compatibility\n      // etc. If it is an official release, you ought to use a build machine\n      // though.\n      Console.warn(\n        \"Please publish the builds separately, from a proper build machine.\");\n    }\n  }\n\n  return 0;\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// list\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'list',\n  requiresApp: true,\n  options: {\n    'allow-incompatible-update': { type: Boolean }\n  },\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: true })\n}, function (options) {\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  // No need to display the PackageMapDelta here, since we're about to list all\n  // of the packages anyway!\n\n\n  var items = [];\n  var newVersionsAvailable = false;\n  var anyBuiltLocally = false;\n\n  // Iterate over packages that are used directly by this app (not indirect\n  // dependencies).\n  projectContext.projectConstraintsFile.eachConstraint(function (constraint) {\n    var packageName = constraint.package;\n\n    // Skip isobuild:* pseudo-packages.\n    if (compiler.isIsobuildFeaturePackage(packageName)) {\n      return;\n    }\n\n    var mapInfo = projectContext.packageMap.getInfo(packageName);\n    if (! mapInfo) {\n      throw Error(\"no version for used package \" + packageName);\n    }\n    var versionRecord = projectContext.projectCatalog.getVersion(\n      packageName, mapInfo.version);\n    if (! versionRecord) {\n      throw Error(\"no version record for \" + packageName + \"@\" +\n                  mapInfo.version);\n    }\n\n    var versionAddendum = \" \";\n    if (mapInfo.kind === 'local') {\n      versionAddendum = \"+\";\n      anyBuiltLocally = true;\n    } else if (mapInfo.kind === 'versioned') {\n      if (getNewerVersion(packageName, mapInfo.version, catalog.official)) {\n        versionAddendum = \"*\";\n        newVersionsAvailable = true;\n      }\n    } else {\n      throw Error(\"unknown kind \" + mapInfo.kind);\n    }\n    var description = mapInfo.version + versionAddendum;\n    if (versionRecord.description) {\n      description += \" \" + versionRecord.description;\n    }\n    items.push({ name: packageName, description: description });\n  });\n\n  // Append extra information about special packages such as Cordova plugins\n  // to the list.\n  _.each(\n    projectContext.cordovaPluginsFile.getPluginVersions(),\n    function (version, name) {\n      items.push({ name: 'cordova:' + name, description: version });\n    }\n  );\n\n  utils.printPackageList(items);\n\n  if (newVersionsAvailable) {\n    Console.info();\n    Console.info(\n      \"New versions of these packages are available! Run\",\n      Console.command(\"'meteor update'\"), \"to try to update those\",\n      \"packages to their latest versions. If your packages cannot be\",\n      \"updated further, try typing\",\n      Console.command(\"`meteor add <package>@<newVersion>`\"),\n      \"to see more information.\",\n      Console.options({ bulletPoint: \"* \" }));\n  }\n  if (anyBuiltLocally) {\n    Console.info();\n    Console.info(\n      \"These packages are built locally from source.\",\n      Console.options({ bulletPoint: \"+ \" }));\n  }\n  return 0;\n});\n\nvar getNewerVersion = function (packageName, curVersion, whichCatalog) {\n  // Check to see if there are later versions available, returning the\n  // latest version if there are.\n  //\n  // If we are not using an rc for this package, then we are not going to\n  // update to an rc. But if we are using a pre-release version, then we\n  // care about other pre-release versions, and might want to update to a\n  // newer one.\n  //\n  // We depend on the fact that `curVersion` is in the database to know\n  // that we'll find something when we look in the catalog.\n  var latest;\n  if (/-/.test(curVersion)) {\n    latest = whichCatalog.getLatestVersion(packageName);\n  } else {\n    latest = whichCatalog.getLatestMainlineVersion(packageName);\n  }\n  if (! latest) {\n    // Shouldn't happen: we've chosen a published version of this package,\n    // so there has to be at least one in our database!\n    throw Error(\"no latest record for package where we have a version? \" +\n                packageName);\n  }\n\n  var latestVersion = latest.version;\n  if (curVersion !== latestVersion &&\n      // If we're currently running a prerelease, \"latest\" may be older than\n      // what we're at, so don't tell us we're outdated!\n      packageVersionParser.lessThan(curVersion, latestVersion)) {\n    return latestVersion;\n  } else {\n    return null;\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// update\n///////////////////////////////////////////////////////////////////////////////\n\n// Returns 0 if the operation went OK -- either we updated to a new release, or\n// decided not to with good reason. Returns something other than 0, if it is not\n// safe to proceed (ex: our release track is fundamentally unsafe or there is\n// weird catalog corruption).\nvar maybeUpdateRelease = function (options) {\n  // We are only updating packages, so we are not updating the release.\n  if (options[\"packages-only\"]) {\n     return 0;\n  }\n\n  // We are running from checkout, so we are not updating the release.\n  if (release.current && release.current.isCheckout()) {\n    Console.error(\n      \"You are running Meteor from a checkout, so we cannot update\",\n      \"the Meteor release. Checking to see if we can update your packages.\");\n    return 0;\n  }\n\n  // Looks like we are going to have to update the release. First, let's figure\n  // out the release track we'll end up on --- either because it's\n  // the explicitly specified (with --release) track; or because we didn't\n  // specify a release and it's the app's current release (if we're in an app\n  // dir), since non-forced updates don't change the track.\n\n  // XXX better error checking on release.current.name\n  // XXX add a method to release.current.\n  var releaseTrack = release.current ?\n        release.current.getReleaseTrack() : catalog.DEFAULT_TRACK;\n\n  // Unless --release was passed (in which case we ought to already have\n  // springboarded to that release), go get the latest release and switch to\n  // it. (We already know what the latest release is because we refreshed the\n  // catalog above.)  Note that after springboarding, we will hit this again.\n  // However, the override that's done by SpringboardToLatestRelease also sets\n  // release.forced (although it does not set release.explicit), so we won't\n  // double-springboard.  (We might miss an super recently published release,\n  // but that's probably OK.)\n  if (! release.forced) {\n    var latestRelease = release.latestKnown(releaseTrack);\n\n    // Are we on some track without ANY recommended releases at all,\n    // and the user ran 'meteor update' without specifying a release? We\n    // really can't do much here.\n    if (!latestRelease) {\n      Console.error(\n        \"There are no recommended releases on release track \" +\n          releaseTrack + \".\");\n      return 1;\n    }\n\n    if (release.current && ! release.current.isRecommended() &&\n        options.appDir && ! options.patch) {\n      var releaseVersion = release.current.getReleaseVersion();\n      var newerRecommendedReleases = getLaterReleaseVersions(\n        releaseTrack, releaseVersion);\n      if (!newerRecommendedReleases.length) {\n        // When running 'meteor update' without --release in an app,\n        // using a release that is not recommended and is newer than\n        // any recommended release, don't springboard backwards to\n        // an older, recommended release.  Don't update Meteor, or\n        // the app's release.  This makes it possible to type `meteor update`\n        // with no arguments from a new RC of Meteor, without performing\n        // the update (and subsequent constraint-solving, etc.) using\n        // the old tool.\n        //\n        // We'll still springboard forwards out of an RC, just not backwards.\n        // There still has a possibility of already on the latest.\n        if (release.current.name === latestRelease) {\n          Console.info(\"Already on the latest recommended release \" +\n                      \"(\" + latestRelease + \"). Not updating.\");\n        } else {\n          Console.info(\"Not updating the release, because this app is at a \" +\n                      \"newer release (\" + release.current.name + \") than \" +\n                      \"the latest recommended release \" +\n                      \"(\" + latestRelease + \").\");\n        }\n        return 0;\n      }\n    }\n\n    if (! release.current || release.current.name !== latestRelease) {\n      // The user asked for the latest release (well, they \"asked for it\" by not\n      // passing --release). We're not currently running the latest release on\n      // this track (we may have even just learned about it). #UpdateSpringboard\n      throw new main.SpringboardToLatestRelease(releaseTrack);\n    }\n  }\n\n  // At this point we should have a release. (If we didn't to start\n  // with, #UpdateSpringboard fixed that.) And it can't be a checkout,\n  // because we checked for that at the very beginning.\n  if (! release.current || ! release.current.isProperRelease()) {\n    throw new Error(\"don't have a proper release?\");\n  }\n\n  updateMeteorToolSymlink(true);\n\n  // If we're not in an app, then we're basically done. The only thing left to\n  // do is print out some messages explaining what happened (and advising the\n  // user to run update from an app).\n  if (! options.appDir) {\n    if (release.forced) {\n      // We get here if:\n      // 1) the user ran 'meteor update' and we found a new version\n      // 2) the user ran 'meteor update --release xyz' (regardless of\n      //    whether we found a new release)\n      //\n      // In case (1), we downloaded and installed the update and then\n      // we springboarded (at #UpdateSpringboard above), causing\n      // $METEOR_SPRINGBOARD_RELEASE to be true.\n      // XXX probably should have a better interface than looking directly\n      //     at the env var here\n      //\n      // In case (2), we downloaded, installed, and springboarded to\n      // the requested release in the initialization code, before the\n      // command even ran. They could equivalently have run 'meteor\n      // help --release xyz'.\n      Console.info(\n        \"Installed. Run\",\n        Console.command(\n          \"'meteor update --release \" +\n            release.current.getDisplayName({ noPrefix: true }) + \"'\"),\n        \"inside of a particular project directory to update that project to\",\n        release.current.getDisplayName() + \".\");\n    } else {\n      // We get here if the user ran 'meteor update' and we didn't\n      // find a new version.\n      Console.info(\n        \"The latest version of Meteor, \" + release.current.getReleaseVersion() +\n        \", is already installed on this computer. Run \" +\n        Console.command(\"'meteor update'\") + \" inside of a particular \" +\n        \"project directory to update that project to \" +\n        release.current.getDisplayName());\n    }\n    return 0;\n  }\n\n  // Otherwise, we have to upgrade the app too, if the release changed.  Read in\n  // the project metadata files.  (Don't resolve constraints yet --- if the\n  // current constraints don't resolve but we can update to a place where they\n  // do, that's great!)\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    alwaysWritePackageMap: true,\n    allowIncompatibleUpdate: true // disregard `.meteor/versions` if necessary\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.readProjectMetadata();\n  });\n\n  if (projectContext.releaseFile.fullReleaseName === release.current.name) {\n    // release.explicit here means that the user actually typed `--release FOO`,\n    // so they weren't trying to go to the latest release. (This is different\n    // from release.forced, which might be set due to the\n    // SpringboardToLatestRelease above.)\n    var maybeTheLatestRelease = release.explicit ? \"\" : \", the latest release\";\n    Console.info(\n      \"This project is already at \" +\n      release.current.getDisplayName() + maybeTheLatestRelease + \".\");\n    return 0;\n  }\n\n  // XXX did we have to change some package versions? we should probably\n  //     mention that fact.\n  // XXX error handling.\n\n  // Previously we attempted to figure out the newest release that is compatible\n  // with the users non-core version constraints. Now we simply update them\n  // to the newest and if they get a conflict, they are left with a\n  // .meteor/packages to work on to get a resolution (with more useful info)\n\n  var releaseVersion;\n  if (options.patch) {\n    // Can't make a patch update if you are not running from a current\n    // release. In fact, you are doing something wrong, so we should tell you\n    // to stop.\n    if (! projectContext.releaseFile.normalReleaseSpecified()) {\n      Console.error(\n        \"Cannot patch update unless a release is set.\");\n      return 1;\n    }\n    var record = catalog.official.getReleaseVersion(\n      projectContext.releaseFile.releaseTrack,\n      projectContext.releaseFile.releaseVersion);\n    if (!record) {\n      Console.error(\n        \"Cannot update to a patch release from an old release.\");\n      return 1;\n    }\n    var updateTo = record.patchReleaseVersion;\n    if (!updateTo) {\n      Console.error(\n        \"You are at the latest patch version.\");\n      return 0;\n    }\n    var patchRecord = catalog.official.getReleaseVersion(\n      projectContext.releaseFile.releaseTrack, updateTo);\n    // It looks like you are not at the latest patch version,\n    // technically. But, in practice, we cannot update you to the latest patch\n    // version because something went wrong. For example, we can't find the\n    // record for your patch version (probably some sync\n    // failure). Alternatively, maybe we put out a patch release and found a\n    // bug in it -- since we tell you to always run update --patch, we should\n    // not try to patch you to an unfriendly release. So, either way, as far\n    // as we are concerned you are at the 'latest patch version'\n    if (!patchRecord || !patchRecord.recommended ) {\n      Console.error(\"You are at the latest patch version.\");\n      return 0;\n    }\n    // Great, we found a patch version. You can only have one latest patch for\n    // a string of releases, so there is just one release to try.\n    releaseVersion = updateTo;\n  } else if (release.explicit) {\n    // You have explicitly specified a release, and we have springboarded to\n    // it. So, we will use that release to update you to itself, if we can.\n    releaseVersion = release.current.getReleaseVersion();\n  } else {\n    // We are not doing a patch update, or a specific release update, so we need\n    // to try all recommended releases on our track, whose order key is greater\n    // than the app's.\n    releaseVersion = getLaterReleaseVersions(\n      projectContext.releaseFile.releaseTrack,\n      projectContext.releaseFile.releaseVersion)[0];\n\n    if (! releaseVersion) {\n      // We could not find any releases newer than the one that we are on, on\n      // that track, so we are done.\n      Console.info(\n        \"This project is already at \" +\n        Console.noWrap(projectContext.releaseFile.displayReleaseName) +\n        \", which is newer than the latest release.\");\n      return 0;\n    }\n  }\n\n  var releaseName = `${releaseTrack}@${releaseVersion}`;\n\n  // We could at this point springboard to solutionRelease (which is no newer\n  // than the release we are currently running), but there's no super-clear\n  // advantage to this yet. The main reason might be if we decide to delete some\n  // backward-compatibility code which knows how to deal with an older release,\n  // but if we actually do that, we can change this code to add the extra\n  // springboard at that time.\n  var upgraders = require('../upgraders.js');\n  var upgradersToRun = upgraders.upgradersToRun(projectContext);\n\n  // Update every package in .meteor/packages to be (semver)>= the version\n  // set for that package in the release we are updating to\n  var releaseRecord = catalog.official.getReleaseVersion(releaseTrack, releaseVersion);\n  projectContext.projectConstraintsFile.updateReleaseConstraints(releaseRecord);\n\n  // Download and build packages and write the new versions to .meteor/versions.\n  // XXX It's a little weird that we do a full preparation for build\n  //     (downloading packages, building packages, etc) when we might be about\n  //     to upgrade packages and have to do it again. Maybe we shouldn't? Note\n  //     that if we change this, that changes the upgraders interface, which\n  //     expects a projectContext that is fully prepared for build.\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n\n  projectContext.writeReleaseFileAndDevBundleLink(releaseName);\n\n  projectContext.packageMapDelta.displayOnConsole({\n    title: (\"Changes to your project's package version selections from \" +\n            \"updating the release:\")\n  });\n\n  Console.info(files.pathBasename(options.appDir) + \": updated to \" +\n               projectContext.releaseFile.displayReleaseName + \".\");\n\n  // Now run the upgraders.\n  // XXX should we also run upgraders on other random commands, in case there\n  // was a crash after changing .meteor/release but before running them?\n  _.each(upgradersToRun, function (upgrader) {\n    upgraders.runUpgrader(projectContext, upgrader);\n    projectContext.finishedUpgraders.appendUpgraders([upgrader]);\n  });\n\n  // We are done, and we should pass the release that we upgraded to, to the\n  // user.\n  return 0;\n};\n\nfunction getLaterReleaseVersions(releaseTrack, releaseVersion) {\n  var releaseInfo = catalog.official.getReleaseVersion(\n    releaseTrack, releaseVersion);\n  var orderKey = (releaseInfo && releaseInfo.orderKey) || null;\n\n  return catalog.official.getSortedRecommendedReleaseVersions(\n    releaseTrack, orderKey);\n}\n\nmain.registerCommand({\n  name: 'update',\n  options: {\n    patch: { type: Boolean },\n    \"packages-only\": { type: Boolean },\n    \"allow-incompatible-update\": { type: Boolean },\n    \"all-packages\": { type: Boolean }\n  },\n  // We have to be able to work without a release, since 'meteor\n  // update' is how you fix apps that don't have a release.\n  requiresRelease: false,\n  minArgs: 0,\n  maxArgs: Infinity,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: true })\n}, function (options) {\n  // If you are specifying packages individually, you probably don't want to\n  // update the release.\n  if (options.args.length > 0) {\n    // In the case that user specified the package but not in a app.\n    if (! options.appDir) {\n      Console.error(\"You're not in a Meteor project directory.\");\n      return 1;\n    }\n    options[\"packages-only\"] = true;\n  }\n\n  // Some basic checks to make sure that this command is being used correctly.\n  if (options[\"packages-only\"] && options[\"patch\"]) {\n    Console.error(\n      \"The --patch option only applies to the release, not packages.\");\n    return 1;\n  }\n\n  if (release.explicit && options[\"patch\"]) {\n    Console.error(\"You cannot patch update to a specific release.\");\n    return 1;\n  }\n\n  var releaseUpdateStatus = maybeUpdateRelease(options);\n  // If we encountered an error and cannot proceed, return.\n  if (releaseUpdateStatus !== 0) {\n    return releaseUpdateStatus;\n  }\n\n  // The only thing left to do is update packages, and we don't update packages\n  // if we are making a patch update, updating specifically with a --release, or\n  // running outside a package directory. So, we are done, return.\n  if (options['patch'] || release.explicit || !options.appDir) {\n    return 0;\n  }\n\n  // Start a new project context and read in the project's release and other\n  // metadata. (We also want to make sure that we write the package map when\n  // we're done even if we're not on the matching release!)\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    alwaysWritePackageMap: true,\n    allowIncompatibleUpdate: options[\"allow-incompatible-update\"]\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.readProjectMetadata();\n  });\n\n  // If no packages have been specified, then we will send in a request to\n  // update all direct dependencies. If a specific list of packages has been\n  // specified, then only upgrade those.\n  var upgradePackageNames = [];\n  // If no packages have been specified (`meteor update` with no positional\n  // args), take patches to indirect dependencies.\n  var upgradeIndirectDepPatchVersions = false;\n  if (options.args.length === 0) {\n    // \"all-packages\" means update every package we depend on. The default\n    // is to tend to leave indirect dependencies (i.e. things not listed in\n    // `.meteor/packages`) alone.\n    if (options[\"all-packages\"]) {\n      upgradePackageNames = _.filter(\n        _.keys(projectContext.packageMapFile.getCachedVersions()),\n        packageName => ! compiler.isIsobuildFeaturePackage(packageName)\n      );\n    }\n\n    if (upgradePackageNames.length === 0) {\n      projectContext.projectConstraintsFile.eachConstraint(function (constraint) {\n        if (! compiler.isIsobuildFeaturePackage(constraint.package)) {\n          upgradePackageNames.push(constraint.package);\n        }\n      });\n    }\n\n    upgradeIndirectDepPatchVersions = true;\n\n  } else {\n    if (options[\"all-packages\"]) {\n      Console.error(\"You cannot both specify a list of packages to\"\n       + \" update and pass --all-packages.\");\n       exit(1)\n    }\n\n    upgradePackageNames = options.args;\n  }\n\n  const upgradePackagesWithoutCordova =\n    upgradePackageNames.filter(name => name.split(':')[0] !== 'cordova');\n  if (!_.isEqual(upgradePackagesWithoutCordova, upgradePackageNames)) {\n    // There are some cordova packages in the list to update.\n    // We should tell users how to update cordova packages.\n    Console.warn();\n    Console.warn(\"To add/upgrade a Cordova plugin in your Meteor project, run:\");\n    Console.warn();\n    Console.warn(\n      Console.command(\"meteor add cordova:PLUGIN-NAME@x.y.z\"),\n      Console.options({ indent: 2 }));\n    Console.warn();\n    Console.warn(\"The 'PLUGIN-NAME' should be an official plugin name\",\n      \"(e.g. cordova-plugin-media) and the 'x.y.z' should be an available version of\",\n      \"the plugin. The latest version can be found with the following command:\");\n    Console.warn();\n    Console.warn(\n      Console.command(\"meteor npm view PLUGIN-NAME version\"),\n      Console.options({ indent: 2 }));\n    if (upgradePackagesWithoutCordova.length !== 0) {\n      Console.warn();\n      Console.warn('The non-Cordova packages will now be updated...');\n    }\n    Console.warn();\n    // Exclude cordova packages\n    upgradePackageNames = upgradePackagesWithoutCordova;\n  }\n\n  // Try to resolve constraints, allowing the given packages to be upgraded.\n  projectContext.reset({\n    upgradePackageNames: upgradePackageNames,\n    upgradeIndirectDepPatchVersions: upgradeIndirectDepPatchVersions\n  });\n  main.captureAndExit(\n    \"=> Errors while upgrading packages:\", \"upgrading packages\", function () {\n      projectContext.resolveConstraints();\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // If the user explicitly mentioned some packages to upgrade, they must\n      // actually end up in our solution!\n      if (options.args.length !== 0) {\n        _.each(upgradePackageNames, function (packageName) {\n          if (! projectContext.packageMap.getInfo(packageName)) {\n            buildmessage.error(packageName + ': package is not in the project');\n          }\n        });\n      }\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Finish preparing the project.\n      projectContext.prepareProjectForBuild();\n    }\n  );\n\n  if (projectContext.packageMapDelta.hasChanges()) {\n    projectContext.packageMapDelta.displayOnConsole({\n      title: (\"Changes to your project's package version selections from \" +\n              \"updating package versions:\")\n    });\n  } else if (options.args.length) {\n    Console.info(\n      \"The specified packages are at their latest compatible versions.\");\n  } else {\n    Console.info(\n      \"Your top-level dependencies are at their latest compatible versions.\");\n  }\n\n  if (!options.args.length) {\n    // Generate and print info about what is NOT at the latest version.\n\n    var topLevelPkgSet = {}; // direct dependencies (rather than indirect)\n    projectContext.projectConstraintsFile.eachConstraint(function (constraint) {\n      topLevelPkgSet[constraint.package] = true;\n    });\n\n    var nonlatestDirectDeps = [];\n    var nonlatestIndirectDeps = [];\n    projectContext.packageMap.eachPackage(function (name, info) {\n      var selectedVersion = info.version;\n      var catalog = projectContext.projectCatalog;\n      var latestVersion = getNewerVersion(name, selectedVersion, catalog);\n      if (latestVersion) {\n        var rec = { name: name, selectedVersion: selectedVersion,\n                    latestVersion: latestVersion };\n        if (_.has(topLevelPkgSet, name)) {\n          nonlatestDirectDeps.push(rec);\n        } else {\n          nonlatestIndirectDeps.push(rec);\n        }\n      }\n    });\n    var printItem = function (rec) {\n      Console.info(\" * \" + rec.name + \" \" + rec.selectedVersion +\n                   \" (\" + rec.latestVersion + \" is available)\");\n    };\n    if (nonlatestDirectDeps.length) {\n      Console.info(\"\\nThe following top-level dependencies were not updated \" +\n                   \"to the very latest version available:\");\n      _.each(nonlatestDirectDeps, printItem);\n    }\n    if (nonlatestIndirectDeps.length) {\n      Console.info(\"\\nNewer versions of the following indirect dependencies\" +\n                   \" are available:\");\n      _.each(nonlatestIndirectDeps, printItem);\n      Console.info([\n        \"To update one or more of these packages, pass their names to \",\n        \"`meteor update`, or just run `meteor update --all-packages`.\"\n      ].join(\"\\n\"));\n    }\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// admin run-upgrader\n///////////////////////////////////////////////////////////////////////////////\n\n// For testing upgraders during development.\nmain.registerCommand({\n  name: 'admin run-upgrader',\n  hidden: true,\n  minArgs: 1,\n  maxArgs: 1,\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never(),\n  'allow-incompatible-update': { type: Boolean }\n}, function (options) {\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  projectContext.packageMapDelta.displayOnConsole();\n\n  var upgrader = options.args[0];\n\n  var upgraders = require('../upgraders.js');\n  console.log(\"%s: running upgrader %s.\",\n              files.pathBasename(options.appDir), upgrader);\n  upgraders.runUpgrader(projectContext, upgrader);\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// admin run-background-updater\n///////////////////////////////////////////////////////////////////////////////\n\n// For testing the background updater during development.\nmain.registerCommand({\n  name: 'admin run-background-updater',\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.Never()\n}, function (options) {\n  updater.tryToDownloadUpdate({\n    showBanner: true,\n    printErrors: true\n  });\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// admin wipe-all-packages\n///////////////////////////////////////////////////////////////////////////////\n\n// For testing wipeAllPackages during development\nmain.registerCommand({\n  name: 'admin wipe-all-packages',\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.Never()\n}, function (options) {\n  tropohouse.default.wipeAllPackages();\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// admin check-package-versions\n///////////////////////////////////////////////////////////////////////////////\n\n// Run before publish-release --from-checkout to make sure that all of our\n// version numbers are up to date\nmain.registerCommand({\n  name: 'admin check-package-versions',\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  if (!files.inCheckout()) {\n    Console.error(\"Must run from checkout.\");\n    return 1;\n  };\n\n  // Set up a temporary project context and build everything.\n  var tempProjectDir = files.mkdtemp('meteor-release-build');\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: tempProjectDir,  // won't have a packages dir, that's OK\n    // seriously, we only want checkout packages\n    ignorePackageDirsEnvVar: true,\n    // When we publish, we should always include web.cordova unibuilds, even\n    // though this temporary directory does not have any cordova platforms\n    forceIncludeCordovaUnibuild: true\n  });\n\n  // Read metadata and initialize catalog.\n  main.captureAndExit(\"=> Errors while building for release:\", function () {\n    projectContext.initializeCatalog();\n  });\n\n  var allPackages = projectContext.localCatalog.getAllNonTestPackageNames();\n\n  Console.info(\"Listing packages where the checkout version doesn't match the\",\n    \"latest version on the package server.\");\n\n  _.each(allPackages, function (packageName) {\n    var checkoutVersion = projectContext.localCatalog.getLatestVersion(packageName).version;\n    var remoteLatestVersion = catalog.official.getLatestVersion(packageName).version;\n\n    if (checkoutVersion !== remoteLatestVersion) {\n      Console.info(packageName, checkoutVersion, remoteLatestVersion);\n    }\n  });\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// add\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'add',\n  options: {\n    \"allow-incompatible-update\": { type: Boolean }\n  },\n  minArgs: 1,\n  maxArgs: Infinity,\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: true })\n}, function (options) {\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options[\"allow-incompatible-update\"]\n  });\n\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    // We're just reading metadata here --- we're not going to resolve\n    // constraints until after we've made our changes.\n    projectContext.initializeCatalog();\n  });\n\n  let exitCode = 0;\n\n  // Split arguments into Cordova plugins and packages\n  const { plugins: pluginsToAdd, packages: packagesToAdd } =\n    cordova.splitPluginsAndPackages(options.args);\n\n  if (!_.isEmpty(pluginsToAdd)) {\n    let plugins = projectContext.cordovaPluginsFile.getPluginVersions();\n    let changed = false;\n\n    for (target of pluginsToAdd) {\n      let [id, version] = target.split('@');\n\n      const newId = cordova.newPluginId(id);\n\n      if (!(version && utils.isValidVersion(version, {forCordova: true}))) {\n        Console.error(`${id}: Meteor requires either an exact version \\\n(e.g. ${id}@1.0.0), a Git URL with a SHA reference, or a local path.`);\n        exitCode = 1;\n      } else if (newId) {\n        plugins[newId] = version;\n        Console.info(`Added Cordova plugin ${newId}@${version} \\\n(plugin has been renamed as part of moving to npm).`);\n        changed = true;\n      } else {\n        plugins[id] = version;\n        Console.info(`Added Cordova plugin ${id}@${version}.`);\n        changed = true;\n      }\n    }\n\n    changed && projectContext.cordovaPluginsFile.write(plugins);\n  }\n\n  if (_.isEmpty(packagesToAdd)) {\n    return exitCode;\n  }\n\n  // Messages that we should print if we make any changes, but that don't count\n  // as errors.\n  var infoMessages = [];\n  var constraintsToAdd = [];\n  // For every package name specified, add it to our list of package\n  // constraints. Don't run the constraint solver until you have added all of\n  // them -- add should be an atomic operation regardless of the package\n  // order.\n  var messages = buildmessage.capture(function () {\n    _.each(packagesToAdd, function (packageReq) {\n      buildmessage.enterJob(\"adding package \" + packageReq, function () {\n        var constraint = utils.parsePackageConstraint(packageReq, {\n          useBuildmessage: true\n        });\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n\n        // It's OK to make errors based on looking at the catalog, because this\n        // is a OnceAtStart command.\n        var packageRecord = projectContext.projectCatalog.getPackage(\n          constraint.package);\n        if (! packageRecord) {\n          buildmessage.error(\"no such package\");\n          return;\n        }\n\n        _.each(constraint.versionConstraint.alternatives, function (subConstr) {\n          if (subConstr.versionString === null) {\n            return;\n          }\n          // Figure out if this version exists either in the official catalog or\n          // the local catalog. (This isn't the same as using the combined\n          // catalog, since it's OK to type \"meteor add foo@1.0.0\" if the local\n          // package is 1.1.0 as long as 1.0.0 exists.)\n          var versionRecord = projectContext.localCatalog.getVersion(\n            constraint.package, subConstr.versionString);\n          if (! versionRecord) {\n            // XXX #2846 here's an example of something that might require a\n            // refresh\n            versionRecord = catalog.official.getVersion(\n              constraint.package, subConstr.versionString);\n          }\n          if (! versionRecord) {\n            buildmessage.error(\"no such version \" + constraint.package + \"@\" +\n                               subConstr.versionString);\n          }\n        });\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n\n        var current = projectContext.projectConstraintsFile.getConstraint(\n          constraint.package);\n\n        // Check that the constraint is new. If we are already using the package\n        // at the same constraint in the app, we will log an info message later\n        // (if there are no other errors), but don't fail. Rejecting the entire\n        // command because a part of it is a no-op is confusing.\n        if (! current) {\n          constraintsToAdd.push(constraint);\n        } else if (! current.constraintString &&\n                   ! constraint.constraintString) {\n          infoMessages.push(\n            constraint.package +\n              \" without a version constraint has already been added.\");\n        } else if (current.constraintString === constraint.constraintString) {\n          infoMessages.push(\n            constraint.package + \" with version constraint \" +\n              constraint.constraintString + \" has already been added.\");\n        } else {\n          // We are changing an existing constraint.\n          if (current.constraintString) {\n            infoMessages.push(\n              \"Currently using \" + constraint.package +\n                \" with version constraint \" + current.constraintString + \".\");\n          } else {\n            infoMessages.push(\n              \"Currently using \" +  constraint.package +\n                \" without any version constraint.\");\n          }\n          if (constraint.constraintString) {\n            infoMessages.push(\"The version constraint will be changed to \" +\n                              constraint.constraintString + \".\");\n          } else {\n            infoMessages.push(\"The version constraint will be removed.\");\n          }\n          constraintsToAdd.push(constraint);\n        }\n      });\n    });\n  });\n  if (messages.hasMessages()) {\n    Console.arrowError(\"Errors while parsing arguments:\", 1);\n    Console.printMessages(messages);\n    catalogUtils.explainIfRefreshFailed();  // this is why we're not using captureAndExit\n    return 1;\n  }\n\n  projectContext.projectConstraintsFile.addConstraints(constraintsToAdd);\n\n  // Run the constraint solver, download packages, etc.\n  messages = buildmessage.capture(function () {\n    projectContext.prepareProjectForBuild();\n  });\n  if (messages.hasMessages()) {\n    Console.arrowError(\"Errors while adding packages:\", 1);\n    Console.printMessages(messages);\n    catalogUtils.explainIfRefreshFailed();  // this is why we're not using captureAndExit\n    return 1;\n  }\n\n  _.each(infoMessages, function (message) {\n    Console.info(message);\n  });\n  projectContext.packageMapDelta.displayOnConsole();\n\n  // Show descriptions of directly added packages.\n  Console.info();\n  _.each(constraintsToAdd, function (constraint) {\n    var version = projectContext.packageMap.getInfo(constraint.package).version;\n    var versionRecord = projectContext.projectCatalog.getVersion(\n      constraint.package, version);\n    Console.info(\n      constraint.package +\n        (versionRecord.description ? (\": \" + versionRecord.description) : \"\"));\n  });\n\n  return exitCode;\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// remove\n///////////////////////////////////////////////////////////////////////////////\nmain.registerCommand({\n  name: 'remove',\n  options: {\n    \"allow-incompatible-update\": { type: Boolean }\n  },\n  minArgs: 1,\n  maxArgs: Infinity,\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never()\n}, function (options) {\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options[\"allow-incompatible-update\"]\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    // We're just reading metadata here --- we're not going to resolve\n    // constraints until after we've made our changes.\n    projectContext.readProjectMetadata();\n  });\n\n  let exitCode = 0;\n\n  // Split arguments into Cordova plugins and packages\n  const { plugins: pluginsToRemove, packages }  =\n    cordova.splitPluginsAndPackages(options.args);\n\n  if (!_.isEmpty(pluginsToRemove)) {\n    let plugins = projectContext.cordovaPluginsFile.getPluginVersions();\n    let changed = false;\n\n    for (id of pluginsToRemove) {\n      const newId = cordova.newPluginId(id);\n\n      if (/@/.test(id)) {\n        Console.error(`${id}: do not specify version constraints.`);\n        exitCode = 1;\n      } else if (_.has(plugins, id)) {\n        delete plugins[id];\n        Console.info(`Removed Cordova plugin ${id}.`);\n        changed = true;\n      } else if (newId && _.has(plugins, newId)) {\n        delete plugins[newId];\n        Console.info(`Removed Cordova plugin ${newId} \\\n(plugin has been renamed as part of moving to npm).`);\n        changed = true;\n      } else {\n        Console.error(`Cordova plugin ${id} is not in this project.`);\n        exitCode = 1;\n      }\n    }\n\n    changed && projectContext.cordovaPluginsFile.write(plugins);\n  }\n\n  if (_.isEmpty(packages)) {\n    return exitCode;\n  }\n\n  // For each package name specified, check if we already have it and warn the\n  // user. Because removing each package is a completely atomic operation that\n  // has no chance of failure, this is just a warning message, it doesn't cause\n  // us to stop.\n  let packagesToRemove = [];\n  _.each(packages, function (packageName) {\n    if (/@/.test(packageName)) {\n      Console.error(packageName + \": do not specify version constraints.\");\n      exitCode = 1;\n    } else if (! projectContext.projectConstraintsFile.getConstraint(packageName)) {\n      // Check that we are using the package. We don't check if the package\n      // exists. You should be able to remove non-existent packages.\n      Console.error(packageName  + \" is not a direct dependency in this project.\");\n      exitCode = 1;\n    } else {\n      packagesToRemove.push(packageName);\n    }\n  });\n  if (! packagesToRemove.length) {\n    return exitCode;\n  }\n\n  // Remove the packages from the in-memory representation of .meteor/packages.\n  projectContext.projectConstraintsFile.removePackages(packagesToRemove);\n\n  // Run the constraint solver, rebuild local packages, etc. This will write\n  // our changes to .meteor/packages if it succeeds.\n  main.captureAndExit(\"=> Errors after removing packages\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  projectContext.packageMapDelta.displayOnConsole();\n\n  // Log that we removed the constraints. It is possible that there are\n  // constraints that we officially removed that the project still 'depends' on,\n  // which is why we do this in addition to dislpaying the PackageMapDelta.\n  _.each(packagesToRemove, function (packageName) {\n    Console.info(packageName + \": removed dependency\");\n  });\n\n  return exitCode;\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// refresh\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'refresh',\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  // We already did it!\n  return 0;\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// admin\n///////////////////////////////////////////////////////////////////////////////\n\n// For admin commands, at least in preview0.90, we can be kind of lazy and not bother\n// to pre-check if the command will succeed client-side. That's because we both\n// don't expect them to be called often and don't expect them to be called by\n// inexperienced users, so waiting to get rejected by the server is OK.\n\nmain.registerCommand({\n  name: 'admin maintainers',\n  minArgs: 1,\n  maxArgs: 1,\n  options: {\n    add: { type: String, short: \"a\" },\n    remove: { type: String, short: \"r\" },\n    list: { type: Boolean }\n  },\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  var name = options.args[0];\n\n  // Yay, checking that options are correct.\n  if (options.add && options.remove) {\n    Console.error(\n      \"Sorry, you can only add or remove one user at a time.\");\n    return 1;\n  }\n  if ((options.add || options.remove) && options.list) {\n    Console.error(\n      \"Sorry, you can't change the users at the same time as you're\",\n      \"listing them.\");\n    return 1;\n  }\n\n  // Now let's get down to business! Fetching the thing.\n  var fullRecord = getReleaseOrPackageRecord(name);\n  var record = fullRecord.record;\n  if (!options.list) {\n\n    try {\n      var conn = packageClient.loggedInPackagesConnection();\n    } catch (err) {\n      packageClient.handlePackageServerConnectionError(err);\n      return 1;\n    }\n\n    try {\n      if (options.add) {\n        Console.info(\"Adding a maintainer to \" + name + \"...\");\n        if (fullRecord.release) {\n          packageClient.callPackageServer(\n            conn, 'addReleaseMaintainer', name, options.add);\n        } else {\n          packageClient.callPackageServer(\n            conn, 'addMaintainer', name, options.add);\n        }\n      } else if (options.remove) {\n        Console.info(\"Removing a maintainer from \" + name + \"...\");\n        if (fullRecord.release) {\n          packageClient.callPackageServer(\n            conn, 'removeReleaseMaintainer', name, options.remove);\n        } else {\n          packageClient.callPackageServer(\n            conn, 'removeMaintainer', name, options.remove);\n        }\n        Console.info(\"Success.\");\n      }\n    } catch (err) {\n      packageClient.handlePackageServerConnectionError(err);\n      return 1;\n    }\n    conn.close();\n\n    // Update the catalog so that we have this information, and find the record\n    // again so that the message below is correct.\n    refreshOfficialCatalogOrDie();\n    fullRecord = getReleaseOrPackageRecord(name);\n    record = fullRecord.record;\n  }\n\n  if (!record) {\n    Console.info(\n      \"Could not get list of maintainers:\",\n      \"package \" + name + \" does not exist.\");\n    return 1;\n  }\n\n  Console.info();\n  Console.info(\"The maintainers for \" + name + \" are:\");\n  _.each(record.maintainers, function (user) {\n    if (! user || !user.username) {\n      Console.rawInfo(\"<unknown>\" + \"\\n\");\n    } else {\n      Console.rawInfo(user.username + \"\\n\");\n    }\n  });\n  return 0;\n});\n\n ///////////////////////////////////////////////////////////////////////////////\n// admin make-bootstrap-tarballs\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'admin make-bootstrap-tarballs',\n  minArgs: 2,\n  maxArgs: 2,\n  hidden: true,\n\n  options: {\n    // Copy the tarball contents to the output directory instead of making a\n    // tarball (useful for testing the release process)\n    \"unpacked\": { type: Boolean },\n    // Build a tarball only for a specific arch\n    \"target-arch\": { type: String }\n  },\n\n  // In this function, we want to use the official catalog everywhere, because\n  // we assume that all packages have been published (along with the release\n  // obviously) and we want to be sure to only bundle the published versions.\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  var releaseNameAndVersion = options.args[0];\n\n  // We get this as an argument, so it is an OS path. Make it a standard path.\n  var outputDirectory = files.convertToStandardPath(options.args[1]);\n\n  var trackAndVersion = catalogUtils.splitReleaseName(releaseNameAndVersion);\n  var releaseTrack = trackAndVersion[0];\n  var releaseVersion = trackAndVersion[1];\n\n  var releaseRecord = catalog.official.getReleaseVersion(\n    releaseTrack, releaseVersion);\n  if (!releaseRecord) {\n    // XXX this could also mean package unknown.\n    Console.error('Release unknown: ' + releaseNameAndVersion + '');\n    return 1;\n  }\n\n  var toolPackageVersion = releaseRecord.tool &&\n        utils.parsePackageAndVersion(releaseRecord.tool);\n  if (!toolPackageVersion) {\n    throw new Error(\"bad tool in release: \" + releaseRecord.tool);\n  }\n  var toolPackage = toolPackageVersion.package;\n  var toolVersion = toolPackageVersion.version;\n\n  var toolPkgBuilds = catalog.official.getAllBuilds(\n    toolPackage, toolVersion);\n  if (!toolPkgBuilds) {\n    // XXX this could also mean package unknown.\n    Console.error('Tool version unknown: ' + releaseRecord.tool);\n    return 1;\n  }\n  if (!toolPkgBuilds.length) {\n    Console.error('Tool version has no builds: ' + releaseRecord.tool);\n    return 1;\n  }\n\n  // XXX check to make sure this is the three arches that we want? it's easier\n  // during 0.9.0 development to allow it to just decide \"ok, i just want to\n  // build the OSX tarball\" though.\n  var buildArches = _.pluck(toolPkgBuilds, 'buildArchitectures');\n  var osArches = _.map(buildArches, function (buildArch) {\n    var subArches = buildArch.split('+');\n    var osArches = _.filter(subArches, function (subArch) {\n      return subArch.substr(0, 3) === 'os.';\n    });\n    if (osArches.length !== 1) {\n      throw Error(\"build architecture \" + buildArch + \"  lacks unique os.*\");\n    }\n    return osArches[0];\n  });\n\n  if (options['target-arch']) {\n    // check if the passed arch is in the list\n    var arch = options['target-arch'];\n    if (! _.contains(osArches, arch)) {\n      throw new Error(\n        arch + \": the arch is not available for the release. Available arches: \"\n        + osArches.join(', '));\n    }\n\n    // build only for the selected arch\n    osArches = [arch];\n  }\n\n  Console.error(\n    'Building bootstrap tarballs for architectures ' + osArches.join(', '));\n\n  // Before downloading anything, check that the catalog contains everything we\n  // need for the OSes that the tool is built for.\n  main.captureAndExit(\"=> Errors finding builds:\", function () {\n    _.each(osArches, function (osArch) {\n      _.each(releaseRecord.packages, function (pkgVersion, pkgName) {\n        buildmessage.enterJob({\n          title: \"looking up \" + pkgName + \"@\" + pkgVersion + \" on \" + osArch\n        }, function () {\n          if (!catalog.official.getBuildsForArches(pkgName, pkgVersion, [osArch])) {\n            buildmessage.error(\"missing build of \" + pkgName + \"@\" + pkgVersion +\n                               \" for \" + osArch);\n          }\n        });\n      });\n    });\n  });\n\n  files.mkdir_p(outputDirectory);\n\n  // Get a copy of the data.json.\n  var dataTmpdir = files.mkdtemp();\n  var tmpDataFile = files.pathJoin(dataTmpdir, 'packages.data.db');\n\n  var tmpCatalog = new catalogRemote.RemoteCatalog();\n  tmpCatalog.initialize({\n    packageStorage: tmpDataFile\n  });\n  try {\n    packageClient.updateServerPackageData(tmpCatalog, null);\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 2;\n  }\n\n  // Since we're making bootstrap tarballs, we intend to recommend this release,\n  // so we should ensure that once it is downloaded, it knows it is recommended\n  // rather than having a little identity crisis and thinking that a past\n  // release is the latest recommended until it manages to sync.\n  tmpCatalog.forceRecommendRelease(releaseTrack, releaseVersion);\n  tmpCatalog.closePermanently();\n  if (files.exists(tmpDataFile + '-wal')) {\n    throw Error(\"Write-ahead log still exists for \" + tmpDataFile\n                + \" so the data file will be incomplete!\");\n  }\n\n  var packageMap =\n        packageMapModule.PackageMap.fromReleaseVersion(releaseRecord);\n\n  _.each(osArches, function (osArch) {\n    var tmpdir = files.mkdtemp();\n    Console.info(\"Building tarball for \" + osArch);\n\n    // when building for Windows architectures, build Windows-specific\n    // tropohouse and bootstrap tarball\n    var targetPlatform;\n    if (/win/i.test(osArch)) {\n      targetPlatform = \"win32\";\n    }\n\n    // We're going to build and tar up a tropohouse in a temporary directory.\n    var tmpTropo = new tropohouse.Tropohouse(\n      files.pathJoin(tmpdir, '.meteor'),\n      { platform: targetPlatform });\n\n    main.captureAndExit(\n      \"=> Errors downloading packages for \" + osArch + \":\",\n      function () {\n        tmpTropo.downloadPackagesMissingFromMap(packageMap, {\n          serverArchitectures: [osArch]\n        });\n      }\n    );\n\n    // Install the sqlite DB file we synced earlier. We have previously\n    // confirmed that the \"-wal\" file (which could contain extra log entries\n    // that haven't been flushed to the main file yet) doesn't exist, so we\n    // don't have to copy it.\n    files.copyFile(tmpDataFile, config.getPackageStorage({\n      root: tmpTropo.root\n    }));\n\n    // Create the top-level 'meteor' symlink, which links to the latest tool's\n    // meteor shell script.\n    var toolIsopackPath =\n          tmpTropo.packagePath(toolPackage, toolVersion);\n    var toolIsopack = new isopack.Isopack;\n    toolIsopack.initFromPath(toolPackage, toolIsopackPath);\n    var toolRecord = _.findWhere(toolIsopack.toolsOnDisk, {arch: osArch});\n    if (!toolRecord) {\n      throw Error(\"missing tool for \" + osArch);\n    }\n\n    tmpTropo.linkToLatestMeteor(files.pathJoin(\n        tmpTropo.packagePath(toolPackage, toolVersion, true),\n        toolRecord.path,\n        'meteor'));\n\n    if (options.unpacked) {\n      files.cp_r(tmpTropo.root, outputDirectory);\n    } else {\n      files.createTarball(\n        tmpTropo.root,\n        files.pathJoin(outputDirectory,\n          'meteor-bootstrap-' + osArch + '.tar.gz'));\n    }\n  });\n\n  return 0;\n});\n\n// We will document how to set banners on things in a later release.\nmain.registerCommand({\n  name: 'admin set-banners',\n  minArgs: 1,\n  maxArgs: 1,\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  var bannersFile = options.args[0];\n  try {\n    var bannersData = files.readFile(bannersFile, 'utf8');\n    bannersData = JSON.parse(bannersData);\n  } catch (e) {\n    Console.error(\"Could not parse banners file: \" + e.message);\n    return 1;\n  }\n  if (!bannersData.track) {\n    Console.error(\"Banners file should have a 'track' key.\");\n    return 1;\n  }\n  if (!bannersData.banners) {\n    Console.error(\"Banners file should have a 'banners' key.\");\n    return 1;\n  }\n\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  try {\n    packageClient.callPackageServer(\n      conn, 'setBannersOnReleases',\n      bannersData.track, bannersData.banners);\n  } catch (e) {\n    packageClient.handlePackageServerConnectionError(e);\n    return 1;\n  }\n\n  // Refresh afterwards.\n  refreshOfficialCatalogOrDie();\n  return 0;\n});\n\nmain.registerCommand({\n  name: 'admin recommend-release',\n  minArgs: 1,\n  maxArgs: 1,\n  options: {\n    unrecommend: { type: Boolean, short: \"u\" }\n  },\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n\n  // We want the most recent information.\n  //refreshOfficialCatalogOrDie();\n  var release = options.args[0].split('@');\n  var name = release[0];\n  var version = release[1];\n  if (!version) {\n    Console.error('Must specify release version (track@version)');\n    return 1;\n  }\n\n  // Now let's get down to business! Fetching the thing.\n  var record = catalog.official.getReleaseTrack(name);\n  if (!record) {\n    Console.error();\n    Console.error('There is no release track named ' + name);\n    return 1;\n  }\n\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  try {\n    if (options.unrecommend) {\n      Console.info(\"Unrecommending \" + name + \"@\" + version + \"...\");\n      packageClient.callPackageServer(\n        conn, 'unrecommendVersion', name, version);\n      Console.info(\"Success.\");\n      Console.info(name + \"@\" + version, \"is no longer a recommended release\");\n    } else {\n      Console.info(\"Recommending \" + options.args[0] + \"...\");\n      packageClient.callPackageServer(conn, 'recommendVersion', name, version);\n      Console.info(\"Success.\");\n      Console.info(name + \"@\" + version, \"is now a recommended release\");\n    }\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n  conn.close();\n  refreshOfficialCatalogOrDie();\n\n  return 0;\n});\n\n\nmain.registerCommand({\n  name: 'admin change-homepage',\n  minArgs: 2,\n  maxArgs: 2,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n\n  // We want the most recent information.\n  //refreshOfficialCatalogOrDie();\n  var name = options.args[0];\n  var url = options.args[1];\n\n  // Now let's get down to business! Fetching the thing.\n  var record = catalog.official.getPackage(name);\n  if (!record) {\n    Console.error();\n    Console.error('There is no package named ' + name);\n    return 1;\n  }\n\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  try {\n    Console.rawInfo(\n        \"Changing homepage on \"\n          + name + \" to \" + url + \"...\");\n      packageClient.callPackageServer(conn,\n          '_changePackageHomepage', name, url);\n      Console.info(\" done\");\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n  conn.close();\n  refreshOfficialCatalogOrDie();\n\n  return 0;\n});\n\n\nmain.registerCommand({\n  name: 'admin set-unmigrated',\n  minArgs: 1,\n  options: {\n    \"success\" : {type: Boolean}\n  },\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n\n  // We don't care about having the most recent information, but we do want the\n  // option to either unmigrate a specific version, or to unmigrate an entire\n  // package. So, for an entire package, let's get all of its versions.\n  var name = options.args[0];\n  var versions = [];\n  var nSplit = name.split('@');\n  if (nSplit.length > 2) {\n    throw new main.ShowUsage;\n  } else if (nSplit.length == 2) {\n    versions = [nSplit[1]];\n    name = nSplit[0];\n  } else {\n    versions = catalog.official.getSortedVersions(name);\n  }\n\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  try {\n    var status = options.success ? \"successfully\" : \"unsuccessfully\";\n    // XXX: This should probably use progress bars instead.\n    _.each(versions, function (version) {\n      Console.rawInfo(\n        \"Setting \" + name + \"@\" + version + \" as \" +\n         status + \" migrated ... \");\n      packageClient.callPackageServer(\n        conn,\n        '_changeVersionMigrationStatus',\n        name, version, !options.success);\n      Console.info(\"done.\");\n    });\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n  conn.close();\n  refreshOfficialCatalogOrDie();\n\n  return 0;\n});\n"]}