{"version":3,"sources":["/tools/cli/commands-packages-query.js"],"names":["_","require","buildmessage","catalog","Console","files","isopackets","main","packageVersionParser","projectContextModule","utils","catalogUtils","compiler","DEFAULT_MAX_AGE_MS","MAX_RECENT_VERSIONS","getReleaseVersionPublishedOn","versionRecord","published","Date","toolPackage","tool","split","toolName","toolVersion","toolRecord","official","getVersion","formatHiddenVersions","hiddenVersions","oldestShownVersion","reasons","lastUnmigrated","push","lastPreRelease","lessThan","oldestVersion","length","slice","join","last","formatEJSON","data","EJSON","load","ejson","stringify","indent","padLongformDate","dateStr","numSpaces","maxDateLength","Array","getTempContext","options","projectContext","appDir","ProjectContext","projectDir","currentPackageDir","packageDir","tempProjectDir","mkdtemp","explicitlyAddedLocalPackageDirs","captureAndExit","initializeCatalog","itemNotFound","item","error","explainIfRefreshFailed","BasePkgDatum","self","extend","prototype","_checkInitialized","Error","isEmpty","getObject","getConsoleStr","PkgExports","pkgExports","map","exp","arches","architectures","indexOf","without","sort","name","sortBy","strExports","ALL_ARCHES","noWrap","PkgImplies","pkgDeps","each","ref","references","r","implied","archName","arch","strImplies","PkgDependencies","omit","dep","depName","weak","every","constraint","strDeps","depString","PackageQuery","metaRecord","localCatalog","showArchitecturesOS","showDependencies","showHiddenVersions","version","_getVersionRecord","local","_getLocalVersion","_getOfficialVersion","_collectPackageData","getLatestVersion","print","rawInfo","_generateVersionObject","_generatePackageObject","_displayVersion","_displayPackage","maintainers","pluck","homepage","serverVersionRecords","getSortedVersionRecords","totalVersions","filteredVersionRecords","filter","vr","unmigrated","localVersion","summary","description","git","implies","exports","mainlineRecord","getLatestMainlineVersion","dependencies","longDescription","versions","publishedBy","username","publishedOn","allBuilds","getAllBuilds","build","archOS","buildArchitectures","tropohouse","installed","packageName","e","printError","localRecord","packageSource","getPackageSource","sourceRoot","getExports","versionExplicitlyProvided","readmeInfo","processReadme","excerpt","info","bulletPoint","directory","path","url","publisher","pubDate","longformDate","command","versionFields","processedData","key","pick","defaultVersion","displayName","printDescription","versionRows","versionsHeader","v","publishDate","paddedDate","printTwoColumns","ignoreWidth","hiddenVersionsPluralizer","toUpperCase","allVersionsPluralizer","packageFields","ReleaseQuery","_getVersionDetails","_getReleaseData","fields","_displayRelease","getReleaseVersion","track","recommended","orderKey","pubishedOn","packages","getDefaultReleaseVersionRecord","getReleaseVersionRecords","getSortedRecommendedReleaseRecords","reverse","getNumReleaseVersions","isRecommended","_displayAllReleaseVersions","rows","versionsPluralizer","versionsHidden","columnOpts","versionsDivided","groupBy","has","experimentalVersions","versionsWithKey","registerCommand","pretty","minArgs","maxArgs","usesPackage","type","Boolean","catalogRefresh","Refresh","OnceAtStart","maxAge","ignoreErrors","fullName","args","splitArgs","process","exit","currentVersion","getVersionBySourceRoot","query","packageRecord","getPackage","releaseRecord","getReleaseTrack","maintainer","String","allPackages","union","getAllPackageNames","allReleases","getAllReleaseTracks","matchingPackages","matchingReleases","selector","pattern","search","RegExp","err","filterBroken","match","isRelease","projectCatalog","debugOnly","prodOnly","testOnly","record","findWhere","enterJob","title","pack","latestVersion","lastUpdated","ret","releases","output","isEqual","printPackageList"],"mappings":"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","file":"tools/cli/commands-packages-query.js.map","sourcesContent":["// These commands deal with aggregating local package data with the information\n// contained in the Meteor Package Server. They also deal with presenting this\n// to the user in various human or machine-readable ways.\nvar _ = require('underscore');\nvar buildmessage = require('../utils/buildmessage.js');\nvar catalog = require('../packaging/catalog/catalog.js');\nvar Console = require('../console/console.js').Console;\nvar files = require('../fs/files.js');\nvar isopackets = require('../tool-env/isopackets.js');\nvar main = require('./main.js');\nvar packageVersionParser = require('../packaging/package-version-parser.js');\nvar projectContextModule = require('../project-context.js');\nvar utils = require('../utils/utils.js');\nvar catalogUtils = require('../packaging/catalog/catalog-utils.js');\nvar compiler = require('../isobuild/compiler.js');\n\n// We want these queries to be relatively fast, so we will only refresh the\n// catalog if it is > 15 minutes old\nvar DEFAULT_MAX_AGE_MS = 15 * 60 * 1000;\n\n// Maximum number of recent versions of a package or a release that we should\n// return to the user, unless a more complete mode is requested.\nvar MAX_RECENT_VERSIONS = 5;\n\n// XXX: Remove this if/when we do a Troposphere migration to backfill release\n// version publication times.\n// Estimate the publication date for a release. Since we have failed to keep\n// track of publication times of release versions in the past, we will try to\n// guess that the release was published at the same time as the tool.\nvar getReleaseVersionPublishedOn = function (versionRecord) {\n  if (versionRecord.published) {\n    return new Date(versionRecord.published);\n  }\n  // We don't know when the release was published. Luckily, since there is no\n  // way to use the tool outside of a release, and we always change the tool\n  // between releases, it is a good bet that the release was published on the\n  // same day as the tool.\n  var toolPackage = versionRecord.tool.split('@');\n  var toolName = toolPackage[0];\n  var toolVersion = toolPackage[1];\n  var toolRecord = catalog.official.getVersion(toolName, toolVersion);\n  if (! toolRecord || ! toolRecord.published) {\n    return null;\n  }\n  return new Date(toolRecord.published);\n};\n\n// Processes information about the versions that we hid. Returns a brief\n// human-friendly string listing the reasons why some versions of the package\n// were not shown.\nvar formatHiddenVersions = function (hiddenVersions, oldestShownVersion) {\n  // An array of strings, listing the reasons why some versions were hidden.\n  var reasons = [];\n  // Use our information about hidden versions to figure what reasons we\n  // actually want to return to the user.\n  if (! oldestShownVersion) {\n    // We did not show any versions, so presumably all existing versions of\n    // this package are either unmigrated or pre-release versions.\n    if (hiddenVersions.lastUnmigrated) {\n      reasons.push(\"unmigrated\");\n    }\n    if (hiddenVersions.lastPreRelease) {\n      reasons.push(\"pre-release\");\n    }\n  } else {\n    // If the oldest version on record is older than the oldest shown\n    // version, then it was hidden due to MAX_RECENT_VERSION number. (It\n    // might also be hidden because it is a pre-release or unmigrated, but\n    // age takes priority).\n    if (packageVersionParser.lessThan(\n        hiddenVersions.oldestVersion, oldestShownVersion)) {\n      reasons.push(\"older\");\n    }\n\n    // If the latest unmigrated/pre-release version is older than the oldest\n    // version that we are showing, then we don't care about it. If it is\n    // younger, we need to tell the user.\n    //\n    // It is certainly possible that, even though a pre-release version is older\n    // than the oldest version that we are showing, but under the limit for the\n    // MAX_RECENT_VERSIONS. So, in that case, we are eliding that version\n    // because it is a pre-release, not because of age. It is still,\n    // technically, an 'older' version though, and that explanation is more\n    // intuitive.\n    if (hiddenVersions.lastPreRelease &&\n        packageVersionParser.lessThan(\n          oldestShownVersion, hiddenVersions.lastPreRelease)) {\n      reasons.push(\"pre-release\");\n    }\n    if (hiddenVersions.lastUnmigrated &&\n        packageVersionParser.lessThan(\n          oldestShownVersion, hiddenVersions.lastUnmigrated)) {\n      reasons.push(\"unmigrated\");\n    }\n  }\n\n  // Now, we will aggregate the reasons into a human-readable string.\n  if (reasons.length === 1) {\n    return reasons[0];\n  } else if (reasons.length === 2) {\n    // There is no oxford comma if only listing two objects\n    return reasons[0] + \" and \" + reasons[1];\n  } else if (reasons.length > 2)  {\n    return reasons.slice(0, -1).join(\", \") + \", and \" + _.last(reasons);\n  } else {\n    // Did we not figure out anything to write? Did something else go wrong?\n    // This should never happen, but if it does, recover by omitting\n    // information.\n    return \"Some\";\n  }\n};\n\n// Converts an object to an EJSON string with the right spacing.\nvar formatEJSON = function (data) {\n  var EJSON = isopackets.load('ejson').ejson.EJSON;\n  return EJSON.stringify(data, { indent: true }) + \"\\n\";\n};\n\n// Takes in a string and pads it with whitespace to the length of the longest\n// possible date string.\nvar padLongformDate = function (dateStr) {\n  var numSpaces = utils.maxDateLength - dateStr.length;\n  return dateStr + Array(numSpaces + 1).join(' ');\n};\n\n// In order to get access to local package data, we need to create a local\n// package catalog. The best way to do that is to create a temporary\n// ProjectContext and let it handle catalog initialization. When we do, we need\n// to make sure that it is aware of all the local packages that we might care\n// about.\n//\n// This function returns such a ProjectContext, and takes in the following\n// options:\n//  - appDir: If we are running in the context of an app, this will contain the\n//    root of the app. We want to make sure to grab the data from the app's\n//    local packages.\n//  - packageDir: If we are running in a package directory, this will contain\n//    the source root of that package. If we are running from inside a package,\n//    we want that package to show up in our results.\nvar getTempContext = function (options) {\n  var projectContext;\n  // If we are running in an app, we will use it to create a\n  // (mostly immutable) projectContext.\n  if (options.appDir) {\n    projectContext = new projectContextModule.ProjectContext({\n      projectDir: options.appDir\n    });\n  } else {\n    // We're not in an app, so we will create a temporary app and use it to load\n    // the local catalog. If a local packageDir exists, include it manually.\n    var currentPackageDir = options.packageDir ? [options.packageDir] : [];\n    var tempProjectDir = files.mkdtemp('meteor-show');\n    projectContext = new projectContextModule.ProjectContext({\n      projectDir: tempProjectDir,\n      explicitlyAddedLocalPackageDirs: currentPackageDir\n    });\n  }\n\n  // It is possible that we can't process package.js files in our local packages\n  // and have to exit early. This is unfortunate, but we can't search local\n  // packages if we can't read them. If this turns out to be a frequent problem,\n  // we can give a warning, instead of failing in the future. For now, we want\n  // to err on the side of consistency.\n  main.captureAndExit(\"=> Errors while reading local packages:\", function () {\n    projectContext.initializeCatalog();\n  });\n  return projectContext;\n};\n\n// Print an error message if the user asks about an unknown item.\nvar itemNotFound = function (item) {\n  Console.error(item + \": not found\");\n  catalogUtils.explainIfRefreshFailed();\n  return 1;\n};\n\n// This is a base class for storing package fields that require some processing\n// to store and display correctly.\n//\n// Do NOT initialize this class by itself -- use one of the classes that\n// inherits from it.\nvar BasePkgDatum = function () {\n  var self = this;\n  self.data = null;\n};\n_.extend(BasePkgDatum.prototype, {\n  // Throws if data has not been initialized.\n  _checkInitialized: function () {\n    var self = this;\n    if (self.data === null) {\n      throw new Error(\"do not use the BasePkgDatum class by itself\");\n    }\n  },\n  // Returns true if this class does not contain any exports.\n  isEmpty : function () {\n    var self = this;\n    self._checkInitialized();\n    return _.isEmpty(self.data);\n  },\n  // Get exports as a raw object.\n  getObject : function () {\n    var self = this;\n    self._checkInitialized();\n    return self.data;\n  },\n  getConsoleStr : function () {\n    var self = this;\n    self._checkInitialized();\n    return \"\";\n  }\n});\n\n// This class stores exports from a given package.\n//\n// Stores exports for a given package and returns them to the caller in a given\n// format. Takes in the raw exports from the package.\nvar PkgExports = function (pkgExports) {\n var self = this;\n // Process and save the export data.\n self.data = _.map(pkgExports, function (exp) {\n    var arches = exp.architectures;\n    // Replace 'os' (what we store) with 'server' (what you would put in a\n    // package.js file). That's more user friendly, and avoids confusing this\n    // with different OS arches used in binary packages.\n    if ( _.indexOf(arches, \"os\") !== -1) {\n      arches = _.without(arches, \"os\");\n      arches.push(\"server\");\n    }\n    // Sort architectures alphabetically.\n    arches.sort();\n    return { name: exp.name, architectures: arches };\n  });\n  // Sort exports alphabetically by name.\n  self.data =  _.sortBy(self.data, \"name\");\n};\n// Extend BasePkgDatum.\nPkgExports.prototype = new BasePkgDatum();\n\n_.extend(PkgExports.prototype, {\n  // Convert package exports into a pretty, Console non-wrappable string. If an\n  // export is only declared for certain architectures, mentions those\n  // architectures in a user-friendly format.\n  getConsoleStr: function () {\n    var self = this;\n    var strExports = _.map(self.data, function (exp) {\n      // If this export is valid for all architectures, don't specify\n      // architectures here.\n      if (exp.architectures.length === compiler.ALL_ARCHES.length) {\n        return exp.name;\n      }\n\n      // Don't split descriptions of individual pkgExports between lines.\n      return Console.noWrap(\n        exp.name + \" (\" + exp.architectures.join(\", \") + \")\");\n    });\n    return strExports.join(\", \");\n  }\n});\n\n// This class stores implies from a given package.\n//\n// Stores implies for a given package and returns them to the caller in a given\n// format. Takes in the dependencies from the package.\nvar PkgImplies = function (pkgDeps) {\n  var self = this;\n  self.data = [];\n  // Go through all the package dependencies. If a dependency has any implied\n  // references, add it to the list.\n  _.each(pkgDeps, function (ref, name) {\n    var architectures = [];\n    // We want to select the references that are implied (instead of just used)\n    // and save their architectures. Also, we want to replace 'os' with\n    // 'server', as with exports.\n    _.each(ref.references, function (r) {\n      if (! r.implied) {\n        return;\n      }\n      var archName = (r.arch === \"os\") ? \"server\" : r.arch;\n      architectures.push(archName);\n    });\n    // Sort architecures alphabetically.\n    architectures.sort();\n    if (! _.isEmpty(architectures)) {\n      self.data.push({ name: name, architectures: architectures });\n    }\n  });\n  // Sort by name.\n  self.data =  _.sortBy(self.data, \"name\");\n};\n\n// Extend BasePkgDatum.\nPkgImplies.prototype = new BasePkgDatum();\n\n_.extend(PkgImplies.prototype, {\n  // Convert package exports into a pretty, Console non-wrappable string. If an\n  // export is only declared for certain architectures, mentions those\n  // architectures in a user-friendly format.\n  getConsoleStr: function () {\n    var self = this;\n    var strImplies = _.map(self.data, function (ref) {\n      // If an imply is valid for all architectures, don't specify it here.\n      if (ref[\"architectures\"].length === compiler.ALL_ARCHES.length) {\n        return ref.name;\n      }\n\n      // Don't split descriptions of individual implies between lines.\n      return Console.noWrap(\n        ref.name + \" (\" + ref.architectures.join(\", \") + \")\");\n    });\n    return strImplies.join(\", \");\n  }\n});\n\n// This class stores dependencies from a given package.\n//\n// Stores dependencies for a given package and returns them to the caller in a given\n// format. Takes in the raw dependencies from the package record.\nvar PkgDependencies = function (pkgDeps) {\n  var self = this;\n  self.data = _.map(\n    // The dependency on 'meteor' was almost certainly added automatically, by\n    // Isobuild. Returning this to the user will only cause confusion.\n    _.omit(pkgDeps, \"meteor\"),\n    function (dep, depName) {\n      // We will only consider this a weak dependency if all of its references\n      // are marked as weak.\n      var weak = _.every(dep.references, function (ref) {\n        return !! ref.weak;\n      });\n      return {\n        name: depName,\n        constraint: dep.constraint,\n        weak: weak\n      };\n  });\n  // Sort by name.\n  self.data =  _.sortBy(self.data, \"name\");\n};\n\n// Extend BasePkgDatum.\nPkgDependencies.prototype = new BasePkgDatum();\n\n_.extend(PkgDependencies.prototype, {\n  // Convert package exports into a pretty, Console non-wrappable string. If an\n  // export is only declared for certain architectures, mentions those\n  // architectures in a user-friendly format.\n  getConsoleStr: function () {\n    var self = this;\n    var strDeps = _.map(self.data, function (dep) {\n      var depString = dep.name;\n      if (dep.constraint && dep.constraint !== null) {\n        depString += \"@\" + dep.constraint;\n      }\n      if (dep.weak) {\n        depString += \" (weak dependency)\";\n      }\n      return Console.noWrap(depString);\n    });\n    return strDeps.join(\"\\n\");\n  }\n});\n\n\n// The two classes below collect and print relevant information about Meteor\n// packages and Meteor releases, respectively. Specifically, they query the\n// official catalog and, if applicable, relevant local sources. They also handle\n// the details of printing their data to the screen.\n//\n// A query class has:\n//  - data: an object representing the data it has collected in response to the\n//  - query.\n//  - a print method, that take options as an argument and prints the results to\n//    the terminal.\n\n\n// This class deals with information related to packages. To deal with local\n// packages, it has to interact with the projectContext.\n//\n// The constructor takes in the following options:\n//   - metaRecord: (mandatory) the meta-record for this package from the Packages\n//     collection.\n//   - projectContext: (mandatory) a projectContext that we can use to look up\n//     information on local packages.\n//   - version: query for a specific version of this package.\n//   - showArchitecturesOS: collect and process data on OS\n//     architectures that are available for different versions of this package.\n//   - showHiddenVersions: return information about all the versions of the\n//     package, including pre-releases and unmigrated versions.\n//   - showDependencies: return information about\n//     versions' dependencies.\nvar PackageQuery = function (options) {\n  var self = this;\n\n  // This is the record in the packages collection. It contains things like\n  // maintainers, and the package homepage.\n  self.metaRecord = options.metaRecord;\n  self.name = options.metaRecord.name;\n\n  // This argument is required -- we use it to look up data. If it has not been\n  // passed in, fail early.\n  if (! options.projectContext) {\n    throw Error(\"Missing required argument: projectContext\");\n  }\n  self.projectContext = options.projectContext;\n  self.localCatalog = options.projectContext.localCatalog;\n\n  // Processing per-version availability architectures & dependencies is\n  // expensive, so we don't do it unless we are asked to.\n  self.showArchitecturesOS = options.showArchitecturesOS;\n  self.showDependencies = options.showDependencies;\n\n  // We don't want to show pre-releases and un-migrated versions to the user\n  // unless they explicitly ask us about it.\n  self.showHiddenVersions = options.showHiddenVersions;\n\n  // Collect the data for this package, including looking up any specific\n  // package version that we care about.\n  if (options.version) {\n    var versionRecord = self._getVersionRecord(options.version);\n    if (! versionRecord) {\n      self.data = null;\n      return;\n    }\n    self.data =  versionRecord.local ?\n      self._getLocalVersion(versionRecord) :\n      self._getOfficialVersion(versionRecord);\n  } else {\n    self.data = self._collectPackageData();\n  }\n};\n\n_.extend(PackageQuery.prototype, {\n  // Find and return a version record for a given version. Mark the version\n  // record as local, if it is a local version of the package.\n  _getVersionRecord: function (version) {\n    var self = this;\n\n    // We allow local version to override remote versions in meteor show, so we\n    // should start by checking if this is a local version first.\n    var versionRecord = self.localCatalog.getLatestVersion(self.name);\n\n    // If we asked for \"local\" as the version number, and found any local version\n    // at all, we are done.\n    if (version === \"local\") {\n      return versionRecord && _.extend(versionRecord, { local: true });\n    }\n\n    // We have a local record, and its version matches the version that we asked\n    // for, so we are done.\n    if (versionRecord && (versionRecord.version === version)) {\n      return _.extend(versionRecord, { local: true });\n    }\n\n    // If we haven't found a local record, or if the local record that we found\n    // doesn't match the version that we asked for, then we have to go look in\n    // the server catalog.\n    versionRecord = catalog.official.getVersion(self.name, version);\n    return versionRecord;\n  },\n  // Print the query information to screen.\n  //\n  // options:\n  //   - ejson: Don't pretty-print the data. Print a machine-readable ejson\n  //     object.\n  print: function (options) {\n    var self = this;\n\n    // If we are asking for an EJSON-style output, we will only print out the\n    // relevant fields.\n    if (options.ejson) {\n      Console.rawInfo(formatEJSON(\n        self.data.version ?\n          self._generateVersionObject(self.data) :\n          self._generatePackageObject(self.data)));\n      return;\n    }\n\n    // Otherwise, display the information that we have. If we were asking about\n    // a specific version, display that. Otherwise, display package metadata in\n    // general.\n    if (self.data.version) {\n      self._displayVersion(self.data);\n      return;\n    }\n    self._displayPackage(self.data);\n  },\n  // Aggregates data about the package as a whole. Returns an object with the\n  // following keys:\n  //\n  // - name: package name\n  // - maintainers: an array of usernames of maintainers\n  // - homepage: string homepage\n  // - totalVersions: total number of versions that this package has, including\n  //   local and hidden versions.\n  // - defaultVersion: a default version: use this version to look up\n  //   per-version information that is relevant to the package as a whole, such\n  //   as git, description,etc.\n  // - versions: an array of objects representing versions of this package.\n  _collectPackageData: function () {\n    var self = this;\n    var data = {\n      name: self.metaRecord.name,\n      maintainers: _.pluck(self.metaRecord.maintainers, \"username\"),\n      homepage: self.metaRecord.homepage\n    };\n\n    // Collect surface information about available versions, starting with the\n    // versions available on the server.\n    var serverVersionRecords =\n          catalog.official.getSortedVersionRecords(self.name);\n    var totalVersions = serverVersionRecords.length;\n\n    // If we are not going to show hidden versions, then we shouldn't waste time\n    // on them. Trim the serverVersionRecords array to only have the top\n    // MAX_RECENT_VERSIONS migrated, official versions.\n    if (! self.showHiddenVersions) {\n      // We might have to hide some versions from the user. We want to explain\n      // why we hid them. Here is how we are going to explain things -- any\n      // versions older than the oldest version that we show, are hidden because\n      // of age. If, in the covered time period, there are\n      // unmigrated/pre-release versions, then we will mention those  as well.\n      //\n      // Specifically, while we filter versions, we are going to memorize the\n      // most recent version hidden for a specific reason.\n      var lastUnmigrated = \"\";\n      var lastPreRelease = \"\";\n      var oldestVersion =\n        serverVersionRecords[0] && serverVersionRecords[0].version;\n      var filteredVersionRecords =\n        _.filter(serverVersionRecords, function (vr) {\n          if (vr.unmigrated) {\n            lastUnmigrated = vr.version;\n            return false;\n          }\n\n          if (vr.version.indexOf(\"-\") !== -1) {\n            lastPreRelease = vr.version;\n            return false;\n          }\n          return true;\n        });\n     serverVersionRecords = _.last(filteredVersionRecords, MAX_RECENT_VERSIONS);\n     data[\"hiddenVersions\"] = {\n       oldestVersion: oldestVersion,\n       lastUnmigrated: lastUnmigrated,\n       lastPreRelease: lastPreRelease\n     };\n    };\n\n    // Process the catalog records into our preferred format, and look up any\n    // other per-version information that we might need.\n    data[\"versions\"] = _.map(serverVersionRecords, function (versionRecord) {\n      return self._getOfficialVersion(versionRecord);\n    });\n\n    // The local version doesn't count against the version limit. Look up relevant\n    // information about the local version.\n    var localVersion = self.localCatalog.getLatestVersion(self.name);\n    var local;\n    if (localVersion) {\n      local = self._getLocalVersion(localVersion);\n      data[\"versions\"].push(local);\n      totalVersions++;\n    }\n\n    // Record the total number of versions, including the ones we hid from the\n    // user.\n    data[\"totalVersions\"] = totalVersions;\n\n    // Some per-version information gets displayed with the rest of the package\n    // information.  We want to use the right version for that. (We don't want\n    // to display data from unofficial or un-migrated versions just because they\n    // are recent.)\n    if (local) {\n      data[\"defaultVersion\"] = {\n        version: \"local\",\n        summary: local.summary,\n        description: local.description,\n        git: local.git,\n        implies: local.implies,\n        exports: local.exports\n      };\n    } else {\n      var mainlineRecord = catalog.official.getLatestMainlineVersion(self.name);\n      if (mainlineRecord) {\n        var pkgExports = new PkgExports(mainlineRecord.exports);\n        var implies = new PkgImplies(mainlineRecord.dependencies);\n        data[\"defaultVersion\"] = {\n          version: mainlineRecord.version,\n          summary: mainlineRecord.description,\n          description: mainlineRecord.longDescription,\n          git: mainlineRecord.git,\n          exports: pkgExports,\n          implies: implies\n        };\n      } else {\n        data[\"defaultVersion\"] = _.last(data.versions);\n      }\n    }\n    return data;\n  },\n  // Takes in a version record from the official catalog and looks up extra\n  // information that's relevant to this PackageQuery.\n  //\n  // - name: package Name\n  // - version: package version\n  // - summary: version summary/short description (from Package.describe)\n  // - description: long-form description (from the README.md)\n  // - publishedBy: username of the publisher\n  // - publishedOn: date of publication\n  // - git: git URL for this version\n  // - installed: true if the package exists in warehouse, and is therefore\n  //   available for use offline.\n  // - architectures: (optional) if self.showArchitecturesOS is true, returns an\n  //   array of system architectures for which that package is available.\n  // - dependencies: (optional) if self.showDependencies is true, return an\n  //   array of objects denoting that package's dependencies. The objects have\n  //   the following keys:\n  //     - packageName: name of the dependency\n  //     - constraint: constraint for that dependency\n  //     - weak: true if this is a weak dependency.\n  _getOfficialVersion: function (versionRecord) {\n    var self = this;\n    var version = versionRecord.version;\n    var name = self.name;\n    var data = {\n      name: name,\n      version: version,\n      summary: versionRecord.description,\n      description: versionRecord.longDescription,\n      publishedBy:\n      versionRecord.publishedBy && versionRecord.publishedBy.username,\n      publishedOn: new Date(versionRecord.published),\n      git: versionRecord.git,\n      exports: versionRecord.exports\n    };\n\n    // Get the export and imply data, if the record has any.\n    data[\"exports\"] = new PkgExports(versionRecord.exports);\n    data[\"implies\"] = new PkgImplies(versionRecord.dependencies);\n\n    // Processing and formatting architectures takes time, so we don't want to\n    // do this if we don't have to.\n    if (self.showArchitecturesOS) {\n      var allBuilds = catalog.official.getAllBuilds(self.name, version);\n      var architectures = _.map(allBuilds, function (build) {\n        if (! build['buildArchitectures']) {\n          return \"unknown\";\n        }\n        var archOS =\n          _.filter(build.buildArchitectures.split('+'), function (arch) {\n             return ( arch !== \"web.browser\" ) && ( arch !== \"web.cordova\" );\n        });\n        // At this point, you can only have OS arch at a time per-build.\n        return archOS[0];\n      });\n      data[\"architecturesOS\"] = architectures;\n    }\n\n    // Processing and formatting dependencies also takes time, so we would\n    // rather not do it if we don't have to.\n    if (self.showDependencies) {\n      data[\"dependencies\"] = new PkgDependencies(versionRecord.dependencies);\n    }\n\n    // We want to figure out if we have already downloaded this package, and,\n    // therefore, can use it offline.\n    var tropohouse = self.projectContext.tropohouse;\n    try {\n      data[\"installed\"] = tropohouse.installed({\n        packageName: name,\n        version: version\n      });\n    } catch (e) {\n      // Sometimes, we might be unable to determine if the package is installed\n      // -- maybe we don't have access to the directory, or there is some sort\n      // of disk corruption. This might only extend to one version, so it would\n      // be awkward to fail 'meteor show' altogether. Print an error message (if\n      // it is a permissions error, for example, that's something the user might\n      // want to know), but don't throw.\n      Console.printError(e);\n      data[\"installed\"] = false;\n    }\n    return data;\n  },\n\n  // Takes in a version record from the local catalog and looks up extra\n  // information that's relevant to this PackageQuery. Returns an object with\n  // the following keys.\n  //\n  // - name: package Name\n  // - version: package version\n  // - summary: version summary/short description (from Package.describe)\n  // - description: long-form description (from the README.md)\n  // - git: git URL for this version\n  // - local: always true (denotes that this is a local package).\n  // - directory: source directory of this package.\n  // - dependencies: (optional) if self.showDependencies is true, return an\n  //   array of objects denoting that package's dependencies. The objects have\n  //   the following keys:\n  //     - packageName: name of the dependency\n  //     - constraint: constraint for that dependency\n  //     - weak: true if this is a weak dependency.\n  _getLocalVersion: function (localRecord) {\n    var self = this;\n    var data =  {\n      name: self.name,\n      summary: localRecord.description,\n      git: localRecord.git,\n      local: true\n    };\n\n    // Get the source directory.\n    var packageSource = self.localCatalog.getPackageSource(self.name);\n    data[\"directory\"] = packageSource.sourceRoot;\n\n    // Get the exports.\n    data[\"exports\"] = new PkgExports(packageSource.getExports());\n    data[\"implies\"] = new PkgImplies(localRecord.dependencies);\n\n    // If the version was not explicitly set by the user, the catalog backfills\n    // a placeholder version for the constraint solver. We don't want to show\n    // that version to the user.\n    data[\"version\"] = packageSource.versionExplicitlyProvided ?\n      localRecord.version : \"local\";\n\n    // Processing dependencies takes time, and we don't want to do it if we\n    // don't have to.\n    if (self.showDependencies) {\n      data[\"dependencies\"] = new PkgDependencies(localRecord.dependencies);\n    }\n\n    var readmeInfo;\n    main.captureAndExit(\n      \"=> Errors while reading local packages:\",\n      \"reading \" + data[\"directory\"],\n       function () {\n        readmeInfo = packageSource.processReadme();\n    });\n    if (readmeInfo) {\n      data[\"description\"] = readmeInfo.excerpt;\n    }\n    return data;\n  },\n  // Displays version information from this PackageQuery to the terminal in a\n  // human-friendly format. Takes in an object that contains some, but not all,\n  // of the following keys:\n  //\n  // - name: (mandatory) package Name\n  // - version: (mandatory) package version\n  // - summary: version summary/short description (from Package.describe)\n  // - publishedBy: username of the publisher\n  // - publishedOn: date of publication\n  // - description: long-form description (from the README.md)\n  // - git: git URL for this version.\n  // - local: true for a local version of a package.\n  // - directory: source directory of this package.\n  // - installed: true if the package exists in warehouse, and is therefore\n  //   available for use offline.\n  // - architectures: if self.showArchitecturesOS is true, returns an\n  //   array of system architectures for which that package is available.\n  // - exports: a PkgExports object, representing package exports.\n  // - exports: a PkgImplies object, representing package implies.\n  // - dependencies: a PkgDependencies object, representing dependencies.\n  _displayVersion: function (data) {\n    var self = this;\n    Console.info(\n        data.name + \"@\" + data.version,\n        Console.options({ bulletPoint: \"Package: \" }));\n    if (data.directory) {\n      Console.info(\"Directory: \" + Console.path(data.directory));\n    }\n    if (data.exports && ! data.exports.isEmpty()) {\n      Console.info(\n        data[\"exports\"].getConsoleStr(),\n        Console.options({ bulletPoint: \"Exports: \" }));\n    }\n    if (data.implies && ! data.implies.isEmpty()) {\n      Console.info(\n        data[\"implies\"].getConsoleStr(),\n        Console.options({ bulletPoint: \"Implies: \" }));\n    }\n    if (data.git) {\n      Console.info(\n        Console.url(data.git),\n        Console.options({ bulletPoint: \"Git: \" }));\n    }\n\n    // If we don't have a long-form description, print the summary. (If we don't\n    // have a summary, print nothing).\n    if (data.description || data.summary) {\n      Console.info();\n      Console.info(data.description || data.summary);\n    }\n\n    // Print dependency information, if the package has any dependencies.\n    if (data.dependencies && ! data.dependencies.isEmpty()) {\n      Console.info();\n      Console.info(\"Depends on:\");\n      Console.info(\n          data.dependencies.getConsoleStr(),\n          Console.options({ indent: 2 }));\n    }\n\n    // Print the 'published by' line at the very bottom.\n    if (data.publishedBy) {\n      var publisher = data.publishedBy;\n      var pubDate = utils.longformDate(data.publishedOn);\n      Console.info();\n      Console.info(\"Published by\", publisher, \"on\", pubDate + \".\");\n    }\n\n    // Sometimes, there is a server package and a local package with the same\n    // version. In this case, we prefer the local package. Explain our choice to\n    // the user.\n    if (data.local &&\n        catalog.official.getVersion(data.name, data.version)) {\n      Console.info();\n      Console.info(\n        \"This package version is built locally from source.\",\n        \"The same version of this package also exists on the package server.\",\n        \"To view its metadata, run\",\n        Console.command(\"'meteor show \" + data.name + \"@\" + data.version + \"'\"),\n        \"from outside the project.\");\n    }\n  },\n  // Returns a user-friendly object from this PackageQuery to the caller.  Takes\n  // in a data object with the same keys as _displayVersion.\n  //\n  // Returns an object with some of the following keys:\n  // - name: String. Name of the package.\n  // - version: String. Meteor version number.\n  // - description: String. Longform description.\n  // - summary: String. Short summary.\n  // - git: String. Git URL.\n  // - publishedBy: String. Username of the publisher.\n  // - publishedOn: Date. Time of publication.\n  // - local: Boolean. True if this is a local package.\n  // - directory: source directory of this package.\n  // - installed: Boolean. True if the isopack for this package has been\n  //   downloaded, or if the package is local.\n  // - dependencies: Array of objects representing package dependencies, sorted\n  //   alphabetically by package name.\n  // - OSarchitectures: Array of OS architectures on for which an isopack of\n  //   this package exists (server packages only).\n  // - exports: Array of objects representing the package exports, sorted by\n  //   name of export.\n  _generateVersionObject: function (data) {\n    var versionFields = [\n      \"name\", \"version\", \"description\", \"summary\", \"git\", \"directory\",\n      \"publishedBy\", \"publishedOn\", \"installed\", \"local\", \"architecturesOS\",\n    ];\n    var processedData = {};\n    _.each([\"exports\", \"implies\", \"dependencies\"], function (key) {\n      processedData[key] = data[key] ? data[key].getObject() : [];\n    });\n    return _.extend(processedData, _.pick(data, versionFields));\n  },\n\n  // Displays general package data from this PackageQuery to the terminal in a\n  // human-friendly format. Takes in an object that contains some, but not\n  // always all, of the following keys:\n  //\n  // - name: (mandatory) package name\n  // - maintainers: array of usernames of maintainers\n  // - homepage: string of the package homepage\n  // - defaultVersion: the default version of this package to use for looking up\n  //   per-version information that's relevant to the package in general (ex:\n  //   git).\n  // - totalVersions: the total number of versions that this package has,\n  //   including hidden versions.\n  // - versions: an ordered array of objects, representing the versions of this\n  //   package that we should return to the user. Each version should contain\n  //   some of the following keys:\n  //     - version: (mandatory) version number, or \"local\" for a version-less\n  //       local package.\n  //     - publishedOn: the date that the package was published.\n  //     - installed: true if this is a server package that has already been\n  //       downloaded to the warehouse.\n  //     - local: true for a local package.\n  //     - directory: source root directory of a local package.\n  // - hiddenVersions: an object containing some information about versions that\n  //   have been hidden from the user. Has keys:\n  //     - oldestVersion: the version of this package with the smallest Meteor\n  //       semver number that exists in our records.\n  //     - lastUnmigrated: the most recent (largest Meteor semver) version that\n  //       is marked 'unmigrated'.\n  //     - lastPreRelease: the most recent pre-release version.\n  _displayPackage: function (data) {\n    var self = this;\n    var defaultVersion = data.defaultVersion;\n\n    // Every package has a name. Some packages have a homepage.\n    var displayName = data.defaultVersion ?\n      data.name + \"@\" + data.defaultVersion.version : data.name;\n    Console.info(displayName, Console.options({ bulletPoint: \"Package: \" }));\n    if (data.homepage) {\n      Console.info(Console.url(data.homepage),\n        Console.options({ bulletPoint: \"Homepage: \" }));\n    }\n    // Local packages might not have any maintainers.\n    if (! _.isEmpty(data.maintainers)) {\n      Console.info(data.maintainers.join(\", \"),\n        Console.options({ bulletPoint: \"Maintainers: \" }));\n    }\n    // Git is per-version, so we will print the latest one, if one exists.\n    if (defaultVersion && defaultVersion.git) {\n      Console.info(Console.url(defaultVersion.git),\n        Console.options({ bulletPoint: \"Git: \" }));\n    }\n    // Print the exports.\n    if (defaultVersion && defaultVersion.exports &&\n       ! defaultVersion.exports.isEmpty()) {\n      Console.info(\n        defaultVersion[\"exports\"].getConsoleStr(),\n        Console.options({ bulletPoint: \"Exports: \" }));\n    }\n    if (defaultVersion && defaultVersion.implies &&\n        ! defaultVersion.implies.isEmpty()) {\n      Console.info(\n        defaultVersion[\"implies\"].getConsoleStr(),\n        Console.options({ bulletPoint: \"Implies: \" }));\n    }\n    Console.info();\n\n    // If we don't have a long-form description, we will use the summary. For a\n    // local package, we might not have a summary, in which case we should be\n    // careful not to print extra lines.\n    var printDescription = defaultVersion &&\n      (defaultVersion.description || defaultVersion.summary);\n    if (printDescription) {\n      Console.info(printDescription );\n      Console.info();\n    }\n\n    // If we have any versions to show, print them out now.\n    var versionRows = [];\n    if (data.versions && ! _.isEmpty(data.versions)) {\n      var versionsHeader =\n            self.showHiddenVersions ? \"Versions:\" : \"Recent versions:\";\n      Console.info(versionsHeader);\n      _.each(data.versions, function (v) {\n\n        // For a local package, we don't have a published date, and we don't\n        // need to show if it has already been downloaded (it is local, we don't\n        // need to download it). Instead of showing both of these values, let's\n        // show the directory.\n        if (v.local) {\n          versionRows.push([v.version, v.directory]);\n          return;\n        }\n\n        // Convert the date into a display-friendly format, or print nothing for\n        // a local package.\n        var publishDate = utils.longformDate(v.publishedOn);\n\n        // If there is a status that we would like to report for this package,\n        // figure it out now.\n        if (v.installed) {\n          var paddedDate = padLongformDate(publishDate);\n          versionRows.push([v.version, paddedDate + \"  \" + \"installed\"]);\n        } else {\n          versionRows.push([v.version, publishDate]);\n        }\n      });\n      // The only time that we are going to go over a reasonable character limit\n      // is with a directory for the local package. We would much rather display\n      // the full directory than trail it off.\n      Console.printTwoColumns(versionRows, { indent: 2, ignoreWidth: true });\n    }\n\n    // If we have not shown all the available versions, let the user know.\n    if (data.totalVersions > versionRows.length) {\n      var oldestShownVersion =\n        (data[\"versions\"][0] && data[\"versions\"][0].version) || \"\";\n      // A string explaining why those versions have been hidden.\n      var hiddenVersions =\n         formatHiddenVersions(data[\"hiddenVersions\"], oldestShownVersion);\n\n      // We will word things in the message in different ways, based on whether\n      // multiple versions exist/have been hidden.\n      var hiddenVersionsPluralizer =\n         (data.totalVersions - data.versions.length == 1) ?\n         \"One \" + hiddenVersions + \" version of \" + self.name + \" has\" :\n         hiddenVersions[0].toUpperCase() + hiddenVersions.slice(1) +\n         \" versions of \" + self.name + \" have\";\n      var allVersionsPluralizer =\n         (data.totalVersions === 1) ?\n         \"the hidden version\" :\n         \"all \" + data.totalVersions + \" versions\";\n\n      // Display the final message.\n      Console.info(\n        hiddenVersionsPluralizer, \"been hidden.\",\n        \"To see \" + allVersionsPluralizer + \", run\",\n        Console.command(\"'meteor show --show-all \" + self.name + \"'\") + \".\");\n    }\n  },\n  // Returns a user-friendly object from this PackageQuery to the caller.  Takes\n  // in a data object with the same keys as _displayPackage.\n  //\n  // Returns an object with some of the following keys:\n  // - name: String. Name of the package.\n  // - homepage: String. URL of the package homepage.\n  // - maintainers: Array of strings. Usernames of package maintainers.\n  // - totalVersions: Number. Total number of versions that exist for this\n  //   package.\n  // - versions: Array of objects, representing versions of this\n  //   package. Objects have the following keys:\n  //   - name: String. Name of the package.\n  //   - version: String. Meteor version number.\n  //   - description: String. Longform description.\n  //   - summary: String. Short summary.\n  //   - git: String. Git URL.\n  //   - publishedBy: String. Username of the publisher.\n  //   - publishedOn: Date. Time of publication.\n  //   - local: Boolean. True if this is a local package.\n  //   - directory: source directory of this package.\n  //   - installed: Boolean. True if the isopack for this package has been\n  //     downloaded, or if the package is local.\n  //   - exports: Array of objects representing the package exports, sorted by\n  //     name of export.\n  _generatePackageObject: function (data) {\n    var packageFields =\n          [ \"name\", \"homepage\", \"maintainers\", \"totalVersions\" ];\n    // Process the versions array. We only want some of the keys, and we want to\n    // make sure to get the right exports object.\n    var versions = _.map(data[\"versions\"], function (version) {\n      var versionFields = [\n        \"name\", \"version\", \"description\", \"summary\", \"git\", \"publishedBy\",\n        \"publishedOn\", \"installed\", \"local\", \"directory\", \"architecturesOS\"\n      ];\n      var processedData = {};\n      _.each([\"exports\", \"implies\"], function (key) {\n        processedData[key] = version[key] ? version[key].getObject() : [];\n      });\n      return _.extend(processedData, _.pick(version, versionFields));\n    });\n    return _.extend({ versions: versions }, _.pick(data, packageFields));\n  },\n\n});\n\n// This class looks up release-related information in the official catalog.\n//\n// The constructor takes in an object with the following keys:\n//   - metaRecord: (mandatory) the meta-record for this release from the\n//     Releases collection.\n//   - version: specific version of a release that we want to query.\n//   - showHiddenVersions: show experimental, pre-release & otherwise\n//     non-recommended versions of this release.\nvar ReleaseQuery = function (options) {\n  var self = this;\n\n  // This is the record in the Releases collection. Contains metadata, such as\n  // maintainers.\n  self.metaRecord = options.metaRecord;\n  self.name = options.metaRecord.name;\n\n  // We don't always want to show non-recommended release versions.\n  self.showHiddenVersions = options.showHiddenVersions;\n\n  // Aggregate the query data. If we are asking for a specific version, get data\n  // for a specific version, otherwise aggregate the data about this release\n  // track in general.\n  self.data = options.version ?\n    self._getVersionDetails(options.version) :\n    self._getReleaseData();\n};\n\n_.extend(ReleaseQuery.prototype, {\n  // Prints the data from this ReleaseQuery to the terminal. Takes the following\n  // options:\n  //   - ejson: Don't pretty-print the data. Return a machine-readable ejson\n  //     object.\n  print: function (options) {\n    var self = this;\n\n    // If we are asking for an EJSON-style output, print out the relevant fields.\n    if (options.ejson) {\n      var versionFields = [\n        \"track\", \"version\", \"description\", \"publishedBy\", \"publishedOn\",\n        \"tool\", \"packages\", \"recommended\"\n      ];\n      var packageFields = [ \"name\", \"maintainers\", \"versions\" ];\n      var fields = self.data.version ? versionFields : packageFields;\n      Console.rawInfo(formatEJSON(_.pick(self.data, fields)));\n      return;\n    }\n\n    // If we are asking for a specific version, display the information about\n    // that version.\n    if (self.data.version) {\n      self._displayVersion(self.data);\n      return;\n    }\n    // Otherwise, print the data about this release track in general.\n    self._displayRelease(self.data);\n  },\n\n  // Gets detailed data about a specific version of this release. Returns an\n  // object with the following keys:\n  //  - track: name of the release track\n  //  - version: release version\n  //  - description: description of the release version\n  //  - recommended: if this is a recommended version.\n  //  - orderKey: the orderKey of this version\n  //  - publishedBy: username of the publisher\n  //  - publishedOn: date this version was published\n  //  - packages: map of packages that go into this version\n  //  - tool: the tool package@version for this release version\n  _getVersionDetails: function (version) {\n    var self = this;\n    var versionRecord =\n       catalog.official.getReleaseVersion(self.name, version);\n    if (! versionRecord) {\n      return null;\n    }\n    var publishDate = getReleaseVersionPublishedOn(versionRecord);\n    return {\n      track: self.name,\n      version: version,\n      description: versionRecord.description,\n      recommended: versionRecord.recommended,\n      orderKey: versionRecord.orderKey,\n      publishedBy: versionRecord.publishedBy[\"username\"],\n      pubishedOn: publishDate,\n      packages: versionRecord.packages,\n      tool: versionRecord.tool\n    };\n  },\n  // Gets aggregate data about this release track in general. Returns an object\n  // with the following keys:\n  //    - track: name of the release track\n  //    - maintainers: an array of usernames of maintainers\n  //    - defaultVersion: version record for the default version of this release.\n  //    - totalVersions: total number of release versions for this track\n  //    - versions: an array of version objects. If only recommended versions\n  //      are returned, ordered by orderKey, otherwise unordered. Objects have\n  //      the following keys:\n  //         - version: version number\n  //         - description: version description\n  //         - recommended: true for recommended versions\n  //         - orderKey: (only if showHiddenVersions is true) the orderKey of\n  //           this version.\n  //         - publishedBy: username of the publisher\n  //         - publishedOn: date the version was published\n  _getReleaseData: function () {\n    var self = this;\n    var data = {\n      track: self.metaRecord.name,\n      maintainers: _.pluck(self.metaRecord.maintainers, \"username\")\n    };\n    data[\"defaultVersion\"] =\n      catalog.official.getDefaultReleaseVersionRecord(self.name);\n\n    // Collect information about versions.\n    var versions;\n    if (self.showHiddenVersions) {\n      // There is no obvious way to get an absolute ranking of all release\n      // versions, so this is unsorted. If we have to, we will deal with sorting\n      // this at display time.\n      versions = catalog.official.getReleaseVersionRecords(self.name);\n    } else {\n      versions = catalog.official.getSortedRecommendedReleaseRecords(self.name);\n      versions.reverse();\n    }\n\n    // We don't want to show the user package or tool data in general release\n    // mode (it is a lot of data). Select to show the fields that we want to\n    // return only.\n    var versionFields =\n       [ \"version\", \"description\", \"recommended\"];\n\n    // orderKey is important for dealing with experimental versions, but it is\n    // an internal system detail that we would rather not reveal at this level.\n    if (self.showHiddenVersions) {\n      versionFields.push(\"orderKey\");\n    }\n    data[\"versions\"] = _.map(versions, function (versionRecord) {\n      var data = _.pick(versionRecord, versionFields);\n      data.publishedBy = versionRecord.publishedBy[\"username\"];\n      data.publishedOn = getReleaseVersionPublishedOn(versionRecord);\n      return data;\n    });\n    data[\"totalVersions\"] = catalog.official.getNumReleaseVersions(self.name);\n    return data;\n  },\n  // Displays information about a specific release version in a human-readable\n  // format. Takes in an object with the following keys:\n  // - track: release track\n  // - version: release version\n  // - publishedBy: username of the publisher\n  // - publishedOn: date the version was published\n  // - recommended: true if this is a recommended version\n  // - description: description of the release version\n  // - tool: tool package specification for this version\n  // - packages: map of packages for this release version\n  _displayVersion: function (data) {\n    var self = this;\n    Console.info(\"Release: \" + data.track + \"@\" + data.version);\n    var isRecommended = data.recommended ? \"yes\" : \"no\";\n    Console.info(\"Recommended: \" + isRecommended);\n    Console.info(\"Tool package: \" + data.tool);\n    Console.info();\n    Console.info(data.description);\n    Console.info();\n    if (!_.isEmpty(data.packages)) {\n      Console.info(\"Packages:\");\n      _.each(data.packages, function (version, packageName) {\n          Console.info(\n            packageName + \": \" + version,\n            Console.options({ indent: 2 }));\n      });\n      Console.info();\n    }\n    Console.info(\n      \"Published by \" + data.publishedBy + \" on \" +\n      utils.longformDate(getReleaseVersionPublishedOn(data)));\n  },\n  // Displays information about this release track in general in a\n  // human-readable format. Takes in an object with the following keys:\n  //    - track: name of the release track\n  //    - maintainers: an array of usernames of maintainers\n  //    - defaultVersion: version record for the default version of this release.\n  //    - totalVersions: total number of release versions for this track\n  //    - versions: an array of version objects. If only recommended versions\n  //      are returned, ordered by orderKey, otherwise unordered. Objects have\n  //      the following keys:\n  //         - version: version number\n  //         - description: version description\n  //         - recommended: true for recommended versions\n  //         - orderKey: (only if showHiddenVersions is true) the orderKey of\n  //           this version.\n  //         - publishedBy: username of the publisher\n  //         - publishedOn: date the version was published\n  _displayRelease: function (data) {\n    var self = this;\n\n    Console.info(\"Release:\",  data.track);\n    // There is no such thing as a local release, which means all releases have\n    // a maintainer.\n    Console.info(\"Maintainers:\", data.maintainers.join(\", \"));\n    Console.info();\n\n    if (data.defaultVersion) {\n      Console.info(data.defaultVersion.description);\n      Console.info();\n    }\n\n    if (self.showHiddenVersions) {\n      self._displayAllReleaseVersions(data.versions);\n      return;\n    }\n\n    // Display the recommended versions of this release.\n    var rows = [];\n    if (!_.isEmpty(data.versions)) {\n      Console.info(\"Recommended versions:\");\n      _.each(data.versions, function (v) {\n        rows.push([v.version, utils.longformDate(v.publishedOn)]);\n      });\n      Console.printTwoColumns(rows, { indent: 2 });\n    };\n\n    // Display a warning about other release versions at the bottom.\n    if (data.totalVersions > rows.length) {\n      var versionsPluralizer =\n            (data.totalVersions > 1) ?\n            \"all \" + data.totalVersions + \" versions\" :\n            \"the hidden version\";\n      // We only hide release versions for one reason -- they are not\n      // recommended. We would have to parse version numbers to differentiate\n      // between 'pre-release' and 'deprecated' (and sort-of-experimental, like\n      // '1.0-weird-trick) and we don't want to rely on version number\n      // conventions in code.\n      var versionsHidden =\n            (data.totalVersions - rows.length > 1) ?\n            \"Non-recommended versions of \" + self.name + \" have been hidden.\" :\n            \"One non-recommended version of \" + self.name + \" has been hidden.\";\n\n      Console.info(\n        versionsHidden,\n        \"To see \" + versionsPluralizer + \", run\",\n        Console.command(\"'meteor show --show-all \" + self.name + \"'\") + \".\");\n    }\n  },\n  // Displays all the versions of a given release in a human-readable\n  // format. Includes experimental and otherwise hidden versions. Takes in an\n  // array of version objects, each of which has the following keys:\n  //  - version: version string\n  //  - orderKey: (optional) orderKey of this version. Not all versions have\n  //    orderKeys.\n  //  - publishedOn: date of publication\n  //  - recommended: true if the version is recommended.\n  _displayAllReleaseVersions: function (versions) {\n    var self = this;\n    var columnOpts = { indent: 2, ignoreWidth: true };\n    // If we don't have any versions, then there is nothing to display.\n    if (! versions) { return; }\n\n    // We are going to print versions with order key ('versions'), separately\n    // from versions without an order key ('experimental versions').\n    var versionsDivided = _.groupBy(versions, function (v) {\n      return _.has(v, \"orderKey\");\n    });\n    var experimentalVersions = versionsDivided[false];\n    var versionsWithKey = versionsDivided[true];\n\n    if (versionsWithKey) {\n      // Sort versions that have order keys by order key, so that 1.0 comes\n      // after 0.9.4.1, etc.\n      versionsWithKey = _.sortBy(versionsWithKey, function (v) {\n        return v.orderKey;\n      });\n      Console.info(\"Versions:\");\n      var rows = [];\n      _.each(versionsWithKey, function (vr) {\n        var dateStr = utils.longformDate(vr.publishedOn);\n        if (! vr.recommended) {\n          rows.push([ vr.version, dateStr ]);\n        } else {\n          var paddedDate = padLongformDate(dateStr);\n          rows.push([ vr.version, paddedDate + \"  (recommended)\" ]);\n        }\n      });\n      Console.printTwoColumns(rows, columnOpts);\n    }\n\n    if (experimentalVersions) {\n      // We can't sort by order key, so sort by order of publication.\n      experimentalVersions = _.sortBy(experimentalVersions, function (v) {\n        return v.publishedOn;\n      });\n      Console.info(\"Experimental versions:\");\n      var rows = [];\n      _.each(experimentalVersions, function (vr) {\n        // Experimental versions cannot be recommended.\n        rows.push([vr.version, utils.longformDate(vr.publishedOn)]);\n      });\n      Console.printTwoColumns(rows, columnOpts);\n    }\n  }\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// show\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'show',\n  pretty: true,\n  minArgs: 0,\n  maxArgs: 1,\n  usesPackage: true,\n  options: {\n    \"show-all\": { type: Boolean },\n    \"ejson\": { type: Boolean }\n  },\n  catalogRefresh:\n    new catalog.Refresh.OnceAtStart(\n        { maxAge: DEFAULT_MAX_AGE_MS, ignoreErrors: true })\n}, function (options) {\n  var fullName;\n  var name;\n  var version;\n  // Because of the new projectContext interface, we need to initialize the\n  // project context in order to load the local catalog. This is not ideal.\n  var projectContext = getTempContext(options);\n\n  // If the user specified a query, process it.\n  if (! _.isEmpty(options.args)) {\n    // The foo@bar API means that we have to do some string parsing to figure out\n    // if we want a particular version.\n    fullName = options.args[0];\n    var splitArgs = fullName.split('@');\n    name = splitArgs[0];\n    version = (splitArgs.length > 1) ? splitArgs[1] : null;\n    if (splitArgs.length > 2) {\n      Console.error(\"Invalid request format: \" + fullName);\n      process.exit(1);\n    }\n  } else {\n    if (! options.packageDir) {\n      // Letting the user run 'meteor show' without arguments from a package\n      // directory is a pleasant shortcut, but the default should be specifying\n      // a query.\n      Console.error(\n        \"Please specify a package or release name to show information about it.\"\n      );\n      process.exit(1);\n    }\n    // Use the projectContext to get the name of the package.\n    var currentVersion =\n          projectContext.localCatalog.getVersionBySourceRoot(options.packageDir);\n    name = currentVersion.packageName;\n    version = \"local\";\n    fullName = name + \"@local\";\n  }\n  var query = null;\n\n  // First, we need to figure out if we are dealing with a package, or a\n  // release. We don't want to rely on capitalization conventions, so we will\n  // start by checking if a package by that name exists. If it does, then we are\n  // dealing with a package. (Unlike the normal projectContext, we want to\n  // prefer the remote record, if one exists, rather than the local record. The\n  // remote record contains data like 'homepage' and 'maintainers', that the\n  // local record does not).\n  var packageRecord =\n        catalog.official.getPackage(name) ||\n        projectContext.localCatalog.getPackage(name);\n  if (packageRecord) {\n    query =  new PackageQuery({\n      metaRecord: packageRecord,\n      version: version,\n      projectContext: projectContext,\n      showHiddenVersions: options[\"show-all\"],\n      showArchitecturesOS: options.ejson,\n      showDependencies: !! version\n    });\n  }\n\n  // If this is not a package, it might be a release. Let's check if there is\n  // a release by this name. There are no local releases, so we only need to\n  // check the official catalog.\n  if (! query) {\n    var releaseRecord = catalog.official.getReleaseTrack(name);\n    if (releaseRecord) {\n      query = new ReleaseQuery({\n        metaRecord: releaseRecord,\n        version: version,\n        showHiddenVersions: options[\"show-all\"]\n      });\n    }\n  }\n  // If we have failed to create a query, or if we have created a query and it\n  // couldn't gather any data about our request, then the item that we are\n  // looking for does not exist.\n  if (! query || ! query.data) {\n    return itemNotFound(fullName);\n  }\n\n  query.print({ ejson: !! options.ejson });\n  return 0;\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// search\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'search',\n  pretty: true,\n  usesPackage: true,\n  minArgs: 0, // So we can provide specific help\n  maxArgs: 1,\n  options: {\n    maintainer: { type: String },\n    \"show-all\": { type: Boolean },\n    ejson: { type: Boolean },\n    // Undocumented debug-only option (originally added for Velocity).\n    \"debug-only\": { type: Boolean },\n    \"prod-only\": { type: Boolean },\n    \"test-only\": { type: Boolean },\n  },\n  catalogRefresh:\n    new catalog.Refresh.OnceAtStart(\n      { maxAge: DEFAULT_MAX_AGE_MS, ignoreErrors: true })\n}, function (options) {\n  if (options.args.length === 0) {\n    Console.info(\n      \"To show all packages, do\", Console.command(\"meteor search .\"));\n    return 1;\n  }\n\n  // Because of the new projectContext interface, we need to initialize the\n  // project context in order to load the local catalog.\n  var projectContext = getTempContext(options);\n\n  // XXX We should push the queries into SQLite!\n  var allPackages = _.union(\n    catalog.official.getAllPackageNames(),\n    projectContext.localCatalog.getAllPackageNames());\n  var allReleases = catalog.official.getAllReleaseTracks();\n  var matchingPackages = [];\n  var matchingReleases = [];\n\n  var selector;\n  var pattern = options.args[0];\n\n  var search;\n  try {\n    search = new RegExp(pattern);\n  } catch (err) {\n    Console.error(err + \"\");\n    return 1;\n  }\n\n  // Do not return true on broken packages, unless requested in options.\n  var filterBroken = function (match, isRelease, name) {\n    // If the package does not match, or it is not a package at all or if we\n    // don't want to filter anyway, we do not care.\n    if (!match || isRelease) {\n      return match;\n    }\n    var vr;\n    if (!options[\"show-all\"]) {\n      // If we can't find a version in the local catalog, we want to get the\n      // latest mainline (ie: non-RC) version from the official catalog.\n      vr = projectContext.localCatalog.getLatestVersion(name) ||\n        catalog.official.getLatestMainlineVersion(name);\n    } else {\n      // We want the latest version of this package, and we don't care if it is\n      // a release candidate.\n      vr = projectContext.projectCatalog.getLatestVersion(name);\n    }\n    if (!vr) {\n      return false;\n    }\n    // If we did NOT ask for unmigrated packages and this package is unmigrated,\n    // we don't care.\n    if (!options[\"show-all\"] && vr.unmigrated){\n      return false;\n    }\n    // If we asked for debug-only packages and this package is NOT debug only,\n    // we don't care.\n    if (options[\"debug-only\"] && !vr.debugOnly) {\n      return false;\n    }\n    // If we asked for prod-only packages and this package is NOT prod only,\n    // we don't care.\n    if (options[\"prod-only\"] && !vr.prodOnly) {\n      return false;\n    }\n    // If we asked for test-only packages and this package is NOT test only,\n    // we don't care.\n    if (options[\"test-only\"] && !vr.testOnly) {\n      return false;\n    }\n    return true;\n  };\n\n  if (options.maintainer) {\n    var username =  options.maintainer;\n    // In the future, we should consider checking this on the server, but I\n    // suspect the main use of this command will be to deal with the automatic\n    // migration and uncommon in everyday use. From that perspective, it makes\n    // little sense to require you to be online to find out what packages you\n    // own; and the consequence of not mentioning your group packages until\n    // you update to a new version of meteor is not that dire.\n    selector = function (name, isRelease) {\n      var record;\n      // XXX make sure search works while offline\n      if (isRelease) {\n        record = catalog.official.getReleaseTrack(name);\n      } else {\n        record = catalog.official.getPackage(name);\n      }\n      return filterBroken(\n        (name.match(search) &&\n         record && !!_.findWhere(record.maintainers, {username: username})),\n        isRelease, name);\n    };\n  } else {\n    selector = function (name, isRelease) {\n      return filterBroken(name.match(search),\n        isRelease, name);\n    };\n  }\n\n  buildmessage.enterJob({ title: 'Searching packages' }, function () {\n    _.each(allPackages, function (pack) {\n      if (selector(pack, false)) {\n        var vr;\n        if (!options['show-all']) {\n          vr =\n            projectContext.localCatalog.getLatestVersion(pack) ||\n            catalog.official.getLatestMainlineVersion(pack);\n        } else {\n          vr = projectContext.projectCatalog.getLatestVersion(pack);\n        }\n        if (vr) {\n          matchingPackages.push({\n            name: pack,\n            description: vr.description,\n            latestVersion: vr.version,\n            lastUpdated: new Date(vr.lastUpdated)\n          });\n        }\n      }\n    });\n    _.each(allReleases, function (track) {\n      if (selector(track, true)) {\n        var vr = catalog.official.getDefaultReleaseVersionRecord(track);\n        if (vr) {\n          matchingReleases.push({\n            name: track,\n            description: vr.description,\n            latestVersion: vr.version,\n            lastUpdated: new Date(vr.lastUpdated)\n          });\n        }\n      }\n    });\n  });\n\n  if (options.ejson) {\n    var ret = {\n      packages: matchingPackages,\n      releases: matchingReleases\n    };\n    Console.rawInfo(formatEJSON(ret));\n    return 0;\n  }\n\n  var output = false;\n  if (!_.isEqual(matchingPackages, [])) {\n    output = true;\n    Console.info(\"Matching packages:\");\n    utils.printPackageList(matchingPackages);\n  }\n\n  if (!_.isEqual(matchingReleases, [])) {\n    output = true;\n    Console.info(\"Matching releases:\");\n    utils.printPackageList(matchingReleases);\n  }\n\n  if (!output) {\n    Console.error(pattern + ': nothing found');\n    catalogUtils.explainIfRefreshFailed();\n  } else {\n    Console.info(\n      \"You can use\", Console.command(\"'meteor show'\"),\n      \"to get more information on a specific item.\");\n  }\n});\n"]}