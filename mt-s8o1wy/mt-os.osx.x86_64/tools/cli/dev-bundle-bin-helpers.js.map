{"version":3,"sources":["/tools/cli/dev-bundle-bin-helpers.js"],"names":["fs","require","path","files","isWindows","process","platform","extensions","hasOwn","Object","prototype","hasOwnProperty","getDevBundle","exports","getCommand","name","devBundleDir","result","replace","isValidCommand","some","ext","cmd","join","statSync","isFile","e","charAt","meteorCommandsJsonPath","meteorCommands","call","getEnv","options","devBundle","devBundlePromise","Promise","resolve","convertToOSPath","then","paths","env","create","NPM_CONFIG_CACHE","USERPROFILE","PATH","Path","push","delimiter","addWindowsVariables","cachedMSVSVersion","PYTHON","GYP_MSVS_VERSION","nodeGypPylibDir","child","spawn","cwd","stdio","chunks","stdout","on","chunk","finish","codeOrError","Buffer","concat","toString"],"mappings":"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","file":"tools/cli/dev-bundle-bin-helpers.js.map","sourcesContent":["var fs = require(\"fs\");\nvar path = require(\"path\");\nvar files = require(\"../fs/mini-files.js\");\nvar isWindows = process.platform === \"win32\";\nvar extensions = isWindows ? [\".cmd\", \".exe\"] : [\"\"];\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction getDevBundle() {\n  return require(\"./dev-bundle.js\");\n}\nexports.getDevBundle = getDevBundle;\n\nexports.getCommand = function (name, devBundleDir) {\n  var result = null;\n\n  // Strip leading and/or trailing whitespace.\n  name = name.replace(/^\\s+|\\s+$/g, \"\");\n\n  if (! isValidCommand(name, devBundleDir)) {\n    return result;\n  }\n\n  extensions.some(function (ext) {\n    var cmd = path.join(devBundleDir, \"bin\", name + ext);\n    try {\n      if (fs.statSync(cmd).isFile()) {\n        result = cmd;\n        return true;\n      }\n    } catch (e) {\n      return false;\n    }\n  });\n\n  return result;\n};\n\nfunction isValidCommand(name, devBundleDir) {\n  if (name === \"node\" ||\n      name === \"npm\") {\n    return true;\n  }\n\n  if (! name || name.charAt(0) === \".\") {\n    // Disallow empty commands and commands that start with a period.\n    return false;\n  }\n\n  var meteorCommandsJsonPath =\n    path.join(devBundleDir, \"bin\", \".meteor-commands.json\");\n\n  try {\n    var meteorCommands = require(meteorCommandsJsonPath);\n  } catch (e) {\n    return false;\n  }\n\n  // If `meteor <name>` is already a Meteor command, don't let anything in\n  // dev_bundle/bin override it.\n  return ! hasOwn.call(meteorCommands, name);\n}\n\nexports.getEnv = function (options) {\n  var devBundle = options && options.devBundle;\n  var devBundlePromise = typeof devBundle === \"string\"\n    ? Promise.resolve(files.convertToOSPath(devBundle))\n    : getDevBundle();\n\n  return devBundlePromise.then(function (devBundleDir) {\n    var paths = [\n      // When npm looks for node, it must find dev_bundle/bin/node.\n      path.join(devBundleDir, \"bin\"),\n      // Also make available any scripts installed by packages in\n      // dev_bundle/lib/node_modules, such as node-gyp.\n      path.join(devBundleDir, \"lib\", \"node_modules\", \".bin\")\n    ];\n\n    var env = Object.create(process.env);\n\n    // Make sure we don't try to use the global ~/.npm cache accidentally.\n    if (! env.NPM_CONFIG_CACHE) {\n      env.NPM_CONFIG_CACHE = path.join(devBundleDir, \".npm\");\n    }\n\n    // This allows node-gyp to find Node headers and libraries in\n    // dev_bundle/.node-gyp.\n    env.USERPROFILE = devBundleDir;\n\n    var PATH = env.PATH || env.Path;\n    if (PATH) {\n      paths.push(PATH);\n    }\n\n    env.PATH = paths.join(path.delimiter);\n\n    if (process.platform === \"win32\") {\n      return addWindowsVariables(devBundleDir, env);\n    }\n\n    return env;\n  });\n};\n\n// Caching env.GYP_MSVS_VERSION allows us to avoid invoking Python every\n// time Meteor runs an npm command. TODO Store this on disk?\nvar cachedMSVSVersion;\n\nfunction addWindowsVariables(devBundleDir, env) {\n  // On Windows we provide a reliable version of python.exe for use by\n  // node-gyp (the tool that rebuilds binary node modules). #WinPy\n  env.PYTHON = env.PYTHON || path.join(\n    devBundleDir, \"python\", \"python.exe\");\n\n  // While the original process.env object allows for case insensitive\n  // access on Windows, Object.create interferes with that behavior,\n  // so here we ensure env.PATH === env.Path on Windows.\n  env.Path = env.PATH;\n\n  if (cachedMSVSVersion) {\n    env.GYP_MSVS_VERSION = cachedMSVSVersion;\n  }\n\n  if (env.GYP_MSVS_VERSION) {\n    return Promise.resolve(env);\n  }\n\n  // If $GYP_MSVS_VERSION was not provided, use the gyp Python library to\n  // infer it, or default to 2015 if that doesn't work.\n  return new Promise(function (resolve) {\n    var nodeGypPylibDir = path.join(\n      devBundleDir, \"lib\", \"node_modules\", \"node-gyp\", \"gyp\", \"pylib\"\n    );\n\n    var child = require(\"child_process\").spawn(env.PYTHON, [\"-c\", [\n      \"from gyp.MSVSVersion import SelectVisualStudioVersion\",\n      \"try:\",\n      \"  print SelectVisualStudioVersion(allow_fallback=False).short_name\",\n      \"except:\",\n      \"  print 2015\"\n    ].join(\"\\n\")], {\n      cwd: nodeGypPylibDir,\n      stdio: \"pipe\"\n    });\n\n    var chunks = [];\n    child.stdout.on(\"data\", function (chunk) {\n      chunks.push(chunk);\n    });\n\n    function finish(codeOrError) {\n      if (codeOrError) {\n        // In the event of any kind of error, default to 2015.\n        cachedMSVSVersion = \"2015\";\n      } else {\n        cachedMSVSVersion = Buffer.concat(chunks)\n          .toString(\"utf8\").replace(/^\\s+|\\s+$/g, \"\");\n      }\n\n      env.GYP_MSVS_VERSION = cachedMSVSVersion;\n\n      resolve(env);\n    }\n\n    child.on(\"error\", finish);\n    child.on(\"exit\", finish);\n  });\n}\n"]}