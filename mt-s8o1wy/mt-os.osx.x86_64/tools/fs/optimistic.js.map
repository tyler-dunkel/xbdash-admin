{"version":3,"sources":["/tools/fs/optimistic.js"],"names":["assert","wrap","Profile","watch","sha1","pathSep","pathIsAbsolute","statOrNull","lstat","readFile","readdir","ENABLED","process","env","METEOR_DISABLE_OPTIMISTIC_CACHING","makeOptimistic","name","fn","wrapper","args","maybeDependOnNodeModules","apply","makeCacheKey","path","parts","i","length","arg","push","join","subscribe","split","indexOf","ok","watcher","dirty","close","index","lastIndexOf","dependOnNodeModules","strictEqual","pop","npmDepCount","nodeModulesDir","endsWith","dirtyNodeModulesDirectory","optimisticStatOrNull","optimisticLStat","optimisticReadFile","optimisticReaddir","optimisticHashOrNull","e","code","optimisticReadJsonOrNull","buffer","JSON","parse"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SACEC,OADF,EAEEC,cAFF,EAGEC,UAHF,EAIEC,KAJF,EAKEC,QALF,EAMEC,OANF,QAOO,YAPP;;AASA;AACA;AACA,IAAMC,UAAU,CAAEC,QAAQC,GAAR,CAAYC,iCAA9B;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,EAA9B,EAAkC;AAChC,MAAMC,UAAUjB,KAAKU,UAAU,YAAmB;AAAA,sCAANQ,IAAM;AAANA,UAAM;AAAA;;AAChDC,6BAAyBD,KAAK,CAAL,CAAzB;AACA,WAAOF,GAAGI,KAAH,CAAS,IAAT,EAAeF,IAAf,CAAP;AACD,GAHoB,GAGjBF,EAHY,EAGR;AACNK,gBADM,0BACgB;AACpB,UAAI,CAAEX,OAAN,EAAe;AACb;AACA;AACD;;AAJmB,yCAANQ,IAAM;AAANA,YAAM;AAAA;;AAMpB,UAAMI,OAAOJ,KAAK,CAAL,CAAb;AACA,UAAI,CAAEb,eAAeiB,IAAf,CAAN,EAA4B;AAC1B;AACD;;AAED,UAAIC,QAAQ,EAAZ;;AAEA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,KAAKO,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,YAAIE,MAAMR,KAAKM,CAAL,CAAV;;AAEA,YAAI,OAAOE,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACA;AACA;AACD;;AAEDH,cAAMI,IAAN,CAAWD,GAAX;AACD;;AAED,aAAOH,MAAMK,IAAN,CAAW,IAAX,CAAP;AACD,KA3BK;AA6BNC,aA7BM,uBA6Ba;AAAA,yCAANX,IAAM;AAANA,YAAM;AAAA;;AACjB,UAAMI,OAAOJ,KAAK,CAAL,CAAb;;AAEA;AACA;AACA;AACA;AACA,UAAII,KAAKQ,KAAL,CAAW1B,OAAX,EAAoB2B,OAApB,CAA4B,cAA5B,KAA+C,CAAnD,EAAsD;AACpD;AACD;;AAEDhC,aAAOiC,EAAP,CAAU3B,eAAeiB,IAAf,CAAV;;AAEA,UAAIW,UAAU/B,MAAMoB,IAAN,EAAY,YAAM;AAC9BL,gBAAQiB,KAAR,mCAAiBhB,IAAjB;AACD,OAFa,CAAd;;AAIA,aAAO,YAAM;AACX,YAAIe,OAAJ,EAAa;AACXA,kBAAQE,KAAR;AACAF,oBAAU,IAAV;AACD;AACF,OALD;AAMD;AApDK,GAHQ,CAAhB;;AA0DA,SAAOhC,QAAQ,gBAAgBc,IAAxB,EAA8BE,OAA9B,CAAP;AACD;;AAED,SAASE,wBAAT,CAAkCG,IAAlC,EAAwC;AACtC,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACD;;AAED,MAAMC,QAAQD,KAAKQ,KAAL,CAAW1B,OAAX,CAAd;;AAEA,SAAO,IAAP,EAAa;AACX,QAAMgC,QAAQb,MAAMc,WAAN,CAAkB,cAAlB,CAAd;AACA,QAAID,QAAQ,CAAZ,EAAe;AACb;AACD;;AAEDb,UAAME,MAAN,GAAeW,QAAQ,CAAvB;AACAE,wBAAoBf,MAAMK,IAAN,CAAWxB,OAAX,CAApB;AACAL,WAAOwC,WAAP,CAAmBhB,MAAMiB,GAAN,EAAnB,EAAgC,cAAhC;AACD;AACF;;AAED,IAAIC,cAAc,CAAlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMH,sBAAsBtC,KAAK,0BAAkB;AACjDD,SAAOM,eAAeqC,cAAf,CAAP;AACA3C,SAAO2C,eAAeC,QAAf,CAAwBvC,UAAU,cAAlC,CAAP;;AAEA;AACA;AACA,SAAO,EAAEqC,WAAT;AAED,CAR2B,EAQzB;AACDZ,WADC,qBACSa,cADT,EACyB;AACxB,QAAIT,UAAU/B,MACZwC,cADY,EAEZ;AAAA,aAAMJ,oBAAoBJ,KAApB,CAA0BQ,cAA1B,CAAN;AAAA,KAFY,CAAd;;AAKA,WAAO,YAAY;AACjB,UAAIT,OAAJ,EAAa;AACXA,gBAAQE,KAAR;AACAF,kBAAU,IAAV;AACD;AACF,KALD;AAMD;AAbA,CARyB,CAA5B;;AAwBA;AACA;AACA,OAAO,SAASW,yBAAT,CAAmCF,cAAnC,EAAmD;AACxDJ,sBAAoBJ,KAApB,CAA0BQ,cAA1B;AACD;;AAED,OAAO,IAAMG,uBAAuB/B,eAAe,YAAf,EAA6BR,UAA7B,CAA7B;AACP,OAAO,IAAMwC,kBAAkBhC,eAAe,OAAf,EAAwBP,KAAxB,CAAxB;AACP,OAAO,IAAMwC,qBAAqBjC,eAAe,UAAf,EAA2BN,QAA3B,CAA3B;AACP,OAAO,IAAMwC,oBAAoBlC,eAAe,SAAf,EAA0BL,OAA1B,CAA1B;AACP,OAAO,IAAMwC,uBAAuBnC,eAAe,YAAf,EAA6B,YAAa;AAC5E,MAAI;AACF,WAAOX,KAAK4C,8CAAL,CAAP;AAED,GAHD,CAGE,OAAOG,CAAP,EAAU;AACV,QAAIA,EAAEC,IAAF,KAAW,QAAX,IACAD,EAAEC,IAAF,KAAW,QADf,EACyB;AACvB,YAAMD,CAAN;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAZmC,CAA7B;;AAcP,OAAO,IAAME,2BACbtC,eAAe,gBAAf,EAAiC,YAAa;AAC5C,MAAI;AACF,QAAIuC,SAASN,8CAAb;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,QAAIA,EAAEC,IAAF,KAAW,QAAf,EAAyB;AACvB,YAAMD,CAAN;AACD;AACD,WAAO,IAAP;AACD;AACD,SAAOI,KAAKC,KAAL,CAAWF,MAAX,CAAP;AACD,CAVD,CADO","file":"tools/fs/optimistic.js.map","sourcesContent":["import assert from \"assert\";\nimport { wrap } from \"optimism\";\nimport { Profile } from \"../tool-env/profile.js\";\nimport { watch } from \"./safe-watcher.js\";\nimport { sha1 } from \"./watch.js\";\nimport {\n  pathSep,\n  pathIsAbsolute,\n  statOrNull,\n  lstat,\n  readFile,\n  readdir,\n} from \"./files.js\";\n\n// When in doubt, the optimistic caching system can be completely disabled\n// by setting this environment variable.\nconst ENABLED = ! process.env.METEOR_DISABLE_OPTIMISTIC_CACHING;\n\nfunction makeOptimistic(name, fn) {\n  const wrapper = wrap(ENABLED ? function (...args) {\n    maybeDependOnNodeModules(args[0]);\n    return fn.apply(this, args);\n  } : fn, {\n    makeCacheKey(...args) {\n      if (! ENABLED) {\n        // Cache nothing when the optimistic caching system is disabled.\n        return;\n      }\n\n      const path = args[0];\n      if (! pathIsAbsolute(path)) {\n        return;\n      }\n\n      var parts = [];\n\n      for (var i = 0; i < args.length; ++i) {\n        var arg = args[i];\n\n        if (typeof arg !== \"string\") {\n          // If any of the arguments is not a string, then we won't cache the\n          // result of the corresponding file.* method invocation.\n          return;\n        }\n\n        parts.push(arg);\n      }\n\n      return parts.join(\"\\0\");\n    },\n\n    subscribe(...args) {\n      const path = args[0];\n\n      // Starting a watcher for every single file contained within a\n      // node_modules directory would be prohibitively expensive, so\n      // instead we rely on dependOnNodeModules to tell us when files in\n      // node_modules directories might have changed.\n      if (path.split(pathSep).indexOf(\"node_modules\") >= 0) {\n        return;\n      }\n\n      assert.ok(pathIsAbsolute(path));\n\n      let watcher = watch(path, () => {\n        wrapper.dirty(...args);\n      });\n\n      return () => {\n        if (watcher) {\n          watcher.close();\n          watcher = null;\n        }\n      };\n    }\n  });\n\n  return Profile(\"optimistic \" + name, wrapper);\n}\n\nfunction maybeDependOnNodeModules(path) {\n  if (typeof path !== \"string\") {\n    return;\n  }\n\n  const parts = path.split(pathSep);\n\n  while (true) {\n    const index = parts.lastIndexOf(\"node_modules\");\n    if (index < 0) {\n      return;\n    }\n\n    parts.length = index + 1;\n    dependOnNodeModules(parts.join(pathSep));\n    assert.strictEqual(parts.pop(), \"node_modules\");\n  }\n}\n\nlet npmDepCount = 0;\n\n// Called by any optimistic function that receives a */node_modules/* path\n// as its first argument, so that we can later bulk-invalidate the results\n// of those calls if the contents of the node_modules directory change.\n// Note that this strategy will not detect changes within subdirectories\n// of this node_modules directory, but that's ok because the use case we\n// care about is adding or removing npm packages.\nconst dependOnNodeModules = wrap(nodeModulesDir => {\n  assert(pathIsAbsolute(nodeModulesDir));\n  assert(nodeModulesDir.endsWith(pathSep + \"node_modules\"));\n\n  // Always return something different to prevent optimism from\n  // second-guessing the dirtiness of this function.\n  return ++npmDepCount;\n\n}, {\n  subscribe(nodeModulesDir) {\n    let watcher = watch(\n      nodeModulesDir,\n      () => dependOnNodeModules.dirty(nodeModulesDir),\n    );\n\n    return function () {\n      if (watcher) {\n        watcher.close();\n        watcher = null;\n      }\n    };\n  }\n});\n\n// Invalidate all optimistic results derived from paths involving the\n// given node_modules directory.\nexport function dirtyNodeModulesDirectory(nodeModulesDir) {\n  dependOnNodeModules.dirty(nodeModulesDir);\n}\n\nexport const optimisticStatOrNull = makeOptimistic(\"statOrNull\", statOrNull);\nexport const optimisticLStat = makeOptimistic(\"lstat\", lstat);\nexport const optimisticReadFile = makeOptimistic(\"readFile\", readFile);\nexport const optimisticReaddir = makeOptimistic(\"readdir\", readdir);\nexport const optimisticHashOrNull = makeOptimistic(\"hashOrNull\", (...args) => {\n  try {\n    return sha1(optimisticReadFile(...args));\n\n  } catch (e) {\n    if (e.code !== \"EISDIR\" &&\n        e.code !== \"ENOENT\") {\n      throw e;\n    }\n  }\n\n  return null;\n});\n\nexport const optimisticReadJsonOrNull =\nmakeOptimistic(\"readJsonOrNull\", (...args) => {\n  try {\n    var buffer = optimisticReadFile(...args);\n  } catch (e) {\n    if (e.code !== \"ENOENT\") {\n      throw e;\n    }\n    return null;\n  }\n  return JSON.parse(buffer);\n});\n"]}