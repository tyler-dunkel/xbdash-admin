{"version":3,"sources":["/tools/isobuild/package-npm.js"],"names":["ensureOnlyValidVersions","buildmessage","NpmDiscards","nodeRequire","require","PackageNpm","_discards","_dependencies","depends","dependencies","error","useMyCaller","forCordova","e","message","downcase","strip","discards","merge","name"],"mappings":";;AAAA,SAASA,uBAAT,QAAwC,mBAAxC;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAEA,IAAMC,cAAcC,OAApB;;AAEA;;AAEA,WAAaC,UAAb;AACE,wBAAc;AAAA;;AACZ;AACA;AACA,SAAKC,SAAL,GAAiB,IAAIJ,WAAJ,EAAjB;AACA,SAAKK,aAAL,GAAqB,IAArB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARF,uBAqCEC,OArCF,oBAqCUC,YArCV,EAqCwB;AACpB;AACA;AACA;AACA,QAAI,KAAKF,aAAT,EAAwB;AACtBN,mBAAaS,KAAb,CAAmB,iDAAnB,EACmB,EAAEC,aAAa,IAAf,EADnB;AAEA;AACA;AACD;;AAED,QAAI,QAAOF,YAAP,yCAAOA,YAAP,OAAwB,QAA5B,EAAsC;AACpCR,mBAAaS,KAAb,CAAmB,8CACA,mCADnB,EAEmB,EAAEC,aAAa,IAAf,EAFnB;AAGA;AACA;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,QAAI;AACFX,8BAAwBS,YAAxB,EAAsC;AACpCG,oBAAY;AADwB,OAAtC;AAID,KALD,CAKE,OAAOC,CAAP,EAAU;AACVZ,mBAAaS,KAAb,CAAmBG,EAAEC,OAArB,EAA8B;AAC5BH,qBAAa,IADe;AAE5BI,kBAAU;AAFkB,OAA9B;;AAKA;AACA;AACD;;AAED,SAAKR,aAAL,GAAqBE,YAArB;AACD,GA7EH;;AA+EE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAhGF,uBAiGEO,KAjGF,kBAiGQC,QAjGR,EAiGkB;AACd,SAAKX,SAAL,CAAeY,KAAf,CAAqBD,QAArB;AACD,GAnGH;;AAAA,uBAqGEb,OArGF,oBAqGUe,IArGV,EAqGgB;AACZ,QAAI;AACF,aAAOhB,YAAYgB,IAAZ,CAAP,CADE,CACwB;AAC3B,KAFD,CAEE,OAAON,CAAP,EAAU;AACVZ,mBAAaS,KAAb,CACE,4BAA4BS,IAA5B,GACE,+DAFJ,EAGE,EAAER,aAAa,IAAf,EAHF;AAIA;AACA;AACD;AACF,GAhHH;;AAAA;AAAA","file":"tools/isobuild/package-npm.js.map","sourcesContent":["import { ensureOnlyValidVersions } from \"../utils/utils.js\";\nimport buildmessage from \"../utils/buildmessage.js\";\nimport NpmDiscards from \"./npm-discards.js\";\n\nconst nodeRequire = require;\n\n// == Class of the `Npm` object visible in package.js ==\n\nexport class PackageNpm {\n  constructor() {\n    // Files to be stripped from the installed NPM dependency tree. See\n    // the Npm.strip comment below for further usage information.\n    this._discards = new NpmDiscards;\n    this._dependencies = null;\n  }\n\n  /**\n   * @summary Specify which [NPM](https://www.npmjs.org/) packages\n   * your Meteor package depends on.\n   * @param  {Object} dependencies An object where the keys are package\n   * names and the values are one of:\n   *   1. Version numbers in string form\n   *   2. Http(s) URLs to a git commit by SHA.   \n   *   3. Git URLs in the format described [here](https://docs.npmjs.com/files/package.json#git-urls-as-dependencies)\n   *\n   * Https URL example:\n   *\n   * ```js\n   * Npm.depends({\n   *   moment: \"2.8.3\",\n   *   async: \"https://github.com/caolan/async/archive/71fa2638973dafd8761fa5457c472a312cc820fe.tar.gz\"\n   * });\n   * ```\n   *\n   * Git URL example:\n   *\n   * ```js\n   * Npm.depends({\n   *   moment: \"2.8.3\",\n   *   async: \"git+https://github.com/caolan/async#master\"\n   * });\n   * ```\n   * @locus package.js\n   * @memberOf  Npm\n   */\n  depends(dependencies) {\n    // XXX make dependencies be separate between use and test, so that\n    // production doesn't have to ship all of the npm modules used by test\n    // code\n    if (this._dependencies) {\n      buildmessage.error(\"Npm.depends may only be called once per package\",\n                         { useMyCaller: true });\n      // recover by ignoring the Npm.depends line\n      return;\n    }\n\n    if (typeof dependencies !== 'object') {\n      buildmessage.error(\"the argument to Npm.depends should be an \" +\n                         \"object, like this: {gcd: '0.0.0'}\",\n                         { useMyCaller: true });\n      // recover by ignoring the Npm.depends line\n      return;\n    }\n\n    // don't allow npm fuzzy versions so that there is complete\n    // consistency when deploying a meteor app\n    //\n    // XXX use something like seal or lockdown to have *complete*\n    // confidence we're running the same code?\n    try {\n      ensureOnlyValidVersions(dependencies, {\n        forCordova: false\n      });\n\n    } catch (e) {\n      buildmessage.error(e.message, {\n        useMyCaller: true,\n        downcase: true\n      });\n\n      // recover by ignoring the Npm.depends line\n      return;\n    }\n\n    this._dependencies = dependencies;\n  }\n\n  // The `Npm.strip` method makes up for packages that have missing\n  // or incomplete .npmignore files by telling the bundler to strip out\n  // certain unnecessary files and/or directories during `meteor build`.\n  //\n  // The `discards` parameter should be an object whose keys are\n  // top-level package names and whose values are arrays of strings\n  // (or regular expressions) that match paths in that package's\n  // directory that should be stripped before installation. For\n  // example:\n  //\n  //   Npm.strip({\n  //     connect: [/*\\.wmv$/],\n  //     useragent: [\"tests/\"]\n  //   });\n  //\n  // This means (1) \"remove any files with the `.wmv` extension from\n  // the 'connect' package directory\" and (2) \"remove the 'tests'\n  // directory from the 'useragent' package directory.\"\n  strip(discards) {\n    this._discards.merge(discards);\n  }\n\n  require(name) {\n    try {\n      return nodeRequire(name); // from the dev bundle\n    } catch (e) {\n      buildmessage.error(\n        \"can't find npm module '\" + name +\n          \"'. In package.js, Npm.require can only find built-in modules.\",\n        { useMyCaller: true });\n      // recover by, uh, returning undefined, which is likely to\n      // have some knock-on effects\n    }\n  }\n}\n"]}