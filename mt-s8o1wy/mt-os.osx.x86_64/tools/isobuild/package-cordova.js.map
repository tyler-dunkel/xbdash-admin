{"version":3,"sources":["/tools/isobuild/package-cordova.js"],"names":["ensureOnlyValidVersions","buildmessage","PackageCordova","_dependencies","depends","dependencies","error","useMyCaller","forCordova","e","message","downcase"],"mappings":";;AAAA,SAASA,uBAAT,QAAwC,mBAAxC;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA;;AAEA,WAAaC,cAAb;AACE,4BAAc;AAAA;;AACZ,SAAKC,aAAL,GAAqB,IAArB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALF,2BAsCEC,OAtCF,oBAsCUC,YAtCV,EAsCwB;AACpB;AACA;AACA;AACA,QAAI,KAAKF,aAAT,EAAwB;AACtBF,mBAAaK,KAAb,CAAmB,qDAAnB,EACmB,EAAEC,aAAa,IAAf,EADnB;AAEA;AACA;AACD;;AAED,QAAI,QAAOF,YAAP,yCAAOA,YAAP,OAAwB,QAA5B,EAAsC;AACpCJ,mBAAaK,KAAb,CAAmB,kDACA,mCADnB,EAEmB,EAAEC,aAAa,IAAf,EAFnB;AAGA;AACA;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,QAAI;AACFP,8BAAwBK,YAAxB,EAAsC;AACpCG,oBAAY;AADwB,OAAtC;AAID,KALD,CAKE,OAAOC,CAAP,EAAU;AACVR,mBAAaK,KAAb,CAAmBG,EAAEC,OAArB,EAA8B;AAC5BH,qBAAa,IADe;AAE5BI,kBAAU;AAFkB,OAA9B;;AAKA;AACA;AACD;;AAED,SAAKR,aAAL,GAAqBE,YAArB;AACD,GA9EH;;AAAA;AAAA","file":"tools/isobuild/package-cordova.js.map","sourcesContent":["import { ensureOnlyValidVersions } from \"../utils/utils.js\";\nimport buildmessage from \"../utils/buildmessage.js\";\n\n// == Class of the `Cordova` object visible in package.js ==\n\nexport class PackageCordova {\n  constructor() {\n    this._dependencies = null;\n  }\n\n  /**\n   * @summary Specify which [Cordova / PhoneGap](http://cordova.apache.org/)\n   * plugins your Meteor package depends on.\n   *\n   * Plugins are installed from\n   * [plugins.cordova.io](http://plugins.cordova.io/), so the plugins and\n   * versions specified must exist there. Alternatively, the version\n   * can be replaced with a GitHub tarball URL as described in the\n   * [Cordova](https://github.com/meteor/meteor/wiki/Meteor-Cordova-integration#meteor-packages-with-cordova-dependencies)\n   * page of the Meteor wiki on GitHub.\n   * @param  {Object} dependencies An object where the keys are plugin\n   * names and the values are version numbers or GitHub tarball URLs\n   * in string form.\n   * Example:\n   *\n   * ```js\n   * Cordova.depends({\n   *   \"org.apache.cordova.camera\": \"0.3.0\"\n   * });\n   * ```\n   *\n   * Alternatively, with a GitHub URL:\n   *\n   * ```js\n   * Cordova.depends({\n   *   \"org.apache.cordova.camera\":\n   *     \"https://github.com/apache/cordova-plugin-camera/tarball/d84b875c449d68937520a1b352e09f6d39044fbf\"\n   * });\n   * ```\n   *\n   * @locus package.js\n   * @memberOf  Cordova\n   */\n  depends(dependencies) {\n    // XXX make cordovaDependencies be separate between use and test, so that\n    // production doesn't have to ship all of the npm modules used by test\n    // code\n    if (this._dependencies) {\n      buildmessage.error(\"Cordova.depends may only be called once per package\",\n                         { useMyCaller: true });\n      // recover by ignoring the Cordova.depends line\n      return;\n    }\n\n    if (typeof dependencies !== 'object') {\n      buildmessage.error(\"the argument to Cordova.depends should be an \" +\n                         \"object, like this: {gcd: '0.0.0'}\",\n                         { useMyCaller: true });\n      // recover by ignoring the Cordova.depends line\n      return;\n    }\n\n    // don't allow cordova fuzzy versions so that there is complete\n    // consistency when deploying a meteor app\n    //\n    // XXX use something like seal or lockdown to have *complete*\n    // confidence we're running the same code?\n    try {\n      ensureOnlyValidVersions(dependencies, {\n        forCordova: true\n      });\n\n    } catch (e) {\n      buildmessage.error(e.message, {\n        useMyCaller: true,\n        downcase: true\n      });\n\n      // recover by ignoring the Cordova.depends line\n      return;\n    }\n\n    this._dependencies = dependencies;\n  }\n}\n"]}