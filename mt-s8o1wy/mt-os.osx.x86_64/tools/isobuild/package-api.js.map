{"version":3,"sources":["/tools/isobuild/package-api.js"],"names":["assert","require","_","buildmessage","utils","compiler","archinfo","catalog","pathRelative","convertToPosixPath","toArray","x","isArray","toArchArray","arch","ALL_ARCHES","uniq","map","mapWhereToArch","i","length","inputArch","isMatch","any","actualArch","matches","error","useMyCaller","where","forAllMatchingArchs","archs","f","each","matchArch","PackageAPI","options","self","ok","buildingIsopackets","files","exports","uses","implies","assets","sources","main","releaseRecords","extend","prototype","use","names","isObject","unordered","weak","name","parsed","parsePackageConstraint","e","versionParserError","message","a","push","constraint","constraintString","imply","debugOnly","prodOnly","testOnly","isIsobuildFeaturePackage","addFiles","paths","fileOptions","isAsset","_addFiles","mainModule","path","filesForArch","source","relPath","oldMain","addAssets","type","Error","p","indexOf","errors","filesOfType","has","typeName","versionsFrom","releases","release","DEFAULT_TRACK","relInf","split","releaseRecord","official","getReleaseVersion","tags","refreshCouldHelp","symbols","symbol","match","w","add_files"],"mappings":"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","file":"tools/isobuild/package-api.js.map","sourcesContent":["var assert = require(\"assert\");\nvar _ = require(\"underscore\");\nvar buildmessage = require('../utils/buildmessage.js');\nvar utils = require('../utils/utils.js');\nvar compiler = require('./compiler.js');\nvar archinfo = require('../utils/archinfo.js');\nvar catalog = require('../packaging/catalog/catalog.js');\n\n// It's important that we import these functions individually instead of\n// importing the whole files.* namespace, because now it's easier to tell\n// that this module doesn't actually touch the file system.\nimport {\n  pathRelative,\n  convertToPosixPath,\n} from \"../fs/files.js\";\n\nfunction toArray (x) {\n  if (_.isArray(x)) {\n    return x;\n  }\n  return x ? [x] : [];\n}\n\nfunction toArchArray (arch) {\n  if (! _.isArray(arch)) {\n    arch = arch ? [arch] : compiler.ALL_ARCHES;\n  }\n  arch = _.uniq(arch);\n  arch = _.map(arch, mapWhereToArch);\n\n  // avoid using _.each so as to not add more frames to skip\n  for (var i = 0; i < arch.length; ++i) {\n    var inputArch = arch[i];\n    var isMatch = _.any(_.map(compiler.ALL_ARCHES, function (actualArch) {\n      return archinfo.matches(actualArch, inputArch);\n    }));\n    if (! isMatch) {\n      buildmessage.error(\n        \"Invalid 'where' argument: '\" + inputArch + \"'\",\n        // skip toArchArray in addition to the actual API function\n        {useMyCaller: 1});\n    }\n  }\n  return arch;\n}\n\n// We currently have a 1 to 1 mapping between 'where' and 'arch'.\n// 'client' -> 'web'\n// 'server' -> 'os'\n// '*' -> '*'\nfunction mapWhereToArch (where) {\n  if (where === 'server') {\n    return 'os';\n  } else if (where === 'client') {\n    return 'web';\n  } else {\n    return where;\n  }\n}\n\n// Iterates over the list of target archs and calls f(arch) for all archs\n// that match an element of self.allarchs.\nfunction forAllMatchingArchs (archs, f) {\n  _.each(archs, function (arch) {\n    _.each(compiler.ALL_ARCHES, function (matchArch) {\n      if (archinfo.matches(matchArch, arch)) {\n        f(matchArch);\n      }\n    });\n  });\n}\n\n/**\n * @name  PackageAPI\n * @class PackageAPI\n * @instanceName api\n * @global\n * @summary Type of the API object passed into the `Package.onUse` function.\n */\nexport function PackageAPI(options) {\n  var self = this;\n  assert.ok(self instanceof PackageAPI);\n\n  options = options || {};\n\n  self.buildingIsopackets = !!options.buildingIsopackets;\n\n  // source files used.\n  // It's a multi-level map structured as:\n  //   arch -> sources|assets -> relPath -> {relPath, fileOptions}\n  self.files = {};\n\n  // symbols exported\n  self.exports = {};\n\n  // packages used and implied (keys are 'package', 'unordered', and\n  // 'weak').  an \"implied\" package is a package that will be used by a unibuild\n  // which uses us.\n  self.uses = {};\n  self.implies = {};\n\n  _.each(compiler.ALL_ARCHES, function (arch) {\n    self.files[arch] = {\n      assets: [],\n      sources: [],\n      main: null,\n    };\n\n    self.exports[arch] = [];\n    self.uses[arch] = [];\n    self.implies[arch] = [];\n  });\n\n  self.releaseRecords = [];\n}\n\n_.extend(PackageAPI.prototype, {\n  // Called when this package wants to make another package be\n  // used. Can also take literal package objects, if you have\n  // anonymous packages you want to use (eg, app packages)\n  //\n  // @param arch 'web', 'web.browser', 'web.cordova', 'server',\n  // or an array of those.\n  // The default is ['web', 'server'].\n  //\n  // options can include:\n  //\n  // - unordered: if true, don't require this package to load\n  //   before us -- just require it to be loaded anytime. Also\n  //   don't bring this package's imports into our\n  //   namespace. If false, override a true value specified in\n  //   a previous call to use for this package name. (A\n  //   limitation of the current implementation is that this\n  //   flag is not tracked per-environment or per-role.)  This\n  //   option can be used to resolve circular dependencies in\n  //   exceptional circumstances, eg, the 'meteor' package\n  //   depends on 'handlebars', but all packages (including\n  //   'handlebars') have an implicit dependency on\n  //   'meteor'. Internal use only -- future support of this\n  //   is not guaranteed. #UnorderedPackageReferences\n  //\n  // - weak: if true, don't require this package to load at all, but if\n  //   it's going to load, load it before us.  Don't bring this\n  //   package's imports into our namespace and don't allow us to use\n  //   its plugins. (Has the same limitation as \"unordered\" that this\n  //   flag is not tracked per-environment or per-role; this may\n  //   change.)\n\n  /**\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Depend on package `packagename`.\n   * @locus package.js\n   * @param {String|String[]} packageNames Packages being depended on.\n   * Package names may be suffixed with an @version tag.\n   *\n   * In general, you must specify a package's version (e.g.,\n   * `'accounts@1.0.0'` to use version 1.0.0 or a higher\n   * compatible version (ex: 1.0.1, 1.5.0, etc.)  of the\n   * `accounts` package). If you are sourcing core\n   * packages from a Meteor release with `versionsFrom`, you may leave\n   * off version names for core packages. You may also specify constraints,\n   * such as `my:forms@=1.0.0` (this package demands `my:forms` at `1.0.0` exactly),\n   * or `my:forms@1.0.0 || =2.0.1` (`my:forms` at `1.x.y`, or exactly `2.0.1`).\n   * @param {String|String[]} [architecture] If you only use the package on the\n   * server (or the client), you can pass in the second argument (e.g.,\n   * `'server'`, `'client'`, `'web.browser'`, `'web.cordova'`) to specify\n   * what architecture the package is used with. You can specify multiple\n   * architectures by passing in an array, for example `['web.cordova', 'os.linux']`.\n   * @param {Object} [options]\n   * @param {Boolean} options.weak Establish a weak dependency on a\n   * package. If package A has a weak dependency on package B, it means\n   * that including A in an app does not force B to be included too — but,\n   * if B is included or by another package, then B will load before A.\n   * You can use this to make packages that optionally integrate with or\n   * enhance other packages if those packages are present.\n   * When you weakly depend on a package you don't see its exports.\n   * You can detect if the possibly-present weakly-depended-on package\n   * is there by seeing if `Package.foo` exists, and get its exports\n   * from the same place.\n   * @param {Boolean} options.unordered It's okay to load this dependency\n   * after your package. (In general, dependencies specified by `api.use`\n   * are loaded before your package.) You can use this option to break\n   * circular dependencies.\n   */\n  use: function (names, arch, options) {\n    var self = this;\n\n    // Support `api.use(package, {weak: true})` without arch.\n    if (_.isObject(arch) && !_.isArray(arch) && !options) {\n      options = arch;\n      arch = null;\n    }\n    options = options || {};\n\n    names = toArray(names);\n    arch = toArchArray(arch);\n\n    // A normal dependency creates an ordering constraint and a \"if I'm\n    // used, use that\" constraint. Unordered dependencies lack the\n    // former; weak dependencies lack the latter. There's no point to a\n    // dependency that lacks both!\n    if (options.unordered && options.weak) {\n      buildmessage.error(\n        \"A dependency may not be both unordered and weak.\",\n        { useMyCaller: true });\n      // recover by ignoring\n      return;\n    }\n\n    // using for loop rather than underscore to help with useMyCaller\n    for (var i = 0; i < names.length; ++i) {\n      var name = names[i];\n      try {\n        var parsed = utils.parsePackageConstraint(name);\n      } catch (e) {\n        if (!e.versionParserError) {\n          throw e;\n        }\n        buildmessage.error(e.message, {useMyCaller: true});\n        // recover by ignoring\n        continue;\n      }\n\n      forAllMatchingArchs(arch, function (a) {\n        self.uses[a].push({\n          package: parsed.package,\n          constraint: parsed.constraintString,\n          unordered: options.unordered || false,\n          weak: options.weak || false\n        });\n      });\n    }\n  },\n\n  // Called when this package wants packages using it to also use\n  // another package.  eg, for umbrella packages which want packages\n  // using them to also get symbols or plugins from their components.\n\n  /**\n   *\n   * @memberOf PackageAPI\n   * @summary Give users of this package access to another package (by passing\n   * in the string `packagename`) or a collection of packages (by passing in\n   * an array of strings [`packagename1`, `packagename2`]\n   * @locus package.js\n   * @instance\n   * @param {String|String[]} packageNames Name of a package, or array of\n   * package names, with an optional @version component for each.\n   * @param {String|String[]} [architecture] If you only use the package on\n   * the server (or the client), you can pass in the second argument (e.g.,\n   * `'server'`, `'client'`, `'web.browser'`, `'web.cordova'`) to specify what\n   * architecture the package is used with. You can specify multiple\n   * architectures by passing in an array, for example `['web.cordova',\n   * 'os.linux']`.\n   */\n  imply: function (names, arch) {\n    var self = this;\n\n    // We currently disallow build plugins in\n    // debugOnly/prodOnly/testOnly packages; but if you could use\n    // imply in a debugOnly package, you could pull in the build\n    // plugin from an implied package, which would have the same\n    // problem as allowing build plugins directly in the package. So\n    // no imply either!\n    if (self.debugOnly || self.prodOnly || self.testOnly) {\n      buildmessage.error(\"can't use imply in packages that are debugOnly, prodOnly or testOnly\");\n      // recover by ignoring\n      return;\n    }\n\n    names = toArray(names);\n    arch = toArchArray(arch);\n\n    // using for loop rather than underscore to help with useMyCaller\n    for (var i = 0; i < names.length; ++i) {\n      var name = names[i];\n      try {\n        var parsed = utils.parsePackageConstraint(name);\n      } catch (e) {\n        if (!e.versionParserError) {\n          throw e;\n        }\n        buildmessage.error(e.message, {useMyCaller: true});\n        // recover by ignoring\n        continue;\n      }\n\n      // api.imply('isobuild:compiler-plugin') doesn't really make any sense. If\n      // we change our mind and think it makes sense, we can always implement it\n      // later...\n      if (compiler.isIsobuildFeaturePackage(parsed.package)) {\n        buildmessage.error(\n          `to declare that your package requires the build tool feature ` +\n            `'{parsed.package}', use 'api.use', not 'api.imply'`);\n        // recover by ignoring\n        continue;\n      }\n\n      forAllMatchingArchs(arch, function (a) {\n        // We don't allow weak or unordered implies, since the main\n        // purpose of imply is to provide imports and plugins.\n        self.implies[a].push({\n          package: parsed.package,\n          constraint: parsed.constraintString\n        });\n      });\n    }\n  },\n\n  // Top-level call to add a source file to a package. It will\n  // be processed according to its extension (eg, *.coffee\n  // files will be compiled to JavaScript).\n\n  /**\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Specify source code files for your package.\n   * @locus package.js\n   * @param {String|String[]} filenames Paths to the source files.\n   * @param {String|String[]} [architecture] If you only want to use the file\n   * on the server (or the client), you can pass this argument\n   * (e.g., 'server', 'client', 'web.browser', 'web.cordova') to specify\n   * what architecture the file is used with. You can specify multiple\n   * architectures by passing in an array, for example\n   * `['web.cordova', 'os.linux']`. By default, the file will be loaded on both\n   * server and client.\n   * @param {Object} [options] Options that will be passed to build\n   * plugins.\n   * @param {Boolean} [options.bare] If this file is JavaScript code or will\n   * be compiled into JavaScript code by a build plugin, don't wrap the\n   * resulting file in a closure. Has the same effect as putting a file into the\n   * `client/compatibility` directory in an app.\n   */\n  addFiles: function (paths, arch, fileOptions) {\n    if (fileOptions && fileOptions.isAsset) {\n      // XXX it would be great to print a warning here, see the issue:\n      // https://github.com/meteor/meteor/issues/5495\n      this._addFiles(\"assets\", paths, arch);\n      return;\n    }\n\n    // Watch out - we rely on the levels of stack traces inside this\n    // function so don't wrap it in another function without changing that logic\n    this._addFiles(\"sources\", paths, arch, fileOptions);\n  },\n\n  mainModule(path, arch) {\n    arch = toArchArray(arch);\n    forAllMatchingArchs(arch, a => {\n      const filesForArch = this.files[a];\n      const source = {\n        relPath: pathRelative(\".\", path),\n        fileOptions: {\n          mainModule: true\n        }\n      };\n\n      const oldMain = filesForArch.main;\n      if (oldMain) {\n        // It's not an error to call api.mainModule multiple times, but\n        // the last call takes precedence over the earlier calls.\n        oldMain.fileOptions.mainModule = false;\n      }\n\n      filesForArch.main = source;\n      filesForArch.sources.push(source);\n    });\n  },\n\n  /**\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Specify asset files for your package. They can be accessed via\n   * the [Assets API](#assets) from the server, or at the URL\n   * `/packages/username_package-name/file-name` from the client, depending on the\n   * architecture passed.\n   * @locus package.js\n   * @param {String|String[]} filenames Paths to the asset files.\n   * @param {String|String[]} architecture Specify where this asset should be\n   * available (e.g., 'server', 'client', 'web.browser', 'web.cordova'). You can\n   * specify multiple architectures by passing in an array, for example\n   * `['web.cordova', 'os.linux']`.\n   */\n  addAssets(paths, arch) {\n    if(!arch) {\n      buildmessage.error('addAssets requires a second argument specifying ' +\n        'where the asset should be available. For example: \"client\", ' +\n        '\"server\", or [\"client\", \"server\"].', { useMyCaller: true });\n      return;\n    }\n\n    // Watch out - we rely on the levels of stack traces inside this\n    // function so don't wrap it in another function without changing that logic\n    this._addFiles(\"assets\", paths, arch);\n  },\n\n  /**\n   * Internal method used by addFiles and addAssets.\n   */\n  _addFiles(type, paths, arch, fileOptions) {\n    if (type !== \"sources\" && type !== \"assets\") {\n      throw new Error(`Can only handle sources and assets, not '${type}'.`);\n    }\n\n    var self = this;\n\n    paths = toArray(paths);\n    arch = toArchArray(arch);\n\n    // Convert Dos-style paths to Unix-style paths.\n    // XXX it is possible to convert an already Unix-style path by mistake\n    // and break it. e.g.: 'some\\folder/anotherFolder' is a valid path\n    // consisting of two components. #WindowsPathApi\n    paths = _.map(paths, function (p) {\n      // Normalize ./foo.js to foo.js.\n      p = pathRelative(\".\", p);\n\n      if (p.indexOf('/') !== -1) {\n        // it is already a Unix-style path most likely\n        return p;\n      }\n\n      return convertToPosixPath(p, true);\n    });\n\n    var errors = [];\n    _.each(paths, function (path) {\n      forAllMatchingArchs(arch, function (a) {\n        const filesOfType = self.files[a][type];\n\n        // Check if we have already added a file at this path\n        if (_.has(filesOfType, path)) {\n          // We want the singular form of the file type\n          const typeName = {\n            sources: 'source',\n            assets: 'asset'\n          }[type];\n\n          errors.push(`Duplicate ${typeName} file: ${path}`);\n          return;\n        }\n\n        const source = {\n          relPath: path\n        };\n\n        if (fileOptions) {\n          source.fileOptions = fileOptions;\n        }\n\n        filesOfType.push(source);\n      });\n    });\n\n    // Spit out all the errors at the end, where the number of stack frames to\n    // skip is just 2 (this function and its callers) instead of something like\n    // 7 from forAllMatchingArchs and _.each.  Avoid using _.each here to keep\n    // stack predictable.\n    for (var i = 0; i < errors.length; ++i) {\n      buildmessage.error(errors[i], { useMyCaller: 1 });\n    }\n  },\n\n  // Use this release to resolve unclear dependencies for this package. If\n  // you don't fill in dependencies for some of your implies/uses, we will\n  // look at the packages listed in the release to figure that out.\n\n  /**\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Use versions of core packages from a release. Unless provided,\n   * all packages will default to the versions released along with\n   * `meteorRelease`. This will save you from having to figure out the exact\n   * versions of the core packages you want to use. For example, if the newest\n   * release of meteor is `METEOR@0.9.0` and it includes `jquery@1.0.0`, you\n   * can write `api.versionsFrom('METEOR@0.9.0')` in your package, and when you\n   * later write `api.use('jquery')`, it will be equivalent to\n   * `api.use('jquery@1.0.0')`. You may specify an array of multiple releases,\n   * in which case the default value for constraints will be the \"or\" of the\n   * versions from each release: `api.versionsFrom(['METEOR@0.9.0',\n   * 'METEOR@0.9.5'])` may cause `api.use('jquery')` to be interpreted as\n   * `api.use('jquery@1.0.0 || 2.0.0')`.\n   * @locus package.js\n   * @param {String | String[]} meteorRelease Specification of a release:\n   * track@version. Just 'version' (e.g. `\"0.9.0\"`) is sufficient if using the\n   * default release track `METEOR`. Can be an array of specifications.\n   */\n  versionsFrom: function (releases) {\n    var self = this;\n\n    // Packages in isopackets really ought to be in the core release, by\n    // definition, so saying that they should use versions from another\n    // release doesn't make sense. Moreover, if we're running from a\n    // checkout, we build isopackets before we initialize catalog.official\n    // (since we may need the ddp isopacket to refresh catalog.official),\n    // so we wouldn't actually be able to interpret the release name\n    // anyway.\n    if (self.buildingIsopackets) {\n      buildmessage.error(\n        \"packages in isopackets may not use versionsFrom\");\n      // recover by ignoring\n      return;\n    }\n\n    releases = toArray(releases);\n\n    // using for loop rather than underscore to help with useMyCaller\n    for (var i = 0; i < releases.length; ++i) {\n      var release = releases[i];\n\n      // If you don't specify a track, use our default.\n      if (release.indexOf('@') === -1) {\n        release = catalog.DEFAULT_TRACK + \"@\" + release;\n      }\n\n      var relInf = release.split('@');\n      if (relInf.length !== 2) {\n        buildmessage.error(\"Release names in versionsFrom may not contain '@'.\",\n                           { useMyCaller: true });\n        return;\n      }\n      var releaseRecord = catalog.official.getReleaseVersion(\n        relInf[0], relInf[1]);\n      if (!releaseRecord) {\n        buildmessage.error(\"Unknown release \"+ release,\n                           { tags: { refreshCouldHelp: true } });\n      } else {\n        self.releaseRecords.push(releaseRecord);\n      }\n    }\n  },\n\n  // Export symbols from this package.\n  //\n  // @param symbols String (eg \"Foo\") or array of String\n  // @param arch 'web', 'server', 'web.browser', 'web.cordova'\n  // or an array of those.\n  // The default is ['web', 'server'].\n  // @param options 'testOnly', boolean.\n\n  /**\n   *\n   * @memberOf PackageAPI\n   * @instance\n   * @summary Export package-level variables in your package. The specified\n   * variables (declared without `var` in the source code) will be available\n   * to packages that use your package. If your package sets the `debugOnly`,\n   * `prodOnly` or `testOnly` options to `true` when it calls\n   * `Package.describe()`, then packages that use your package will need to use\n   * `Package[\"package-name\"].ExportedVariableName` to access the value of an\n   * exported variable.\n   * @locus package.js\n   * @param {String|String[]} exportedObjects Name of the object to export, or\n   * an array of object names.\n   * @param {String|String[]} [architecture] If you only want to export the\n   * object on the server (or the client), you can pass in the second argument\n   * (e.g., 'server', 'client', 'web.browser', 'web.cordova') to specify what\n   * architecture the export is used with. You can specify multiple\n   * architectures by passing in an array, for example `['web.cordova',\n   * 'os.linux']`.\n   * @param {Object} [exportOptions]\n   * @param {Boolean} exportOptions.testOnly If true, this symbol will only be\n   * exported when running tests for this package.\n   */\n  export: function (symbols, arch, options) {\n    var self = this;\n\n    // Support `api.export(\"FooTest\", {testOnly: true})` without\n    // arch.\n    if (_.isObject(arch) && !_.isArray(arch) && !options) {\n      options = arch;\n      arch = null;\n    }\n    options = options || {};\n\n    symbols = toArray(symbols);\n    arch = toArchArray(arch);\n\n    _.each(symbols, function (symbol) {\n      // XXX be unicode-friendlier\n      if (!symbol.match(/^([_$a-zA-Z][_$a-zA-Z0-9]*)$/)) {\n        buildmessage.error(\"Bad exported symbol: \" + symbol,\n                           { useMyCaller: true });\n        // recover by ignoring\n        return;\n      }\n      forAllMatchingArchs(arch, function (w) {\n        self.exports[w].push({name: symbol, testOnly: !!options.testOnly});\n      });\n    });\n  }\n});\n\n// XXX COMPAT WITH 0.8.x\nPackageAPI.prototype.add_files = PackageAPI.prototype.addFiles;\n"]}