{"version":3,"sources":["/tools/isobuild/compiler-plugin.js"],"names":["archinfo","require","buildmessage","buildPluginModule","colonConverter","files","compiler","linker","util","_","Profile","sha1","readAndWatchFileWithHash","LRU","Fiber","sourceMapLength","Console","ImportScanner","cssToCommonJS","Resolver","optimisticStatOrNull","isTestFilePath","CACHE_SIZE","process","env","METEOR_LINKER_CACHE_SIZE","CACHE_DEBUG","METEOR_TEST_PRINT_LINKER_CACHE_DEBUG","LINKER_CACHE_SALT","LINKER_CACHE","max","length","reduce","soFar","current","data","sourceMap","serverLibPackages","fibers","populateServerLibPackages","devBundlePath","getDevBundle","nodeModulesPath","pathJoin","readdir","forEach","packagePath","packageName","packageStat","statOrNull","isDirectory","e","CompilerPluginProcessor","unibuilds","arch","sourceRoot","isopackCache","linkerCacheDir","self","mkdir_p","runCompilerPlugins","assertInJob","sourceProcessorsWithSlots","sourceBatches","map","unibuild","name","pkg","getSourceRoot","PackageSourceBatch","jobHasMessages","each","sourceBatch","resourceSlots","resourceSlot","sourceProcessor","has","id","push","jobTitle","isopack","join","time","enterJob","title","inputFiles","InputFile","markedMethod","markBoundary","userPlugin","processFilesForTarget","bind","exception","_resourceSlot","_statCache","Object","create","_controlFileCache","_resolveCache","getContentsAsBuffer","inputResource","getPackageName","packageSourceBatch","isPackageFile","isApplicationFile","isString","Error","getPathInPackage","path","getFileOptions","fileOptions","osPath","convertToOSPath","relPath","pathRelative","startsWith","watchSet","readAndWatchFile","contents","_stat","absPath","findControlFile","basename","dir","pathDirname","stat","isFile","pathBasename","parentDir","_resolveCacheLookup","parentPath","byId","_resolveCacheStore","resolved","resolve","batch","resId","parentStat","resolver","getResolver","error","code","getArch","processor","getSourceHash","hash","getExtension","extension","getDeclaredExports","declaredExports","getDisplayPath","_getServePath","addStylesheet","options","JSON","parse","addJavaScript","addAsset","addHtml","_reportError","message","info","lazy","addError","ResourceSlot","unibuildResourceInfo","outputResources","jsOutputResources","type","toString","bare","raw","stringify","resource","sourcePath","targetPath","_getOption","_isLazy","useMeteorInstall","splitPath","split","pathSep","isInImports","indexOf","global","testCommandMetadata","isTest","isAppTest","convertToStandardLineEndings","refreshable","servePath","Buffer","emtpyStub","mainModule","matches","section","babelRuntime","checkBabelRuntimeHelper","load","checkHelper","importExtensions","_resolver","sourceProcessorSet","_getSourceProcessorSet","resources","filename","getByFilename","displayName","getByExtension","addImportExtension","importedSymbolToPackageName","eachUsedUnibuild","dependencies","uses","skipUnordered","skipDebugOnly","skipProdOnly","skipTestOnly","depUnibuild","symbol","testOnly","toLowerCase","nmds","nodeModulesDirectories","nodeModulesPaths","nmd","local","replace","getOrCreate","caller","targetArch","extensions","activePluginPackages","getActivePluginPackages","SourceProcessorSet","hardcodeJs","otherPkg","ensurePluginsInitialized","merge","sourceProcessors","computeJsOutputFilesMap","Map","slot","set","get","some","file","meteorPackageInstalls","find","allMissingNodeModules","allRelocatedNodeModules","scannerMap","isApp","scanner","bundleArch","addInputFiles","scanImports","extend","handleMissing","missingNodeModules","missingMap","parts","slice","missing","possiblySpurious","nextMissingNodeModules","ids","addNodeModules","newlyAdded","newlyMissing","isEmpty","_warnAboutMissingModules","meteorProvidesBabelRuntime","isWeb","outputFiles","getOutputFiles","appFilesWithoutNodeModules","installPath","nodeModulesIndex","topLevelMissingIDs","warnings","endsWith","charAt","packageDir","rawWarn","warn","text","topLevelKeys","keys","getResources","jsResources","flatten","arrays","Array","prototype","concat","apply","pluck","_linkJS","meteorInstallOptions","linkerOptions","useGlobalNamespace","combinedServePath","convert","kind","imports","importStubServePath","includeSourceMapInstructions","noLineNumbers","cacheKey","inputFile","imported","inMemoryCached","console","log","cacheFilename","bufferifyJSONReturnValue","r","diskCached","readJSONOrNull","SyntaxError","canCache","linkedFiles","fullLink","ret","sm","source","retAsJSON","writeFileAtomically","run","proto","method"],"mappings":"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","file":"tools/isobuild/compiler-plugin.js.map","sourcesContent":["var archinfo = require('../utils/archinfo.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar buildPluginModule = require('./build-plugin.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar files = require('../fs/files.js');\nvar compiler = require('./compiler.js');\nvar linker = require('./linker.js');\nvar util = require('util');\nvar _ = require('underscore');\nvar Profile = require('../tool-env/profile.js').Profile;\nimport {sha1, readAndWatchFileWithHash} from  '../fs/watch.js';\nimport LRU from 'lru-cache';\nimport Fiber from 'fibers';\nimport {sourceMapLength} from '../utils/utils.js';\nimport {Console} from '../console/console.js';\nimport ImportScanner from './import-scanner.js';\nimport {cssToCommonJS} from \"./css-modules.js\";\nimport Resolver from \"./resolver.js\";\nimport {\n  optimisticStatOrNull,\n} from \"../fs/optimistic.js\";\n\nimport { isTestFilePath } from './test-files.js';\n\n// This file implements the new compiler plugins added in Meteor 1.2, which are\n// registered with the Plugin.registerCompiler API.\n//\n// Unlike legacy source handlers (Plugin.registerSourceHandler), compilers run\n// in the context of an entire app. That is to say, they don't run when you run\n// `meteor publish`; whenever they run, they have access to all the files of\n// their type across all packages as well as the app. This allows them to\n// implement cross-file and cross-package inclusion, or config files in the app\n// that affect how packages are processed, among other possibilities.\n//\n// Compilers can specify which extensions or filenames they process. They only\n// process files in packages (or the app) that directly use the plugin's package\n// (or that use it indirectly via the \"imply\" directive); just because compiler\n// plugins act on multiple packages at a time doesn't mean they automatically\n// act on all packages in your app.\n//\n// The CompilerPluginProcessor is the main entry point to this file; it is used\n// by the bundler to run all plugins on a target. It doesn't have much\n// interesting state and perhaps could have just been a function.\n//\n// It receives an ordered list of unibuilds (essentially, packages) from the\n// bundler. It turns them into an ordered list of PackageSourceBatch objects,\n// each of which represents the source files in a single package. Each\n// PackageSourceBatch consists of an ordered list of ResourceSlots representing\n// the resources in that package. The idea here is that, because Meteor executes\n// all JS files in the order produced by the bundler, we need to make sure to\n// maintain the order of packages from the bundler and the order of source files\n// within a package. Each ResourceSlot represents a resource (either a 'source'\n// resource which will be processed by a compiler plugin, or something else like\n// a static asset or some JavaScript produced by a legacy source handler), and\n// when the compiler plugin calls something like `inputFile.addJavaScript` on a\n// file, we replace that source file with the resource produced by the plugin.\n//\n// InputFile is a wrapper around ResourceSlot that is the object presented to\n// the compiler in the plugin. It is part of the documented registerCompiler\n// API.\n\n// Cache the (slightly post-processed) results of linker.fullLink.\nconst CACHE_SIZE = process.env.METEOR_LINKER_CACHE_SIZE || 1024*1024*100;\nconst CACHE_DEBUG = !! process.env.METEOR_TEST_PRINT_LINKER_CACHE_DEBUG;\nconst LINKER_CACHE_SALT = 11; // Increment this number to force relinking.\nconst LINKER_CACHE = new LRU({\n  max: CACHE_SIZE,\n  // Cache is measured in bytes. We don't care about servePath.\n  // Key is JSONification of all options plus all hashes.\n  length: function (files) {\n    return files.reduce((soFar, current) => {\n      return soFar + current.data.length + sourceMapLength(current.sourceMap);\n    }, 0);\n  }\n});\n\nconst serverLibPackages = {\n  // Make sure fibers is defined, if nothing else.\n  fibers: true\n};\n\nfunction populateServerLibPackages() {\n  const devBundlePath = files.getDevBundle();\n  const nodeModulesPath = files.pathJoin(\n    devBundlePath, \"server-lib\", \"node_modules\"\n  );\n\n  files.readdir(nodeModulesPath).forEach(packageName => {\n    const packagePath = files.pathJoin(nodeModulesPath, packageName);\n    const packageStat = files.statOrNull(packagePath);\n    if (packageStat && packageStat.isDirectory()) {\n      serverLibPackages[packageName] = true;\n    }\n  });\n}\n\ntry {\n  populateServerLibPackages();\n} catch (e) {\n  // At least we tried!\n}\n\nexport class CompilerPluginProcessor {\n  constructor({\n    unibuilds,\n    arch,\n    sourceRoot,\n    isopackCache,\n    linkerCacheDir,\n  }) {\n    const self = this;\n\n    self.unibuilds = unibuilds;\n    self.arch = arch;\n    self.sourceRoot = sourceRoot;\n    self.isopackCache = isopackCache;\n\n    self.linkerCacheDir = linkerCacheDir;\n    if (self.linkerCacheDir) {\n      files.mkdir_p(self.linkerCacheDir);\n    }\n  }\n\n  runCompilerPlugins() {\n    const self = this;\n    buildmessage.assertInJob();\n\n    // plugin id -> {sourceProcessor, resourceSlots}\n    var sourceProcessorsWithSlots = {};\n\n    var sourceBatches = _.map(self.unibuilds, function (unibuild) {\n      const { pkg: { name }, arch } = unibuild;\n      const sourceRoot = name\n        && self.isopackCache.getSourceRoot(name, arch)\n        || self.sourceRoot;\n\n      return new PackageSourceBatch(unibuild, self, {\n        sourceRoot,\n        linkerCacheDir: self.linkerCacheDir\n      });\n    });\n\n    // If we failed to match sources with processors, we're done.\n    if (buildmessage.jobHasMessages()) {\n      return [];\n    }\n\n    // Find out which files go with which CompilerPlugins.\n    _.each(sourceBatches, function (sourceBatch) {\n      _.each(sourceBatch.resourceSlots, function (resourceSlot) {\n        var sourceProcessor = resourceSlot.sourceProcessor;\n        // Skip non-sources.\n        if (! sourceProcessor) {\n          return;\n        }\n\n        if (! _.has(sourceProcessorsWithSlots, sourceProcessor.id)) {\n          sourceProcessorsWithSlots[sourceProcessor.id] = {\n            sourceProcessor: sourceProcessor,\n            resourceSlots: []\n          };\n        }\n        sourceProcessorsWithSlots[sourceProcessor.id].resourceSlots.push(\n          resourceSlot);\n      });\n    });\n\n    // Now actually run the handlers.\n    _.each(sourceProcessorsWithSlots, function (data, id) {\n      var sourceProcessor = data.sourceProcessor;\n      var resourceSlots = data.resourceSlots;\n\n      var jobTitle = [\n        \"processing files with \",\n        sourceProcessor.isopack.name,\n        \" (for target \", self.arch, \")\"\n      ].join('');\n\n      Profile.time(\"plugin \"+sourceProcessor.isopack.name, () => {\n        buildmessage.enterJob({\n          title: jobTitle\n        }, function () {\n          var inputFiles = _.map(resourceSlots, function (resourceSlot) {\n            return new InputFile(resourceSlot);\n          });\n\n          var markedMethod = buildmessage.markBoundary(\n            sourceProcessor.userPlugin.processFilesForTarget.bind(\n              sourceProcessor.userPlugin));\n          try {\n            markedMethod(inputFiles);\n          } catch (e) {\n            buildmessage.exception(e);\n          }\n        });\n      });\n    });\n\n    return sourceBatches;\n  }\n}\n\nclass InputFile extends buildPluginModule.InputFile {\n  constructor(resourceSlot) {\n    super();\n    // We use underscored attributes here because this is user-visible\n    // code and we don't want users to be accessing anything that we don't\n    // document.\n    this._resourceSlot = resourceSlot;\n\n    // Map from absolute paths to stat objects (or null if the file does\n    // not exist).\n    this._statCache = Object.create(null);\n\n    // Map from control file names (e.g. package.json, .babelrc) to\n    // absolute paths, or null to indicate absence.\n    this._controlFileCache = Object.create(null);\n\n    // Map from imported module identifier strings (possibly relative) to\n    // fully require.resolve'd module identifiers.\n    this._resolveCache = Object.create(null);\n  }\n\n  getContentsAsBuffer() {\n    var self = this;\n    return self._resourceSlot.inputResource.data;\n  }\n\n  getPackageName() {\n    var self = this;\n    return self._resourceSlot.packageSourceBatch.unibuild.pkg.name;\n  }\n\n  isPackageFile() {\n    return !! this.getPackageName();\n  }\n\n  isApplicationFile() {\n    return ! this.getPackageName();\n  }\n\n  getSourceRoot() {\n    const sourceRoot = this._resourceSlot.packageSourceBatch.sourceRoot;\n\n    if (! _.isString(sourceRoot)) {\n      const name = this.getPackageName();\n      throw new Error(\n        \"Unknown source root for \" + (\n          name ? \"package \" + name : \"app\"));\n    }\n\n    return sourceRoot;\n  }\n\n  getPathInPackage() {\n    var self = this;\n    return self._resourceSlot.inputResource.path;\n  }\n\n  getFileOptions() {\n    var self = this;\n    // XXX fileOptions only exists on some resources (of type \"source\"). The JS\n    // resources might not have this property.\n    return self._resourceSlot.inputResource.fileOptions || {};\n  }\n\n  readAndWatchFileWithHash(path) {\n    const osPath = files.convertToOSPath(path);\n    const sourceRoot = this.getSourceRoot();\n    const relPath = files.pathRelative(sourceRoot, osPath);\n    if (relPath.startsWith(\"..\")) {\n      throw new Error(\n        `Attempting to read file outside ${\n          this.getPackageName() || \"the app\"}: ${osPath}`\n      );\n    }\n    const sourceBatch = this._resourceSlot.packageSourceBatch;\n    return readAndWatchFileWithHash(\n      sourceBatch.unibuild.watchSet,\n      osPath\n    );\n  }\n\n  readAndWatchFile(path) {\n    return this.readAndWatchFileWithHash(path).contents;\n  }\n\n  _stat(absPath) {\n    return _.has(this._statCache, absPath)\n      ? this._statCache[absPath]\n      : this._statCache[absPath] = optimisticStatOrNull(absPath);\n  }\n\n  // Search ancestor directories for control files (e.g. package.json,\n  // .babelrc), and return the absolute path of the first one found, or\n  // null if the search failed.\n  findControlFile(basename) {\n    let absPath = this._controlFileCache[basename];\n    if (typeof absPath === \"string\") {\n      return absPath;\n    }\n\n    const sourceRoot = this._resourceSlot.packageSourceBatch.sourceRoot;\n    if (! _.isString(sourceRoot)) {\n      return this._controlFileCache[basename] = null;\n    }\n\n    let dir = files.pathDirname(this.getPathInPackage());\n    while (true) {\n      absPath = files.pathJoin(sourceRoot, dir, basename);\n\n      const stat = this._stat(absPath);\n      if (stat && stat.isFile()) {\n        return this._controlFileCache[basename] = absPath;\n      }\n\n      if (files.pathBasename(dir) === \"node_modules\") {\n        // The search for control files should not escape node_modules.\n        return this._controlFileCache[basename] = null;\n      }\n\n      let parentDir = files.pathDirname(dir);\n      if (parentDir === dir) break;\n      dir = parentDir;\n    }\n\n    return this._controlFileCache[basename] = null;\n  }\n\n  _resolveCacheLookup(id, parentPath) {\n    const byId = this._resolveCache[id];\n    return byId && byId[parentPath];\n  }\n\n  _resolveCacheStore(id, parentPath, resolved) {\n    let byId = this._resolveCache[id];\n    if (! byId) {\n      byId = this._resolveCache[id] = Object.create(null);\n    }\n    return byId[parentPath] = resolved;\n  }\n\n  resolve(id, parentPath) {\n    const batch = this._resourceSlot.packageSourceBatch;\n\n    parentPath = parentPath || files.pathJoin(\n      batch.sourceRoot,\n      this.getPathInPackage()\n    );\n\n    const resId = this._resolveCacheLookup(id, parentPath);\n    if (resId) {\n      return resId;\n    }\n\n    const parentStat = files.statOrNull(parentPath);\n    if (! parentStat ||\n        ! parentStat.isFile()) {\n      throw new Error(\"Not a file: \" + parentPath);\n    }\n\n    const resolver = batch.getResolver();\n    const resolved = resolver.resolve(id, parentPath);\n\n    if (resolved === \"missing\") {\n      const error = new Error(\"Cannot find module '\" + id + \"'\");\n      error.code = \"MODULE_NOT_FOUND\";\n      throw error;\n    }\n\n    return this._resolveCacheStore(id, parentPath, resolved.id);\n  }\n\n  require(id, parentPath) {\n    return require(this.resolve(id, parentPath));\n  }\n\n  getArch() {\n    return this._resourceSlot.packageSourceBatch.processor.arch;\n  }\n\n  getSourceHash() {\n    return this._resourceSlot.inputResource.hash;\n  }\n\n  /**\n   * @summary Returns the extension that matched the compiler plugin.\n   * The longest prefix is preferred.\n   * @returns {String}\n   */\n  getExtension() {\n    return this._resourceSlot.inputResource.extension;\n  }\n\n  /**\n   * @summary Returns a list of symbols declared as exports in this target. The\n   * result of `api.export('symbol')` calls in target's control file such as\n   * package.js.\n   * @memberof InputFile\n   * @returns {String[]}\n   */\n  getDeclaredExports() {\n    var self = this;\n    return self._resourceSlot.packageSourceBatch.unibuild.declaredExports;\n  }\n\n  /**\n   * @summary Returns a relative path that can be used to form error messages or\n   * other display properties. Can be used as an input to a source map.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getDisplayPath() {\n    var self = this;\n    return self._resourceSlot.packageSourceBatch.unibuild.pkg._getServePath(self.getPathInPackage());\n  }\n\n  /**\n   * @summary Web targets only. Add a stylesheet to the document. Not available\n   * for linter build plugins.\n   * @param {Object} options\n   * @param {String} options.path The requested path for the added CSS, may not\n   * be satisfied if there are path conflicts.\n   * @param {String} options.data The content of the stylesheet that should be\n   * added.\n   * @param {String|Object} options.sourceMap A stringified JSON\n   * sourcemap, in case the stylesheet was generated from a different\n   * file.\n   * @memberOf InputFile\n   * @instance\n   */\n  addStylesheet(options) {\n    var self = this;\n    if (options.sourceMap && typeof options.sourceMap === 'string') {\n      // XXX remove an anti-XSSI header? \")]}'\\n\"\n      options.sourceMap = JSON.parse(options.sourceMap);\n    }\n    self._resourceSlot.addStylesheet(options);\n  }\n\n  /**\n   * @summary Add JavaScript code. The code added will only see the\n   * namespaces imported by this package as runtime dependencies using\n   * ['api.use'](#PackageAPI-use). If the file being compiled was added\n   * with the bare flag, the resulting JavaScript won't be wrapped in a\n   * closure.\n   * @param {Object} options\n   * @param {String} options.path The path at which the JavaScript file\n   * should be inserted, may not be honored in case of path conflicts.\n   * @param {String} options.data The code to be added.\n   * @param {String|Object} options.sourceMap A stringified JSON\n   * sourcemap, in case the JavaScript file was generated from a\n   * different file.\n   * @memberOf InputFile\n   * @instance\n   */\n  addJavaScript(options) {\n    var self = this;\n    if (options.sourceMap && typeof options.sourceMap === 'string') {\n      // XXX remove an anti-XSSI header? \")]}'\\n\"\n      options.sourceMap = JSON.parse(options.sourceMap);\n    }\n    self._resourceSlot.addJavaScript(options);\n  }\n\n  /**\n   * @summary Add a file to serve as-is to the browser or to include on\n   * the browser, depending on the target. On the web, it will be served\n   * at the exact path requested. For server targets, it can be retrieved\n   * using `Assets.getText` or `Assets.getBinary`.\n   * @param {Object} options\n   * @param {String} options.path The path at which to serve the asset.\n   * @param {Buffer|String} options.data The data that should be placed in the\n   * file.\n   * @param {String} [options.hash] Optionally, supply a hash for the output\n   * file.\n   * @memberOf InputFile\n   * @instance\n   */\n  addAsset(options) {\n    var self = this;\n    self._resourceSlot.addAsset(options);\n  }\n\n  /**\n   * @summary Works in web targets only. Add markup to the `head` or `body`\n   * section of the document.\n   * @param  {Object} options\n   * @param {String} options.section Which section of the document should\n   * be appended to. Can only be \"head\" or \"body\".\n   * @param {String} options.data The content to append.\n   * @memberOf InputFile\n   * @instance\n   */\n  addHtml(options) {\n    var self = this;\n    self._resourceSlot.addHtml(options);\n  }\n\n  _reportError(message, info) {\n    if (this.getFileOptions().lazy === true) {\n      // Files with fileOptions.lazy === true were not explicitly added to\n      // the source batch via api.addFiles or api.mainModule, so any\n      // compilation errors should not be fatal until the files are\n      // actually imported by the ImportScanner. Attempting compilation is\n      // still important for lazy files that might end up being imported\n      // later, which is why we defang the error here, instead of avoiding\n      // compilation preemptively. Note also that exceptions thrown by the\n      // compiler will still cause build errors.\n      this._resourceSlot.addError(message, info);\n    } else {\n      super._reportError(message, info);\n    }\n  }\n}\n\nclass ResourceSlot {\n  constructor(unibuildResourceInfo,\n              sourceProcessor,\n              packageSourceBatch) {\n    const self = this;\n    // XXX ideally this should be an classy object, but it's not.\n    self.inputResource = unibuildResourceInfo;\n    // Everything but JS.\n    self.outputResources = [];\n    // JS, which gets linked together at the end.\n    self.jsOutputResources = [];\n    self.sourceProcessor = sourceProcessor;\n    self.packageSourceBatch = packageSourceBatch;\n\n    if (self.inputResource.type === \"source\") {\n      if (sourceProcessor) {\n        // If we have a sourceProcessor, it will handle the adding of the\n        // final processed JavaScript.\n      } else if (self.inputResource.extension === \"js\") {\n        // If there is no sourceProcessor for a .js file, add the source\n        // directly to the output. #HardcodeJs\n        self.addJavaScript({\n          // XXX it's a shame to keep converting between Buffer and string, but\n          // files.convertToStandardLineEndings only works on strings for now\n          data: self.inputResource.data.toString('utf8'),\n          path: self.inputResource.path,\n          hash: self.inputResource.hash,\n          bare: self.inputResource.fileOptions &&\n            (self.inputResource.fileOptions.bare ||\n             // XXX eventually get rid of backward-compatibility \"raw\" name\n             // XXX COMPAT WITH 0.6.4\n             self.inputResource.fileOptions.raw)\n        });\n      }\n    } else {\n      if (sourceProcessor) {\n        throw Error(\"sourceProcessor for non-source? \" +\n                    JSON.stringify(unibuildResourceInfo));\n      }\n      // Any resource that isn't handled by compiler plugins just gets passed\n      // through.\n      if (self.inputResource.type === \"js\") {\n        let resource = self.inputResource;\n        if (! _.isString(resource.sourcePath)) {\n          resource.sourcePath = self.inputResource.path;\n        }\n        if (! _.isString(resource.targetPath)) {\n          resource.targetPath = resource.sourcePath;\n        }\n        self.jsOutputResources.push(resource);\n      } else {\n        self.outputResources.push(self.inputResource);\n      }\n    }\n  }\n\n  _getOption(name, options) {\n    if (options && _.has(options, name)) {\n      return options[name];\n    }\n    const fileOptions = this.inputResource.fileOptions;\n    return fileOptions && fileOptions[name];\n  }\n\n  _isLazy(options) {\n    let lazy = this._getOption(\"lazy\", options);\n\n    if (typeof lazy === \"boolean\") {\n      return lazy;\n    }\n\n    // If file.lazy was not previously defined, mark the file lazy if\n    // it is contained by an imports directory. Note that any files\n    // contained by a node_modules directory will already have been\n    // marked lazy in PackageSource#_inferFileOptions. Same for\n    // non-test files if running (non-full-app) tests (`meteor test`)\n    if (!this.packageSourceBatch.useMeteorInstall) {\n      return false;\n    }\n\n    const splitPath = this.inputResource.path.split(files.pathSep);\n    const isInImports = splitPath.indexOf(\"imports\") >= 0;\n\n    if (global.testCommandMetadata &&\n        (global.testCommandMetadata.isTest ||\n         global.testCommandMetadata.isAppTest)) {\n      // test files should always be included, if we're running app\n      // tests.\n      return isInImports && !isTestFilePath(this.inputResource.path);\n    } else {\n      return isInImports;\n    }\n  }\n\n  addStylesheet(options) {\n    const self = this;\n    if (! self.sourceProcessor) {\n      throw Error(\"addStylesheet on non-source ResourceSlot?\");\n    }\n\n    const data = files.convertToStandardLineEndings(options.data);\n    const useMeteorInstall = self.packageSourceBatch.useMeteorInstall;\n    const sourcePath = this.inputResource.path;\n    const targetPath = options.path || sourcePath;\n    const resource = {\n      refreshable: true,\n      sourcePath,\n      targetPath,\n      servePath: self.packageSourceBatch.unibuild.pkg._getServePath(targetPath),\n      hash: sha1(data),\n      lazy: this._isLazy(options),\n    };\n\n    if (useMeteorInstall && resource.lazy) {\n      // If the current packageSourceBatch supports modules, and this CSS\n      // file is lazy, add it as a lazy JS module instead of adding it\n      // unconditionally as a CSS resource, so that it can be imported\n      // when needed.\n      resource.type = \"js\";\n      resource.data =\n        new Buffer(cssToCommonJS(data, resource.hash), \"utf8\");\n\n      self.jsOutputResources.push(resource);\n\n    } else {\n      // Eager CSS is added unconditionally to a combined <style> tag at\n      // the beginning of the <head>. If the corresponding module ever\n      // gets imported, its module.exports object should be an empty stub,\n      // rather than a <style> node added dynamically to the <head>.\n      self.jsOutputResources.push({\n        ...resource,\n        type: \"js\",\n        data: new Buffer(\n          \"// These styles have already been applied to the document.\\n\",\n          \"utf8\"),\n        // If a compiler plugin calls addJavaScript with the same\n        // sourcePath, that code should take precedence over this empty\n        // stub, so this property marks the resource as disposable.\n        emtpyStub: true,\n        lazy: true,\n      });\n\n      resource.type = \"css\";\n      resource.data = new Buffer(data, 'utf8'),\n\n      // XXX do we need to call convertSourceMapPaths here like we did\n      //     in legacy handlers?\n      resource.sourceMap = options.sourceMap;\n\n      self.outputResources.push(resource);\n    }\n  }\n\n  addJavaScript(options) {\n    const self = this;\n    // #HardcodeJs this gets called by constructor in the \"js\" case\n    if (! self.sourceProcessor && self.inputResource.extension !== \"js\") {\n      throw Error(\"addJavaScript on non-source ResourceSlot?\");\n    }\n\n    let sourcePath = self.inputResource.path;\n    if (_.has(options, \"sourcePath\") &&\n        typeof options.sourcePath === \"string\") {\n      sourcePath = options.sourcePath;\n    }\n\n    const targetPath = options.path || sourcePath;\n\n    var data = new Buffer(\n      files.convertToStandardLineEndings(options.data), 'utf8');\n\n    self.jsOutputResources.push({\n      type: \"js\",\n      data: data,\n      sourcePath,\n      targetPath,\n      servePath: self.packageSourceBatch.unibuild.pkg._getServePath(targetPath),\n      // XXX should we allow users to be trusted and specify a hash?\n      hash: sha1(data),\n      // XXX do we need to call convertSourceMapPaths here like we did\n      //     in legacy handlers?\n      sourceMap: options.sourceMap,\n      // intentionally preserve a possible `undefined` value for files\n      // in apps, rather than convert it into `false` via `!!`\n      lazy: self._isLazy(options),\n      bare: !! self._getOption(\"bare\", options),\n      mainModule: !! self._getOption(\"mainModule\", options),\n    });\n  }\n\n  addAsset(options) {\n    const self = this;\n    if (! self.sourceProcessor) {\n      throw Error(\"addAsset on non-source ResourceSlot?\");\n    }\n\n    if (! (options.data instanceof Buffer)) {\n      if (_.isString(options.data)) {\n        options.data = new Buffer(options.data);\n      } else {\n        throw new Error(\"'data' option to addAsset must be a Buffer or String.\");\n      }\n    }\n\n    self.outputResources.push({\n      type: 'asset',\n      data: options.data,\n      path: options.path,\n      servePath: self.packageSourceBatch.unibuild.pkg._getServePath(\n        options.path),\n      hash: sha1(options.data),\n      lazy: self._isLazy(options),\n    });\n  }\n\n  addHtml(options) {\n    const self = this;\n    const unibuild = self.packageSourceBatch.unibuild;\n\n    if (! archinfo.matches(unibuild.arch, \"web\")) {\n      throw new Error(\"Document sections can only be emitted to \" +\n                      \"web targets: \" + self.inputResource.path);\n    }\n    if (options.section !== \"head\" && options.section !== \"body\") {\n      throw new Error(\"'section' must be 'head' or 'body': \" +\n                      self.inputResource.path);\n    }\n    if (typeof options.data !== \"string\") {\n      throw new Error(\"'data' option to appendDocument must be a string: \" +\n                      self.inputResource.path);\n    }\n\n    self.outputResources.push({\n      type: options.section,\n      data: new Buffer(files.convertToStandardLineEndings(options.data), 'utf8'),\n      lazy: self._isLazy(options),\n    });\n  }\n\n  addError(message, info) {\n    // If this file is ever actually imported, only then will we report\n    // the error. Use this.jsOutputResources because that's what the\n    // ImportScanner deals with.\n    this.jsOutputResources.push({\n      type: \"js\",\n      sourcePath: this.inputResource.path,\n      targetPath: this.inputResource.path,\n      servePath: this.inputResource.path,\n      data: new Buffer(\n        \"throw new Error(\" + JSON.stringify(message) + \");\\n\",\n        \"utf8\"),\n      lazy: true,\n      error: { message, info },\n    });\n  }\n}\n\nlet babelRuntime;\nfunction checkBabelRuntimeHelper(id) {\n  if (! babelRuntime) {\n    babelRuntime = require(\"../tool-env/isopackets.js\")\n      .load(\"runtime\")[\"babel-runtime\"];\n  }\n  return babelRuntime.checkHelper(id);\n}\n\nexport class PackageSourceBatch {\n  constructor(unibuild, processor, {\n    sourceRoot,\n    linkerCacheDir,\n  }) {\n    const self = this;\n    buildmessage.assertInJob();\n\n    self.unibuild = unibuild;\n    self.processor = processor;\n    self.sourceRoot = sourceRoot;\n    self.linkerCacheDir = linkerCacheDir;\n    self.importExtensions = [\".js\", \".json\"];\n    self._resolver = null;\n\n    var sourceProcessorSet = self._getSourceProcessorSet();\n\n    self.resourceSlots = [];\n    unibuild.resources.forEach(function (resource) {\n      let sourceProcessor = null;\n      if (resource.type === \"source\") {\n        var extension = resource.extension;\n        if (extension === null) {\n          const filename = files.pathBasename(resource.path);\n          sourceProcessor = sourceProcessorSet.getByFilename(filename);\n          if (! sourceProcessor) {\n            buildmessage.error(\n              `no plugin found for ${ resource.path } in ` +\n                `${ unibuild.pkg.displayName() }; a plugin for ${ filename } ` +\n                `was active when it was published but none is now`);\n            return;\n            // recover by ignoring\n          }\n        } else {\n          sourceProcessor = sourceProcessorSet.getByExtension(extension);\n          // If resource.extension === 'js', it's ok for there to be no\n          // sourceProcessor, since we #HardcodeJs in ResourceSlot.\n          if (! sourceProcessor && extension !== 'js') {\n            buildmessage.error(\n              `no plugin found for ${ resource.path } in ` +\n                `${ unibuild.pkg.displayName() }; a plugin for *.${ extension } ` +\n                `was active when it was published but none is now`);\n            return;\n            // recover by ignoring\n          }\n\n          self.addImportExtension(extension);\n        }\n      }\n\n      self.resourceSlots.push(new ResourceSlot(resource, sourceProcessor, self));\n    });\n\n    // Compute imports by merging the exports of all of the packages we\n    // use. Note that in the case of conflicting symbols, later packages get\n    // precedence.\n    //\n    // We don't get imports from unordered dependencies (since they\n    // may not be defined yet) or from\n    // weak/debugOnly/prodOnly/testOnly dependencies (because the\n    // meaning of a name shouldn't be affected by the non-local\n    // decision of whether or not an unrelated package in the target\n    // depends on something).\n    self.importedSymbolToPackageName = {}; // map from symbol to supplying package name\n\n    compiler.eachUsedUnibuild({\n      dependencies: self.unibuild.uses,\n      arch: self.processor.arch,\n      isopackCache: self.processor.isopackCache,\n      skipUnordered: true,\n      // don't import symbols from debugOnly, prodOnly and testOnly packages, because\n      // if the package is not linked it will cause a runtime error.\n      // the code must access them with `Package[\"my-package\"].MySymbol`.\n      skipDebugOnly: true,\n      skipProdOnly: true,\n      skipTestOnly: true,\n    }, depUnibuild => {\n      _.each(depUnibuild.declaredExports, function (symbol) {\n        // Slightly hacky implementation of test-only exports.\n        if (! symbol.testOnly || self.unibuild.pkg.isTest) {\n          self.importedSymbolToPackageName[symbol.name] = depUnibuild.pkg.name;\n        }\n      });\n    });\n\n    self.useMeteorInstall =\n      _.isString(self.sourceRoot) &&\n      self.processor.isopackCache.uses(\n        self.unibuild.pkg,\n        \"modules\",\n        self.unibuild.arch\n      );\n  }\n\n  addImportExtension(extension) {\n    extension = extension.toLowerCase();\n\n    if (! extension.startsWith(\".\")) {\n      extension = \".\" + extension;\n    }\n\n    if (this.importExtensions.indexOf(extension) < 0) {\n      this.importExtensions.push(extension);\n    }\n  }\n\n  getResolver() {\n    if (this._resolver) {\n      return this._resolver;\n    }\n\n    const nmds = this.unibuild.nodeModulesDirectories;\n    const nodeModulesPaths = [];\n\n    _.each(nmds, (nmd, path) => {\n      if (! nmd.local) {\n        nodeModulesPaths.push(\n          files.convertToOSPath(path.replace(/\\/$/g, \"\")));\n      }\n    });\n\n    return this._resolver = Resolver.getOrCreate({\n      caller: \"PackageSourceBatch#getResolver\",\n      sourceRoot: this.sourceRoot,\n      targetArch: this.processor.arch,\n      extensions: this.importExtensions,\n      nodeModulesPaths,\n    });\n  }\n\n  _getSourceProcessorSet() {\n    const self = this;\n\n    buildmessage.assertInJob();\n\n    var isopack = self.unibuild.pkg;\n    const activePluginPackages = compiler.getActivePluginPackages(isopack, {\n      uses: self.unibuild.uses,\n      isopackCache: self.processor.isopackCache\n    });\n    const sourceProcessorSet = new buildPluginModule.SourceProcessorSet(\n      isopack.displayName(), { hardcodeJs: true });\n\n    _.each(activePluginPackages, function (otherPkg) {\n      otherPkg.ensurePluginsInitialized();\n\n      sourceProcessorSet.merge(\n        otherPkg.sourceProcessors.compiler, {arch: self.processor.arch});\n    });\n\n    return sourceProcessorSet;\n  }\n\n  // Returns a map from package names to arrays of JS output files.\n  static computeJsOutputFilesMap(sourceBatches) {\n    const map = new Map;\n\n    sourceBatches.forEach(batch => {\n      const name = batch.unibuild.pkg.name || null;\n      const inputFiles = [];\n\n      batch.resourceSlots.forEach(slot => {\n        inputFiles.push(...slot.jsOutputResources);\n      });\n\n      map.set(name, {\n        files: inputFiles,\n        importExtensions: batch.importExtensions,\n      });\n    });\n\n    if (! map.has(\"modules\")) {\n      // In the unlikely event that no package is using the modules\n      // package, then the map is already complete, and we don't need to\n      // do any import scanning.\n      return map;\n    }\n\n    // Append install(<name>) calls to the install-packages.js file in the\n    // modules package for every Meteor package name used.\n    map.get(\"modules\").files.some(file => {\n      if (file.sourcePath !== \"install-packages.js\") {\n        return false;\n      }\n\n      const meteorPackageInstalls = [];\n\n      map.forEach((info, name) => {\n        if (! name) return;\n\n        let mainModule = _.find(info.files, file => file.mainModule);\n        mainModule = mainModule ?\n          `meteor/${name}/${mainModule.targetPath}` : false;\n\n        meteorPackageInstalls.push(\n          \"install(\" + JSON.stringify(name) +\n            (mainModule ? \", \" + JSON.stringify(mainModule) : '') +\n          \");\\n\"\n        );\n      });\n\n      if (meteorPackageInstalls.length === 0) {\n        return false;\n      }\n\n      file.data = new Buffer(\n        file.data.toString(\"utf8\") + \"\\n\" +\n          meteorPackageInstalls.join(\"\"),\n        \"utf8\"\n      );\n\n      file.hash = sha1(file.data);\n\n      return true;\n    });\n\n    const allMissingNodeModules = Object.create(null);\n    // Records the subset of allMissingNodeModules that were successfully\n    // relocated to a source batch that could handle them.\n    const allRelocatedNodeModules = Object.create(null);\n    const scannerMap = new Map;\n\n    sourceBatches.forEach(batch => {\n      const name = batch.unibuild.pkg.name || null;\n      const isApp = ! name;\n\n      if (! batch.useMeteorInstall && ! isApp) {\n        // If this batch represents a package that does not use the module\n        // system, then we don't need to scan its dependencies.\n        return;\n      }\n\n      const nodeModulesPaths = [];\n      _.each(batch.unibuild.nodeModulesDirectories, (nmd, sourcePath) => {\n        if (! nmd.local) {\n          // Local node_modules directories will be found by the\n          // ImportScanner, but we need to tell it about any external\n          // node_modules directories (e.g. .npm/package/node_modules).\n          nodeModulesPaths.push(sourcePath);\n        }\n      });\n\n      const scanner = new ImportScanner({\n        name,\n        bundleArch: batch.processor.arch,\n        extensions: batch.importExtensions,\n        sourceRoot: batch.sourceRoot,\n        nodeModulesPaths,\n        watchSet: batch.unibuild.watchSet,\n      });\n\n      scanner.addInputFiles(map.get(name).files);\n\n      if (batch.useMeteorInstall) {\n        scanner.scanImports();\n        _.extend(allMissingNodeModules, scanner.allMissingNodeModules);\n      }\n\n      scannerMap.set(name, scanner);\n    });\n\n    function handleMissing(missingNodeModules) {\n      const missingMap = new Map;\n\n      _.each(missingNodeModules, (info, id) => {\n        const parts = id.split(\"/\");\n        let name = null;\n\n        if (parts[0] === \"meteor\") {\n          if (parts.length > 2) {\n            name = parts[1];\n            parts[1] = \".\";\n            id = parts.slice(1).join(\"/\");\n          } else {\n            return;\n          }\n        }\n\n        if (! scannerMap.has(name)) {\n          return;\n        }\n\n        if (! missingMap.has(name)) {\n          missingMap.set(name, {});\n        }\n\n        const missing = missingMap.get(name);\n        if (! _.has(missing, id) ||\n            ! info.possiblySpurious) {\n          // Allow any non-spurious identifier to replace an existing\n          // possibly spurious identifier.\n          missing[id] = info;\n        }\n      });\n\n      const nextMissingNodeModules = Object.create(null);\n\n      missingMap.forEach((ids, name) => {\n        const { newlyAdded, newlyMissing } =\n          scannerMap.get(name).addNodeModules(ids);\n        _.extend(allRelocatedNodeModules, newlyAdded);\n        _.extend(nextMissingNodeModules, newlyMissing);\n      });\n\n      if (! _.isEmpty(nextMissingNodeModules)) {\n        handleMissing(nextMissingNodeModules);\n      }\n    }\n\n    handleMissing(allMissingNodeModules);\n\n    _.each(allRelocatedNodeModules, (info, id) => {\n      delete allMissingNodeModules[id];\n    });\n\n    this._warnAboutMissingModules(allMissingNodeModules);\n\n    const meteorProvidesBabelRuntime = map.has(\"babel-runtime\");\n\n    scannerMap.forEach((scanner, name) => {\n      const isApp = ! name;\n      const isWeb = scanner.isWeb();\n      const outputFiles = scanner.getOutputFiles();\n\n      if (isApp) {\n        const appFilesWithoutNodeModules = [];\n\n        outputFiles.forEach(file => {\n          const parts = file.installPath.split(\"/\");\n\n          if (meteorProvidesBabelRuntime || ! isWeb) {\n            // If the Meteor babel-runtime package is installed, it will\n            // provide implementations for babel-runtime/helpers/* and\n            // babel-runtime/regenerator at runtime, so we should filter\n            // out any node_modules/babel-runtime/* modules from the app.\n            // If the Meteor babel-runtime package is not installed, then\n            // we should rely on node_modules/babel-runtime/* instead. On\n            // the server that still means removing bundled files here and\n            // relying on programs/server/npm/node_modules/babel-runtime,\n            // but on the web these bundled files are all we have, so we'd\n            // better not remove them.\n            if (checkBabelRuntimeHelper(file.installPath)) {\n              return;\n            }\n          }\n\n          const nodeModulesIndex = parts.indexOf(\"node_modules\");\n\n          if (nodeModulesIndex === -1 || (nodeModulesIndex === 0 &&\n                                          parts[1] === \"meteor\")) {\n            appFilesWithoutNodeModules.push(file);\n          } else {\n            // This file is going to be installed in a node_modules\n            // directory, so we move it to the modules bundle so that it\n            // can be imported by any package that uses the modules\n            // package. Note that this includes all files within any\n            // node_modules directory in the app, even though packages in\n            // client/node_modules will not be importable by Meteor\n            // packages, because it's important for all npm packages in\n            // the app to share the same limited scope (i.e. the scope of\n            // the modules package).\n            map.get(\"modules\").files.push(file);\n          }\n        });\n\n        map.get(null).files = appFilesWithoutNodeModules;\n\n      } else {\n        map.get(name).files = outputFiles;\n      }\n    });\n\n    return map;\n  }\n\n  static _warnAboutMissingModules(missingNodeModules) {\n    const topLevelMissingIDs = {};\n    const warnings = [];\n\n    _.each(missingNodeModules, (info, id) => {\n      if (info.packageName) {\n        // Silence warnings generated by Meteor packages, since package\n        // authors can be trusted to test their packages, and may have\n        // different/better approaches to ensuring their dependencies are\n        // available. This blanket check makes some of the checks below\n        // redundant, but I would rather create a bit of dead code than\n        // risk introducing bugs when/if this check is reverted.\n        return;\n      }\n\n      if (info.possiblySpurious) {\n        // Silence warnings for missing dependencies in Browserify/Webpack\n        // bundles, since we can reasonably conclude at this point that\n        // they are false positives.\n        return;\n      }\n\n      if (id in serverLibPackages &&\n          archinfo.matches(info.bundleArch, \"os\")) {\n        // Packages in dev_bundle/server-lib/node_modules can always be\n        // resolved at runtime on the server, so we don't need to warn\n        // about them here.\n        return;\n      }\n\n      if (id === \"meteor-node-stubs\" &&\n          info.packageName === \"modules\" &&\n          info.parentPath.endsWith(\"stubs.js\")) {\n        // Don't warn about the require(\"meteor-node-stubs\") call in\n        // packages/modules/stubs.js.\n        return;\n      }\n\n      const parts = id.split(\"/\");\n\n      if (\"./\".indexOf(id.charAt(0)) < 0) {\n        const packageDir = parts[0];\n        if (packageDir === \"meteor\") {\n          // Don't print warnings for uninstalled Meteor packages.\n          return;\n        }\n\n        if (checkBabelRuntimeHelper(id)) {\n          // Don't print warnings for babel-runtime/helpers/* modules,\n          // since we provide most of those.\n          return;\n        }\n\n        if (! _.has(topLevelMissingIDs, packageDir)) {\n          // This information will be used to recommend installing npm\n          // packages below.\n          topLevelMissingIDs[packageDir] = id;\n        }\n\n        if (id.startsWith(\"meteor-node-stubs/deps/\")) {\n          // Instead of printing a warning that meteor-node-stubs/deps/fs\n          // is missing, warn about the \"fs\" module, but still recommend\n          // installing meteor-node-stubs via npm below.\n          id = parts.slice(2).join(\"/\");\n        }\n\n      } else if (info.packageName) {\n        // Disable warnings about relative module resolution failures in\n        // Meteor packages, since there's not much the application\n        // developer can do about those.\n        return;\n      }\n\n      warnings.push(`  ${JSON.stringify(id)} in ${\n        info.parentPath} (${info.bundleArch})`);\n    });\n\n    if (warnings.length > 0) {\n      Console.rawWarn(\"\\nUnable to resolve some modules:\\n\\n\");\n      warnings.forEach(text => Console.warn(text));\n      Console.warn();\n\n      const topLevelKeys = Object.keys(topLevelMissingIDs);\n      if (topLevelKeys.length > 0) {\n        Console.warn(\"If you notice problems related to these missing modules, consider running:\");\n        Console.warn();\n        Console.warn(\"  meteor npm install --save \" + topLevelKeys.join(\" \"));\n        Console.warn();\n      }\n    }\n  }\n\n  // Called by bundler's Target._emitResources.  It returns the actual resources\n  // that end up in the program for this package.  By this point, it knows what\n  // its dependencies are and what their exports are, so it can set up\n  // linker-style imports and exports.\n  getResources({\n    files: jsResources,\n    importExtensions = [\".js\", \".json\"],\n  }) {\n    buildmessage.assertInJob();\n\n    function flatten(arrays) {\n      return Array.prototype.concat.apply([], arrays);\n    }\n\n    const resources = flatten(_.pluck(this.resourceSlots, 'outputResources'));\n\n    resources.push(...this._linkJS(jsResources || flatten(\n      _.pluck(this.resourceSlots, 'jsOutputResources')\n    ), this.useMeteorInstall && {\n      extensions: importExtensions\n    }));\n\n    return resources;\n  }\n\n  _linkJS(jsResources, meteorInstallOptions) {\n    const self = this;\n    buildmessage.assertInJob();\n\n    var bundleArch = self.processor.arch;\n\n    // Run the linker.\n    const isApp = ! self.unibuild.pkg.name;\n    const isWeb = archinfo.matches(self.unibuild.arch, \"web\");\n    const linkerOptions = {\n      useGlobalNamespace: isApp,\n      meteorInstallOptions,\n      // I was confused about this, so I am leaving a comment -- the\n      // combinedServePath is either [pkgname].js or [pluginName]:plugin.js.\n      // XXX: If we change this, we can get rid of source arch names!\n      combinedServePath: isApp ? \"/app.js\" :\n        \"/packages/\" + colonConverter.convert(\n          self.unibuild.pkg.name +\n            (self.unibuild.kind === \"main\" ? \"\" : (\":\" + self.unibuild.kind)) +\n            \".js\"),\n      name: self.unibuild.pkg.name || null,\n      declaredExports: _.pluck(self.unibuild.declaredExports, 'name'),\n      imports: self.importedSymbolToPackageName,\n      // XXX report an error if there is a package called global-imports\n      importStubServePath: isApp && '/packages/global-imports.js',\n      includeSourceMapInstructions: isWeb,\n      noLineNumbers: !isWeb\n    };\n\n    const cacheKey = sha1(JSON.stringify({\n      LINKER_CACHE_SALT,\n      linkerOptions,\n      files: jsResources.map((inputFile) => {\n        return {\n          hash: inputFile.hash,\n          installPath: inputFile.installPath,\n          sourceMap: !! inputFile.sourceMap,\n          mainModule: inputFile.mainModule,\n          imported: inputFile.imported,\n          lazy: inputFile.lazy,\n          bare: inputFile.bare,\n        };\n      })\n    }));\n\n    {\n      const inMemoryCached = LINKER_CACHE.get(cacheKey);\n      if (inMemoryCached) {\n        if (CACHE_DEBUG) {\n          console.log('LINKER IN-MEMORY CACHE HIT:',\n                      linkerOptions.name, bundleArch);\n        }\n        return inMemoryCached;\n      }\n    }\n\n    const cacheFilename = self.linkerCacheDir && files.pathJoin(\n      self.linkerCacheDir, cacheKey + '.cache');\n\n    // The return value from _linkJS includes Buffers, but we want everything to\n    // be JSON for writing to the disk cache. This function converts the string\n    // version to the Buffer version.\n    function bufferifyJSONReturnValue(resources) {\n      resources.forEach((r) => {\n        r.data = new Buffer(r.data, 'utf8');\n      });\n    }\n\n    if (cacheFilename) {\n      let diskCached = null;\n      try {\n        diskCached = files.readJSONOrNull(cacheFilename);\n      } catch (e) {\n        // Ignore JSON parse errors; pretend there was no cache.\n        if (!(e instanceof SyntaxError)) {\n          throw e;\n        }\n      }\n      if (diskCached && diskCached instanceof Array) {\n        // Fix the non-JSON part of our return value.\n        bufferifyJSONReturnValue(diskCached);\n        if (CACHE_DEBUG) {\n          console.log('LINKER DISK CACHE HIT:', linkerOptions.name, bundleArch);\n        }\n        // Add the bufferized value of diskCached to the in-memory LRU cache\n        // so we don't have to go to disk next time.\n        LINKER_CACHE.set(cacheKey, diskCached);\n        return diskCached;\n      }\n    }\n\n    if (CACHE_DEBUG) {\n      console.log('LINKER CACHE MISS:', linkerOptions.name, bundleArch);\n    }\n\n    // nb: linkedFiles might be aliased to an entry in LINKER_CACHE, so don't\n    // mutate anything from it.\n    let canCache = true;\n    let linkedFiles = null;\n    buildmessage.enterJob('linking', () => {\n      linkedFiles = linker.fullLink(jsResources, linkerOptions);\n      if (buildmessage.jobHasMessages()) {\n        canCache = false;\n      }\n    });\n    // Add each output as a resource\n    const ret = linkedFiles.map((file) => {\n      const sm = (typeof file.sourceMap === 'string')\n        ? JSON.parse(file.sourceMap) : file.sourceMap;\n      return {\n        type: \"js\",\n        // This is a string... but we will convert it to a Buffer\n        // before returning from the method (but after writing\n        // to cache).\n        data: file.source,\n        servePath: file.servePath,\n        sourceMap: sm\n      };\n    });\n\n    let retAsJSON;\n    if (canCache && cacheFilename) {\n      retAsJSON = JSON.stringify(ret);\n    }\n\n    // Convert strings to buffers, now that we've serialized it.\n    bufferifyJSONReturnValue(ret);\n\n    if (canCache) {\n      LINKER_CACHE.set(cacheKey, ret);\n      if (cacheFilename) {\n        // Write asynchronously.\n        Fiber(() => files.writeFileAtomically(cacheFilename, retAsJSON)).run();\n      }\n    }\n\n    return ret;\n  }\n}\n\n_.each([\n  \"getResources\",\n  \"_linkJS\",\n], method => {\n  const proto = PackageSourceBatch.prototype;\n  proto[method] = Profile(\n    \"PackageSourceBatch#\" + method,\n    proto[method]\n  );\n});\n\n// static methods to measure in profile\n_.each([\n  \"computeJsOutputFilesMap\"\n], method => {\n  PackageSourceBatch[method] = Profile(\n    \"PackageSourceBatch.\" + method,\n    PackageSourceBatch[method]);\n});\n"]}