{"version":3,"sources":["/tools/isobuild/isopack-cache.js"],"names":["_","require","buildmessage","compiler","files","isopackModule","watch","colonConverter","Profile","archinfo","IsopackCache","options","self","cacheDir","_pluginCacheDirRoot","pluginCacheDirRoot","_includeCordovaUnibuild","includeCordovaUnibuild","_packageMap","packageMap","_tropohouse","tropohouse","_previousIsopackCache","previousIsopackCache","Error","_isopacks","Object","create","_noLineNumbers","noLineNumbers","_lintLocalPackages","lintLocalPackages","_lintPackageWithSourceRoot","lintPackageWithSourceRoot","allLoadedLocalPackagesWatchSet","WatchSet","buildLocalPackages","rootPackageNames","assertInCapture","mkdir_p","onStack","each","name","_ensurePackageLoaded","eachPackage","packageInfo","wipeCachedPackages","packages","packageName","rm_recursive","_isopackDir","_pluginCacheDirForPackage","getIsopack","has","eachBuiltIsopack","iterator","isopack","getSourceRoot","arch","getInfo","kind","packageSource","sourceRoot","isopackPath","packagePath","version","pathJoin","uses","withoutSpecificOs","some","unibuilds","matches","u","implies","use","imp","ensureLoaded","depName","error","previousIsopack","previousInfo","packageNames","getPackagesToLoadFirst","enterJob","jobHasMessages","time","_loadLocalPackage","packagesToLoad","getStrongOrderedUsedAndImpliedPackages","pluginCacheDir","_pluginCacheDirForVersion","Isopack","initFromPath","packageToLoad","_checkUpToDatePreloaded","_pluginCacheDirForLocal","isopackBuildInfoJson","readJSONOrNull","_isopackBuildInfoPath","upToDate","_checkUpToDate","setPluginProviderPackageMap","makeSubsetMap","keys","pluginProviderPackageMap","_lintLocalPackage","compile","isopackCache","includePluginProviderPackageMap","saveToPath","includeIsopackBuildInfo","merge","getMergedWatchSet","assertInJob","_shouldLintPackage","lint","warnings","linted","lintingMessages","builtBy","BUILT_BY","isSupersetOfJSON","watchSet","fromJSON","pluginDependencies","unibuildDependencies","deps","isUpToDate","hasCordovaUnibuild","toJSON","convert","forgetPreviousIsopackCache","getLintingMessagesForLocalPackages","messages","_MessageSet","anyLinters","isopackMessages"],"mappings":"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","file":"tools/isobuild/isopack-cache.js.map","sourcesContent":["var _ = require('underscore');\n\nvar buildmessage = require('../utils/buildmessage.js');\nvar compiler = require('./compiler.js');\nvar files = require('../fs/files.js');\nvar isopackModule = require('./isopack.js');\nvar watch = require('../fs/watch.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar Profile = require('../tool-env/profile.js').Profile;\nvar archinfo = require('../utils/archinfo.js');\n\nexport class IsopackCache {\n  constructor(options) {\n    var self = this;\n    options = options || {};\n\n    // cacheDir may be null; in this case, we just don't ever save things to disk.\n    self.cacheDir = options.cacheDir;\n\n    // Root directory for caches used by build plugins.  Can be null, in which\n    // case we never give the build plugins a cache.  The directory structure is:\n    // <pluginCacheDirRoot>/<escapedPackageName>/<version>, where <version> is\n    // either the package's version if it's a versioned package, or \"local\" if\n    // it's a local package.  In the latter case, we make sure to empty it any\n    // time we rebuild the package.\n    self._pluginCacheDirRoot = options.pluginCacheDirRoot;\n\n    // This is a bit of a hack, but basically: we really don't want to spend time\n    // building web.cordova unibuilds in a project that doesn't have any Cordova\n    // platforms. (Note that we need to be careful with 'meteor publish' to still\n    // publish a web.cordova unibuild!)\n    self._includeCordovaUnibuild = !! options.includeCordovaUnibuild;\n\n    // Defines the versions of packages that we build. Must be set.\n    self._packageMap = options.packageMap;\n\n    // tropohouse may be null; in this case, we can't load versioned packages.\n    // eg, for building isopackets.\n    self._tropohouse = options.tropohouse;\n\n    // If provided, this is another IsopackCache for the same cache dir; when\n    // loading Isopacks, if they are definitely unchanged we can load the\n    // in-memory objects from this cache instead of recompiling.\n    self._previousIsopackCache = options.previousIsopackCache;\n    if (self._previousIsopackCache &&\n        self._previousIsopackCache.cacheDir !== self.cacheDir) {\n      throw Error(\"previousIsopackCache has different cacheDir!\");\n    }\n\n    // Map from package name to Isopack.\n    self._isopacks = Object.create(null);\n\n    self._noLineNumbers = !! options.noLineNumbers;\n\n    self._lintLocalPackages = !! options.lintLocalPackages;\n    self._lintPackageWithSourceRoot = options.lintPackageWithSourceRoot;\n\n    self.allLoadedLocalPackagesWatchSet = new watch.WatchSet;\n  }\n\n  buildLocalPackages(rootPackageNames) {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    if (self.cacheDir) {\n      files.mkdir_p(self.cacheDir);\n    }\n\n    var onStack = {};\n    if (rootPackageNames) {\n      _.each(rootPackageNames, function (name) {\n        self._ensurePackageLoaded(name, onStack);\n      });\n    } else {\n      self._packageMap.eachPackage(function (name, packageInfo) {\n        self._ensurePackageLoaded(name, onStack);\n      });\n    }\n  }\n\n  wipeCachedPackages(packages) {\n    var self = this;\n    if (packages) {\n      // Wipe specific packages.\n      _.each(packages, function (packageName) {\n        if (self.cacheDir) {\n          files.rm_recursive(self._isopackDir(packageName));\n        }\n        if (self._pluginCacheDirRoot) {\n          files.rm_recursive(self._pluginCacheDirForPackage(packageName));\n        }\n      });\n    } else {\n      // Wipe all packages.\n      if (self.cacheDir) {\n        files.rm_recursive(self.cacheDir);\n      }\n      if (self._pluginCacheDirRoot) {\n        files.rm_recursive(self._pluginCacheDirRoot);\n      }\n    }\n  }\n\n  // Returns the isopack (already loaded in memory) for a given name. It is an\n  // error to call this if it's not already loaded! So it should only be called\n  // after buildLocalPackages has returned, or in the process of building a\n  // package whose dependencies have all already been built.\n  getIsopack(name) {\n    var self = this;\n    if (! _.has(self._isopacks, name)) {\n      throw Error(\"isopack \" + name + \" not yet loaded?\");\n    }\n    return self._isopacks[name];\n  }\n\n  eachBuiltIsopack(iterator) {\n    var self = this;\n    _.each(self._isopacks, function (isopack, packageName) {\n      iterator(packageName, isopack);\n    });\n  }\n\n  getSourceRoot(name, arch) {\n    const packageInfo = this._packageMap.getInfo(name);\n\n    if (packageInfo) {\n      if (packageInfo.kind === \"local\") {\n        return packageInfo.packageSource.sourceRoot;\n      }\n\n      if (packageInfo.kind === \"versioned\") {\n        const isopackPath = this._tropohouse.packagePath(\n          name,\n          packageInfo.version\n        );\n\n        return files.pathJoin(isopackPath, arch);\n      }\n    }\n\n    return null;\n  }\n\n  uses(isopack, name, arch) {\n    if (! isopack) {\n      return false;\n    }\n\n    if (isopack.name === name) {\n      // Packages use themselves.\n      return true;\n    }\n\n    arch = arch && archinfo.withoutSpecificOs(arch);\n\n    return _.some(isopack.unibuilds, u => {\n      if (arch && ! archinfo.matches(u.arch, arch)) {\n        return false;\n      }\n\n      return _.some(u.uses, use => {\n        return this.implies(\n          this._isopacks[use.package],\n          name,\n          arch,\n        );\n      });\n    });\n  }\n\n  implies(isopack, name, arch) {\n    if (! isopack) {\n      return false;\n    }\n\n    if (isopack.name === name) {\n      // Packages imply themselves.\n      return true;\n    }\n\n    arch = arch && archinfo.withoutSpecificOs(arch);\n\n    return _.some(isopack.unibuilds, u => {\n      if (arch && ! archinfo.matches(u.arch, arch)) {\n        return false;\n      }\n\n      return _.some(u.implies, imp => {\n        return this.implies(\n          this._isopacks[imp.package],\n          name,\n          arch,\n        );\n      });\n    });\n  }\n\n  _ensurePackageLoaded(name, onStack) {\n    var self = this;\n    buildmessage.assertInCapture();\n    if (_.has(self._isopacks, name)) {\n      return;\n    }\n\n    var ensureLoaded = function (depName) {\n      if (_.has(onStack, depName)) {\n        buildmessage.error(\"circular dependency between packages \" +\n                           name + \" and \" + depName);\n        // recover by not enforcing one of the dependencies\n        return;\n      }\n      onStack[depName] = true;\n      self._ensurePackageLoaded(depName, onStack);\n      delete onStack[depName];\n    };\n\n    var packageInfo = self._packageMap.getInfo(name);\n    if (! packageInfo) {\n      throw Error(\"Depend on unknown package \" + name + \"?\");\n    }\n    var previousIsopack = null;\n    if (self._previousIsopackCache &&\n        _.has(self._previousIsopackCache._isopacks, name)) {\n      var previousInfo = self._previousIsopackCache._packageMap.getInfo(name);\n      if ((packageInfo.kind === 'versioned' &&\n           previousInfo.kind === 'versioned' &&\n           packageInfo.version === previousInfo.version) ||\n          (packageInfo.kind === 'local' &&\n           previousInfo.kind === 'local' &&\n           (packageInfo.packageSource.sourceRoot ===\n            previousInfo.packageSource.sourceRoot))) {\n        previousIsopack = self._previousIsopackCache._isopacks[name];\n      }\n    }\n\n    if (packageInfo.kind === 'local') {\n      var packageNames =\n            packageInfo.packageSource.getPackagesToLoadFirst(self._packageMap);\n      buildmessage.enterJob(\"preparing to build package \" + name, function () {\n        _.each(packageNames, function (depName) {\n          ensureLoaded(depName);\n        });\n        // If we failed to load something that this package depends on, don't\n        // load it.\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n        Profile.time('IsopackCache Build local isopack', () => {\n          self._loadLocalPackage(name, packageInfo, previousIsopack);\n        });\n      });\n    } else if (packageInfo.kind === 'versioned') {\n      // We don't have to build this package, and we don't have to build its\n      // dependencies either! Just load it from disk.\n\n      if (!self._tropohouse) {\n        throw Error(\"Can't load versioned packages without a tropohouse!\");\n      }\n\n      var isopack = null, packagesToLoad = [];\n\n      Profile.time('IsopackCache Load local isopack', () => {\n        if (previousIsopack) {\n          // We can always reuse a previous Isopack for a versioned package, since\n          // we assume that it never changes.  (Admittedly, this means we won't\n          // notice if we download an additional build for the package.)\n          isopack = previousIsopack;\n          packagesToLoad = isopack.getStrongOrderedUsedAndImpliedPackages();\n        }\n        if (! isopack) {\n          // Load the isopack from disk.\n          buildmessage.enterJob(\n            \"loading package \" + name + \"@\" + packageInfo.version,\n            function () {\n              var pluginCacheDir;\n              if (self._pluginCacheDirRoot) {\n                pluginCacheDir = self._pluginCacheDirForVersion(\n                  name, packageInfo.version);\n                files.mkdir_p(pluginCacheDir);\n              }\n              var isopackPath = self._tropohouse.packagePath(\n                name, packageInfo.version);\n\n              var Isopack = isopackModule.Isopack;\n              isopack = new Isopack();\n              isopack.initFromPath(name, isopackPath, {\n                pluginCacheDir: pluginCacheDir\n              });\n              // If loading the isopack fails, then we don't need to look for more\n              // packages to load, but we should still recover by putting it in\n              // self._isopacks.\n              if (buildmessage.jobHasMessages()) {\n                return;\n              }\n              packagesToLoad = isopack.getStrongOrderedUsedAndImpliedPackages();\n            });\n        }\n      });\n\n      self._isopacks[name] = isopack;\n      // Also load its dependencies. This is so that if this package is being\n      // built as part of a plugin, all the transitive dependencies of the\n      // plugin are loaded.\n      _.each(packagesToLoad, function (packageToLoad) {\n        ensureLoaded(packageToLoad);\n      });\n    } else {\n      throw Error(\"unknown packageInfo kind?\");\n    }\n  }\n\n  _loadLocalPackage(name, packageInfo, previousIsopack) {\n    var self = this;\n    buildmessage.assertInCapture();\n    buildmessage.enterJob(\"building package \" + name, function () {\n      var isopack;\n      if (previousIsopack && self._checkUpToDatePreloaded(previousIsopack)) {\n        isopack = previousIsopack;\n        // We don't need to call self._lintLocalPackage here, because\n        // lintingMessages is saved on the isopack.\n      } else {\n        var pluginCacheDir;\n        if (self._pluginCacheDirRoot) {\n          pluginCacheDir = self._pluginCacheDirForLocal(name);\n        }\n\n        // Do we have an up-to-date package on disk?\n        var isopackBuildInfoJson = self.cacheDir && files.readJSONOrNull(\n          self._isopackBuildInfoPath(name));\n        var upToDate = self._checkUpToDate(isopackBuildInfoJson);\n\n        if (upToDate) {\n          // Reuse existing plugin cache dir\n          pluginCacheDir && files.mkdir_p(pluginCacheDir);\n\n          isopack = new isopackModule.Isopack();\n          isopack.initFromPath(name, self._isopackDir(name), {\n            isopackBuildInfoJson: isopackBuildInfoJson,\n            pluginCacheDir: pluginCacheDir\n          });\n          // _checkUpToDate already verified that\n          // isopackBuildInfoJson.pluginProviderPackageMap is a subset of\n          // self._packageMap, so this operation is correct. (It can't be done\n          // by isopack.initFromPath, because Isopack doesn't have access to\n          // the PackageMap, and specifically to the local catalog it knows\n          // about.)\n          isopack.setPluginProviderPackageMap(\n            self._packageMap.makeSubsetMap(\n              _.keys(isopackBuildInfoJson.pluginProviderPackageMap)));\n          // Because we don't save linter messages to disk, we have to relint\n          // this package.\n          // XXX save linter messages to disk?\n          self._lintLocalPackage(packageInfo.packageSource, isopack);\n        } else {\n          // Nope! Compile it again. Give it a fresh plugin cache.\n          if (pluginCacheDir) {\n            files.rm_recursive(pluginCacheDir);\n            files.mkdir_p(pluginCacheDir);\n          }\n          isopack = compiler.compile(packageInfo.packageSource, {\n            packageMap: self._packageMap,\n            isopackCache: self,\n            noLineNumbers: self._noLineNumbers,\n            includeCordovaUnibuild: self._includeCordovaUnibuild,\n            includePluginProviderPackageMap: true,\n            pluginCacheDir: pluginCacheDir\n          });\n          // Accept the compiler's result, even if there were errors (since it\n          // at least will have a useful WatchSet and will allow us to keep\n          // going and compile other packages that depend on this one). However,\n          // only lint it and save it to disk if there were no errors.\n          if (! buildmessage.jobHasMessages()) {\n            // Lint the package. We do this before saving so that the linter can\n            // augment the saved-to-disk WatchSet with linter-specific files.\n            self._lintLocalPackage(packageInfo.packageSource, isopack);\n            if (self.cacheDir) {\n              // Save to disk, for next time!\n              isopack.saveToPath(self._isopackDir(name), {\n                includeIsopackBuildInfo: true,\n                isopackCache: self,\n              });\n            }\n          }\n        }\n      }\n\n      self.allLoadedLocalPackagesWatchSet.merge(isopack.getMergedWatchSet());\n      self._isopacks[name] = isopack;\n    });\n  }\n\n  // Runs appropriate linters on a package. It also augments their unibuilds'\n  // WatchSets with files used by the linter.\n  _lintLocalPackage(packageSource, isopack) {\n    buildmessage.assertInJob();\n    if (!this._shouldLintPackage(packageSource)) {\n      return;\n    }\n    const {warnings, linted} = compiler.lint(packageSource, {\n      isopackCache: this,\n      isopack: isopack,\n      includeCordovaUnibuild: this._includeCordovaUnibuild\n    });\n    // Empty lintingMessages means we ran linters and everything was OK.\n    // lintingMessages left null means there were no linters to run.\n    if (linted) {\n      isopack.lintingMessages = warnings;\n    }\n  }\n\n  _checkUpToDate(isopackBuildInfoJson) {\n    var self = this;\n    // If there isn't an isopack-buildinfo.json file, then we definitely aren't\n    // up to date!\n    if (! isopackBuildInfoJson) {\n      return false;\n    }\n\n    // If we include Cordova but this Isopack doesn't, or via versa, then we're\n    // not up to date.\n    if (self._includeCordovaUnibuild !==\n        isopackBuildInfoJson.includeCordovaUnibuild) {\n      return false;\n    }\n\n    // Was the package built by a different compiler version?\n    if (isopackBuildInfoJson.builtBy !== compiler.BUILT_BY) {\n      return false;\n    }\n\n    // If any of the direct dependencies changed their version or location, we\n    // aren't up to date.\n    if (!self._packageMap.isSupersetOfJSON(\n      isopackBuildInfoJson.pluginProviderPackageMap)) {\n      return false;\n    }\n    // Merge in the watchsets for all unibuilds and plugins in the package, then\n    // check it once.\n    var watchSet = watch.WatchSet.fromJSON(\n      isopackBuildInfoJson.pluginDependencies);\n\n    _.each(isopackBuildInfoJson.unibuildDependencies, function (deps) {\n      watchSet.merge(watch.WatchSet.fromJSON(deps));\n    });\n    return watch.isUpToDate(watchSet);\n  }\n\n  _checkUpToDatePreloaded(previousIsopack) {\n    var self = this;\n\n    // If we include Cordova but this Isopack doesn't, or via versa, then we're\n    // not up to date.\n    if (self._includeCordovaUnibuild !== previousIsopack.hasCordovaUnibuild()) {\n      return false;\n    }\n\n    // We don't have to check builtBy because we don't change BUILT_BY without\n    // restarting the process.\n\n    // If any of the direct dependencies changed their version or location, we\n    // aren't up to date.\n    if (!self._packageMap.isSupersetOfJSON(\n      previousIsopack.pluginProviderPackageMap.toJSON())) {\n      return false;\n    }\n    // Merge in the watchsets for all unibuilds and plugins in the package, then\n    // check it once.\n    var watchSet = previousIsopack.getMergedWatchSet();\n    return watch.isUpToDate(watchSet);\n  }\n\n  _isopackDir(packageName) {\n    var self = this;\n    return files.pathJoin(self.cacheDir, colonConverter.convert(packageName));\n  }\n\n  _pluginCacheDirForPackage(packageName) {\n    var self = this;\n    return files.pathJoin(self._pluginCacheDirRoot,\n                          colonConverter.convert(packageName));\n  }\n\n  _pluginCacheDirForVersion(packageName, version) {\n    var self = this;\n    return files.pathJoin(\n      self._pluginCacheDirForPackage(packageName), version);\n  }\n\n  _pluginCacheDirForLocal(packageName) {\n    var self = this;\n    // assumes that `local` is not a valid package version.\n    return files.pathJoin(\n      self._pluginCacheDirForPackage(packageName), 'local');\n  }\n\n  _isopackBuildInfoPath(packageName) {\n    var self = this;\n    return files.pathJoin(\n      self._isopackDir(packageName), 'isopack-buildinfo.json');\n  }\n\n  forgetPreviousIsopackCache() {\n    var self = this;\n    self._previousIsopackCache = null;\n  }\n\n  _shouldLintPackage(packageSource) {\n    if (this._lintLocalPackages) {\n      return true;\n    }\n    if (! this._lintPackageWithSourceRoot) {\n      return false;\n    }\n    return this._lintPackageWithSourceRoot === packageSource.sourceRoot;\n  }\n\n  getLintingMessagesForLocalPackages() {\n    const messages = new buildmessage._MessageSet();\n    let anyLinters = false;\n\n    this._packageMap.eachPackage((name, packageInfo) => {\n      const isopack = this._isopacks[name];\n      if (packageInfo.kind === 'local') {\n        if (!this._shouldLintPackage(packageInfo.packageSource)) {\n          return;\n        }\n        const isopackMessages = isopack.lintingMessages;\n        if (isopackMessages) {\n          anyLinters = true;\n          messages.merge(isopackMessages);\n        }\n      }\n    });\n\n    // return null if no linters were ever run\n    if (! anyLinters) { return null; }\n\n    return messages;\n  }\n}\n"]}