{"version":3,"sources":["/tools/isobuild/meteor-npm.js"],"names":["assert","require","cleanup","fs","files","os","_","httpHelpers","buildmessage","utils","runLog","Profile","execFileAsync","get","getRebuildArgs","convert","convertColonsInPath","dirtyNodeModulesDirectory","optimisticLStat","optimisticStatOrNull","optimisticReadJsonOrNull","optimisticReaddir","meteorNpm","exports","tmpDirs","onExit","each","dir","exists","rm_recursive","NpmFailure","updateDependencies","packageName","packageNpmDir","npmDependencies","quiet","newPackageNpmDir","randomToken","isEmpty","rename","e","code","pathJoin","updateExistingNpmDirectory","createFreshNpmDirectory","without","getProdPackageNames","nodeModulesDir","names","Object","create","dirs","nodeModulesDirStack","walk","packageJsonPath","packageJsonStat","isFile","pkg","push","scanDeps","dependencies","peerDependencies","optionalDependencies","bundledDependencies","bundleDependencies","strictEqual","pop","deps","keys","forEach","resDir","resolve","name","has","i","length","candidate","stat","isDirectory","pathDirname","lastRebuildJSONFilename","currentVersions","platform","process","arch","versions","currentVersionsJSON","JSON","stringify","recordLastRebuildVersions","pkgDir","writeFile","versionsAreCompatible","parse","isSubtreeOf","a","b","aType","bType","aVer","bVer","major","minor","rebuildVersionsAreCompatible","pkgPath","versionFile","rebuildIfNonPortable","dirsToRebuild","readdir","isPortable","tempDir","tempNodeModules","mkdir_p","tempPkgDirs","tempPkgDir","pathBasename","copyNpmPackageWithSymlinkedNodeModules","rebuildResult","runNpmCommand","success","error","actualNodeModulesDir","actualNodeModulesStat","statOrNull","symlinkNodeModulesDir","renameDirAlmostAtomically","fromPkgDir","toPkgDir","needToHandleNodeModules","item","cp_r","nodeModulesFromPath","nodeModulesToPath","mkdir","depPath","absDepFromPath","absDepToPath","symlink","lstat","endsWith","pkgJsonStat","canCache","portableFile","result","unlink","every","itemName","startsWith","dependenciesArePortable","ok","makeNewPackageNpmDir","join","Error","oldNodeVersion","readFile","currentNodeCompatibilityVersion","installedDependenciesTree","getInstalledDependenciesTree","shrinkwrappedDependenciesTree","getShrinkwrappedDependenciesTree","npmTree","version","minInstalledTree","minimizeDependencyTree","minShrinkwrapTree","logUpdateDependencies","preservedShrinkwrap","newShrinkwrapFile","installFromShrinkwrap","completeNpmDirectory","subsetTree","supersetTree","predicate","isObject","value","key","isFunction","installNpmModule","shrinkwrap","copyFile","createReadme","createNodeVersion","replace","npmUserConfigFile","__dirname","args","cwd","getEnv","devBundleDir","getDevBundle","isWindows","npmPath","convertToOSPath","_printNpmCalls","stdout","write","devBundle","then","opts","env","maxBuffer","npm_config_userconfig","Promise","execFile","err","stderr","message","await","ls","contents","sort","pkgJsonPath","info","resolved","_resolved","from","_from","shrinkwrapFile","canonicalVersion","depObj","isNpmUrl","treeToDependencies","tree","object","map","properties","getInstalledDependencies","getShrinkwrappedDependencies","installArg","pkgNotFound","quotemeta","versionNotFound","match","RegExp","pathsWithColons","findPathsWithRegex","firstTen","slice","tempPkgJsonPath","pkgJsonExisted","minimizeModule","module","minimized","subModule","newTopLevelDependencies","log"],"mappings":"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","file":"tools/isobuild/meteor-npm.js.map","sourcesContent":["/// Implements the process of managing a package's .npm directory,\n/// in which we call `npm install` to install npm dependencies,\n/// and a variety of related commands. Notably, we use `npm shrinkwrap`\n/// to ensure we get consistent versions of npm sub-dependencies.\n\nvar assert = require('assert');\nvar cleanup = require('../tool-env/cleanup.js');\nvar fs = require('fs');\nvar files = require('../fs/files.js');\nvar os = require('os');\nvar _ = require('underscore');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar utils = require('../utils/utils.js');\nvar runLog = require('../runners/run-log.js');\nvar Profile = require('../tool-env/profile.js').Profile;\nimport { execFileAsync } from \"../utils/processes.js\";\nimport {\n  get as getRebuildArgs\n} from \"../static-assets/server/npm-rebuild-args.js\";\nimport {\n  convert as convertColonsInPath\n} from \"../utils/colon-converter.js\";\n\nimport {\n  dirtyNodeModulesDirectory,\n  optimisticLStat,\n  optimisticStatOrNull,\n  optimisticReadJsonOrNull,\n  optimisticReaddir,\n} from \"../fs/optimistic.js\";\n\nvar meteorNpm = exports;\n\n// if a user exits meteor while we're trying to create a .npm\n// directory, we will have temporary directories that we clean up\nvar tmpDirs = [];\ncleanup.onExit(function () {\n  _.each(tmpDirs, function (dir) {\n    if (files.exists(dir)) {\n      files.rm_recursive(dir);\n    }\n  });\n});\n\n// Exception used internally to gracefully bail out of a npm run if\n// something goes wrong\nvar NpmFailure = function () {};\n\n// Creates a temporary directory in which the new contents of the\n// package's .npm directory will be assembled. If all is successful,\n// renames that directory back to .npm. Returns true if there are NPM\n// dependencies and they are installed without error.\n//\n// @param npmDependencies {Object} dependencies that should be\n//     installed, eg {tar: '0.1.6', gcd: '0.0.0'}. If falsey or empty,\n//     will remove the .npm directory instead.\nmeteorNpm.updateDependencies = function (packageName,\n                                         packageNpmDir,\n                                         npmDependencies,\n                                         quiet) {\n  // we make sure to put it beside the original package dir so that\n  // we can then atomically rename it. we also make sure to\n  // randomize the name, in case we're bundling this package\n  // multiple times in parallel.\n  var newPackageNpmDir =\n    convertColonsInPath(packageNpmDir) + '-new-' + utils.randomToken();\n\n  if (! npmDependencies || _.isEmpty(npmDependencies)) {\n    // No NPM dependencies? Delete the .npm directory if it exists (because,\n    // eg, we used to have NPM dependencies but don't any more).  We'd like to\n    // do this in as atomic a way as possible in case multiple meteor\n    // instances are trying to make this update in parallel, so we rename the\n    // directory to something before doing the rm -rf.\n    try {\n      files.rename(packageNpmDir, newPackageNpmDir);\n    } catch (e) {\n      if (e.code !== 'ENOENT') {\n        throw e;\n      }\n      // It didn't exist, which is exactly what we wanted.\n      return false;\n    }\n    files.rm_recursive(newPackageNpmDir);\n    return false;\n  }\n\n  try {\n    // v0.6.0 had a bug that could cause .npm directories to be\n    // created without npm-shrinkwrap.json\n    // (https://github.com/meteor/meteor/pull/927). Running your app\n    // in that state causes consistent \"Corrupted .npm directory\"\n    // errors.\n    //\n    // If you've reached that state, delete the empty directory and\n    // proceed.\n    if (files.exists(packageNpmDir) &&\n        ! files.exists(files.pathJoin(packageNpmDir, 'npm-shrinkwrap.json'))) {\n      files.rm_recursive(packageNpmDir);\n    }\n\n    if (files.exists(packageNpmDir)) {\n      // we already nave a .npm directory. update it appropriately with some\n      // ceremony involving:\n      // `npm install`, `npm install name@version`, `npm shrinkwrap`\n      updateExistingNpmDirectory(\n        packageName, newPackageNpmDir, packageNpmDir, npmDependencies, quiet);\n    } else {\n      // create a fresh .npm directory with `npm install\n      // name@version` and `npm shrinkwrap`\n      createFreshNpmDirectory(\n        packageName, newPackageNpmDir, packageNpmDir, npmDependencies, quiet);\n    }\n  } catch (e) {\n    if (e instanceof NpmFailure) {\n      // Something happened that was out of our control, but wasn't\n      // exactly unexpected (eg, no such npm package, no internet\n      // connection). Handle it gracefully.\n      return false;\n    }\n\n    // Some other exception -- let it propagate.\n    throw e;\n  } finally {\n    if (files.exists(newPackageNpmDir)) {\n      files.rm_recursive(newPackageNpmDir);\n    }\n    tmpDirs = _.without(tmpDirs, newPackageNpmDir);\n  }\n\n  return true;\n};\n\n// Returns a flattened dictionary of npm package names used in production,\n// or false if there is no package.json file in the parent directory.\nexport function getProdPackageNames(nodeModulesDir) {\n  const names = Object.create(null);\n  const dirs = Object.create(null);\n  const nodeModulesDirStack = [];\n\n  // Returns true iff dir is a package directory.\n  function walk(dir) {\n    const packageJsonPath = files.pathJoin(dir, \"package.json\");\n    const packageJsonStat = optimisticStatOrNull(packageJsonPath);\n\n    if (packageJsonStat &&\n        packageJsonStat.isFile()) {\n      const pkg = optimisticReadJsonOrNull(packageJsonPath);\n      const nodeModulesDir = files.pathJoin(dir, \"node_modules\");\n      nodeModulesDirStack.push(nodeModulesDir);\n\n      // Scan all dependencies except pkg.devDependencies.\n      scanDeps(pkg.dependencies);\n      scanDeps(pkg.peerDependencies);\n      scanDeps(pkg.optionalDependencies);\n      scanDeps(pkg.bundledDependencies);\n      // This typo is also honored.\n      scanDeps(pkg.bundleDependencies);\n\n      assert.strictEqual(\n        nodeModulesDirStack.pop(),\n        nodeModulesDir\n      );\n\n      return true;\n    }\n\n    return false;\n  }\n\n  function scanDeps(deps) {\n    if (! deps) {\n      return;\n    }\n\n    Object.keys(deps).forEach(name => {\n      const resDir = resolve(name);\n      if (! resDir || _.has(dirs, resDir)) {\n        return;\n      }\n\n      // Record that we've seen this directory so that we don't try to\n      // walk it again.\n      dirs[resDir] = name;\n\n      if (walk(resDir)) {\n        // If resDir is indeed a package directory, record the package\n        // name in the set of production names.\n        names[name] = true;\n      }\n    });\n  }\n\n  function resolve(name) {\n    for (let i = nodeModulesDirStack.length - 1; i >= 0; --i) {\n      const nodeModulesDir = nodeModulesDirStack[i];\n      const candidate = files.pathJoin(nodeModulesDir, name);\n      const stat = optimisticStatOrNull(candidate);\n      if (stat && stat.isDirectory()) {\n        return candidate;\n      }\n    }\n  }\n\n  // If the top-level nodeModulesDir is not contained by a package\n  // directory with a package.json file, then we return false to indicate\n  // that we don't know or care which packages are production-specific.\n  // Concretely, this means your app needs to have a package.json file if\n  // you want any npm packages to be excluded in production.\n  return walk(files.pathDirname(nodeModulesDir)) && names;\n}\n\nconst lastRebuildJSONFilename = \".meteor-last-rebuild-version.json\";\n\nconst currentVersions = {\n  platform: process.platform,\n  arch: process.arch,\n  versions: {...process.versions},\n};\n\nconst currentVersionsJSON =\n  JSON.stringify(currentVersions, null, 2) + \"\\n\";\n\nfunction recordLastRebuildVersions(pkgDir) {\n  // Record the current process.{platform,arch,versions} so that we can\n  // avoid copying/rebuilding/renaming next time.\n  files.writeFile(\n    files.pathJoin(pkgDir, lastRebuildJSONFilename),\n    currentVersionsJSON,\n    \"utf8\"\n  );\n}\n\n// Returns true iff isSubtreeOf(currentVersions, versions), allowing\n// valid semantic versions to differ in their patch versions.\nfunction versionsAreCompatible(versions) {\n  import { parse } from \"semver\";\n\n  return isSubtreeOf(currentVersions, versions, (a, b) => {\n    // Technically already handled by isSubtreeOf, but doesn't hurt.\n    if (a === b) {\n      return true;\n    }\n\n    if (! a || ! b) {\n      return false;\n    }\n\n    const aType = typeof a;\n    const bType = typeof b;\n\n    if (aType !== bType) {\n      return false;\n    }\n\n    if (aType === \"string\") {\n      const aVer = parse(a);\n      const bVer = parse(b);\n      return aVer && bVer &&\n        aVer.major === bVer.major &&\n        aVer.minor === bVer.minor;\n    }\n  });\n}\n\nfunction rebuildVersionsAreCompatible(pkgPath) {\n  const versionFile =\n    files.pathJoin(pkgPath, lastRebuildJSONFilename);\n\n  return versionsAreCompatible(\n    optimisticReadJsonOrNull(versionFile));\n}\n\n// Rebuilds any binary dependencies in the given node_modules directory,\n// and returns true iff anything was rebuilt.\nmeteorNpm.rebuildIfNonPortable =\nProfile(\"meteorNpm.rebuildIfNonPortable\", function (nodeModulesDir) {\n  const dirsToRebuild = [];\n\n  files.readdir(nodeModulesDir).forEach(function (pkg) {\n    const pkgPath = files.pathJoin(nodeModulesDir, pkg);\n\n    if (isPortable(pkgPath)) {\n      return;\n    }\n\n    if (rebuildVersionsAreCompatible(pkgPath)) {\n      return;\n    }\n\n    dirsToRebuild.push(pkgPath);\n  });\n\n  if (dirsToRebuild.length === 0) {\n    return false;\n  }\n\n  const tempDir = files.pathJoin(\n    nodeModulesDir,\n    \".temp-\" + utils.randomToken()\n  );\n\n  // There's a chance the basename of the original nodeModulesDir isn't\n  // actually \"node_modules\", which will confuse the `npm rebuild`\n  // command, but fortunately we can ensure this temporary directory has\n  // exactly that basename.\n  const tempNodeModules = files.pathJoin(tempDir, \"node_modules\");\n  files.mkdir_p(tempNodeModules);\n\n  // Map from original package directory paths to temporary package\n  // directory paths.\n  const tempPkgDirs = {};\n\n  dirsToRebuild.forEach(function (pkgPath) {\n    const tempPkgDir = tempPkgDirs[pkgPath] = files.pathJoin(\n      tempNodeModules,\n      files.pathBasename(pkgPath)\n    );\n\n    // Copy the package directory instead of renaming it, so that the\n    // original package will be left untouched if the rebuild fails. We\n    // could just run files.cp_r(pkgPath, tempPkgDir) here, except that we\n    // want to handle nested node_modules directories specially.\n    copyNpmPackageWithSymlinkedNodeModules(pkgPath, tempPkgDir);\n\n    // Record the current process.versions so that we can avoid\n    // copying/rebuilding/renaming next time.\n    recordLastRebuildVersions(tempPkgDir);\n  });\n\n  // The `npm rebuild` command must be run in the parent directory of the\n  // relevant node_modules directory, which in this case is tempDir.\n  const rebuildResult = runNpmCommand(getRebuildArgs(), tempDir);\n  if (! rebuildResult.success) {\n    buildmessage.error(rebuildResult.error);\n    files.rm_recursive(tempDir);\n    return false;\n  }\n\n  dirtyNodeModulesDirectory(nodeModulesDir);\n\n  // If the `npm rebuild` command succeeded, overwrite the original\n  // package directories with the rebuilt package directories.\n  dirsToRebuild.forEach(function (pkgPath) {\n    const actualNodeModulesDir =\n      files.pathJoin(pkgPath, \"node_modules\");\n\n    const actualNodeModulesStat =\n      files.statOrNull(actualNodeModulesDir);\n\n    if (actualNodeModulesStat &&\n        actualNodeModulesStat.isDirectory()) {\n      // If the original package had a node_modules directory, move it\n      // into the temporary package directory, overwriting the one created\n      // by copyNpmPackageWithSymlinkedNodeModules (which contains only\n      // symlinks), so that when we rename the temporary directory back to\n      // the original directory below, we'll end up with a node_modules\n      // directory that contains real packages rather than symlinks.\n\n      const symlinkNodeModulesDir =\n        files.pathJoin(tempPkgDirs[pkgPath], \"node_modules\");\n\n      files.renameDirAlmostAtomically(\n        actualNodeModulesDir,\n        symlinkNodeModulesDir\n      );\n    }\n\n    files.renameDirAlmostAtomically(tempPkgDirs[pkgPath], pkgPath);\n  });\n\n  files.rm_recursive(tempDir);\n\n  return true;\n});\n\n// Copy an npm package directory to another location, but attempt to\n// symlink all of its node_modules rather than recursively copying them,\n// which potentially saves a lot of time.\nfunction copyNpmPackageWithSymlinkedNodeModules(fromPkgDir, toPkgDir) {\n  files.mkdir_p(toPkgDir);\n\n  let needToHandleNodeModules = false;\n\n  files.readdir(fromPkgDir).forEach(item => {\n    if (item === \"node_modules\") {\n      // We'll link or copy node_modules in a follow-up step.\n      needToHandleNodeModules = true;\n      return;\n    }\n\n    files.cp_r(\n      files.pathJoin(fromPkgDir, item),\n      files.pathJoin(toPkgDir, item)\n    );\n  });\n\n  if (! needToHandleNodeModules) {\n    return;\n  }\n\n  const nodeModulesFromPath = files.pathJoin(fromPkgDir, \"node_modules\");\n  const nodeModulesToPath = files.pathJoin(toPkgDir, \"node_modules\");\n\n  files.mkdir(nodeModulesToPath);\n\n  files.readdir(nodeModulesFromPath).forEach(depPath => {\n    if (depPath === \".bin\") {\n      // Avoid copying node_modules/.bin because commands like\n      // .bin/node-gyp and .bin/node-pre-gyp tend to cause problems.\n      return;\n    }\n\n    const absDepFromPath = files.pathJoin(nodeModulesFromPath, depPath);\n\n    if (! files.stat(absDepFromPath).isDirectory()) {\n      // Only copy package directories, even though there might be other\n      // kinds of files in node_modules.\n      return;\n    }\n\n    const absDepToPath = files.pathJoin(nodeModulesToPath, depPath);\n\n    // Try to symlink node_modules dependencies if possible (faster),\n    // and fall back to a recursive copy otherwise.\n    try {\n      files.symlink(absDepFromPath, absDepToPath, \"junction\");\n    } catch (e) {\n      files.cp_r(absDepFromPath, absDepToPath);\n    }\n  });\n}\n\nconst isPortable = Profile(\"meteorNpm.isPortable\", dir => {\n  const lstat = optimisticLStat(dir);\n  if (! lstat.isDirectory()) {\n    // Non-directory files are portable unless they end with .node.\n    return ! dir.endsWith(\".node\");\n  }\n\n  const pkgJsonStat = optimisticStatOrNull(files.pathJoin(dir, \"package.json\"));\n  const canCache = pkgJsonStat && pkgJsonStat.isFile();\n  const portableFile = files.pathJoin(dir, \".meteor-portable\");\n\n  if (canCache) {\n    // Cache previous results by writing a boolean value to a hidden file\n    // called .meteor-portable. Although it's tempting to write this file\n    // once for the whole node_modules directory, it's important that we\n    // put .meteor-portable files only in the individual top-level package\n    // directories, so that they will get cleared away the next time those\n    // packages are (re)installed.\n    const result = optimisticReadJsonOrNull(portableFile);\n    if (result) {\n      return result;\n    }\n  } else {\n    // Clean up any .meteor-portable files we mistakenly wrote in\n    // directories that do not contain package.json files. #7296\n    fs.unlink(portableFile, error => {});\n  }\n\n  const result = optimisticReaddir(dir).every(\n    // Ignore files that start with a \".\", such as .bin directories.\n    itemName => itemName.startsWith(\".\") ||\n      isPortable(files.pathJoin(dir, itemName)));\n\n  if (canCache) {\n    // Write the .meteor-portable file asynchronously, and don't worry\n    // if it fails, e.g. because the file system is read-only (#6591).\n    // Failing to write the file only means more work next time.\n    fs.writeFile(\n      portableFile,\n      JSON.stringify(result) + \"\\n\",\n      error => {},\n    );\n  }\n\n  return result;\n});\n\n// Return true if all of a package's npm dependencies are portable\n// (that is, if the node_modules can be copied anywhere and we'd\n// expect it to work, rather than containing native extensions that\n// were built just for our architecture), else\n// false. updateDependencies should first be used to bring\n// nodeModulesDir up to date.\nmeteorNpm.dependenciesArePortable = function (nodeModulesDir) {\n  // We use a simple heuristic: we check to see if a package (or any\n  // of its transitive dependencies) contains any *.node files. .node\n  // is the extension that signals to Node that it should load a file\n  // as a shared object rather than as JavaScript, so this should work\n  // in the vast majority of cases.\n\n  assert.ok(\n    files.pathBasename(nodeModulesDir).startsWith(\"node_modules\"),\n    \"Bad node_modules directory: \" + nodeModulesDir,\n  );\n\n  // Only check/write .meteor-portable files in each of the top-level\n  // package directories.\n  return isPortable(nodeModulesDir);\n};\n\nvar makeNewPackageNpmDir = function (newPackageNpmDir) {\n  // keep track so that we can remove them on process exit\n  tmpDirs.push(newPackageNpmDir);\n  files.mkdir_p(newPackageNpmDir);\n\n  // create node_modules -- prevent npm install from installing\n  // to an existing node_modules dir higher up in the filesystem\n  files.mkdir(files.pathJoin(newPackageNpmDir, 'node_modules'));\n\n  // create .gitignore -- node_modules shouldn't be in git since we\n  // recreate it as needed by using `npm install`. since we use `npm\n  // shrinkwrap` we're guaranteed to have the same version installed\n  // each time.\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, '.gitignore'),\n    ['node_modules',\n     ''/*git diff complains without trailing newline*/].join('\\n'));\n};\n\nvar updateExistingNpmDirectory = function (packageName, newPackageNpmDir,\n                                           packageNpmDir, npmDependencies,\n                                           quiet) {\n  // sanity check on contents of .npm directory\n  if (!files.stat(packageNpmDir).isDirectory()) {\n    throw new Error(\"Corrupted .npm directory -- should be a directory: \" +\n                    packageNpmDir);\n  }\n  if (!files.exists(files.pathJoin(packageNpmDir, 'npm-shrinkwrap.json'))) {\n    throw new Error(\n      \"Corrupted .npm directory -- can't find npm-shrinkwrap.json in \" +\n        packageNpmDir);\n  }\n\n  // We need to rebuild all node modules when the Node version\n  // changes, in case there are some binary ones. Technically this is\n  // racey, but it shouldn't fail very often.\n  var nodeModulesDir = files.pathJoin(packageNpmDir, 'node_modules');\n  if (files.exists(nodeModulesDir)) {\n    var oldNodeVersion;\n    try {\n      oldNodeVersion = files.readFile(\n        files.pathJoin(packageNpmDir, 'node_modules', '.node_version'), 'utf8');\n    } catch (e) {\n      if (e.code !== 'ENOENT') {\n        throw e;\n      }\n      // Use the Node version from the last release where we didn't\n      // drop this file.\n      oldNodeVersion = 'v0.8.24';\n    }\n\n    if (oldNodeVersion !== currentNodeCompatibilityVersion()) {\n      files.rm_recursive(nodeModulesDir);\n    }\n  }\n\n  // Make sure node_modules is present (fix for #1761). Prevents npm install\n  // from installing to an existing node_modules dir higher up in the\n  // filesystem.  node_modules may be absent due to a change in Node version or\n  // when `meteor add`ing a cloned package for the first time (node_modules is\n  // excluded by .gitignore)\n  if (! files.exists(nodeModulesDir)) {\n    files.mkdir(nodeModulesDir);\n  }\n\n  var installedDependenciesTree = getInstalledDependenciesTree(packageNpmDir);\n  var shrinkwrappedDependenciesTree =\n    getShrinkwrappedDependenciesTree(packageNpmDir);\n\n  const npmTree = { dependencies: {} };\n  _.each(npmDependencies, (version, name) => {\n    npmTree.dependencies[name] = { version };\n  });\n\n  const minInstalledTree =\n    minimizeDependencyTree(installedDependenciesTree);\n  const minShrinkwrapTree =\n    minimizeDependencyTree(shrinkwrappedDependenciesTree);\n\n  if (isSubtreeOf(npmTree, minInstalledTree) &&\n      isSubtreeOf(minShrinkwrapTree, minInstalledTree)) {\n    return;\n  }\n\n  if (! quiet) {\n    logUpdateDependencies(packageName, npmDependencies);\n  }\n\n  let preservedShrinkwrap;\n\n  if (_.isEmpty(npmDependencies)) {\n    // If there are no npmDependencies, make sure nothing is installed.\n    preservedShrinkwrap = { dependencies: {} };\n  } else if (isSubtreeOf(npmTree, minShrinkwrapTree)) {\n    // If the top-level npm dependencies are already encompassed by the\n    // npm-shrinkwrap.json file, then reuse that file.\n    preservedShrinkwrap = shrinkwrappedDependenciesTree;\n  } else {\n    // Otherwise install only the required npm packages and their\n    // dependencies.\n    preservedShrinkwrap = npmTree;\n  }\n\n  makeNewPackageNpmDir(newPackageNpmDir);\n\n  if (!_.isEmpty(preservedShrinkwrap.dependencies)) {\n    const newShrinkwrapFile = files.pathJoin(\n      newPackageNpmDir,\n      'npm-shrinkwrap.json'\n    );\n\n    // There are some unchanged packages here. Install from shrinkwrap.\n    files.writeFile(\n      newShrinkwrapFile,\n      JSON.stringify(preservedShrinkwrap, null, 2)\n    );\n\n    // `npm install`\n    installFromShrinkwrap(newPackageNpmDir);\n\n    files.unlink(newShrinkwrapFile);\n  }\n\n  completeNpmDirectory(packageName, newPackageNpmDir, packageNpmDir,\n                       npmDependencies);\n};\n\nfunction isSubtreeOf(subsetTree, supersetTree, predicate) {\n  if (subsetTree === supersetTree) {\n    return true;\n  }\n\n  if (_.isObject(subsetTree)) {\n    return _.isObject(supersetTree) &&\n      _.every(subsetTree, (value, key) => {\n        return isSubtreeOf(value, supersetTree[key], predicate);\n      });\n  }\n\n  if (_.isFunction(predicate)) {\n    const result = predicate(subsetTree, supersetTree);\n    if (typeof result === \"boolean\") {\n      return result;\n    }\n  }\n\n  return false;\n}\n\nvar createFreshNpmDirectory = function (packageName, newPackageNpmDir,\n                                        packageNpmDir, npmDependencies, quiet) {\n  if (! quiet) {\n    logUpdateDependencies(packageName, npmDependencies);\n  }\n\n  makeNewPackageNpmDir(newPackageNpmDir);\n  // install dependencies\n  _.each(npmDependencies, function (version, name) {\n    installNpmModule(name, version, newPackageNpmDir);\n  });\n\n  completeNpmDirectory(packageName, newPackageNpmDir, packageNpmDir,\n                       npmDependencies);\n};\n\n// Shared code for updateExistingNpmDirectory and createFreshNpmDirectory.\nfunction completeNpmDirectory(\n  packageName,\n  newPackageNpmDir,\n  packageNpmDir,\n  npmDependencies,\n) {\n  // Create a shrinkwrap file.\n  shrinkwrap(newPackageNpmDir);\n\n  // And stow a copy of npm-shrinkwrap too.\n  files.copyFile(\n    files.pathJoin(newPackageNpmDir, 'npm-shrinkwrap.json'),\n    files.pathJoin(newPackageNpmDir, 'node_modules', '.npm-shrinkwrap.json')\n  );\n\n  createReadme(newPackageNpmDir);\n  createNodeVersion(newPackageNpmDir);\n  files.renameDirAlmostAtomically(newPackageNpmDir, packageNpmDir);\n\n  dirtyNodeModulesDirectory(files.pathJoin(packageNpmDir, \"node_modules\"));\n}\n\nvar createReadme = function (newPackageNpmDir) {\n  // This file gets checked in to version control by users, so resist the\n  // temptation to make unnecessary tweaks to it.\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, 'README'),\n\"This directory and the files immediately inside it are automatically generated\\n\" +\n\"when you change this package's NPM dependencies. Commit the files in this\\n\" +\n\"directory (npm-shrinkwrap.json, .gitignore, and this README) to source control\\n\" +\n\"so that others run the same versions of sub-dependencies.\\n\" +\n\"\\n\" +\n\"You should NOT check in the node_modules directory that Meteor automatically\\n\" +\n\"creates; if you are using git, the .gitignore file tells git to ignore it.\\n\"\n  );\n};\n\nvar createNodeVersion = function (newPackageNpmDir) {\n  files.writeFile(\n    files.pathJoin(newPackageNpmDir, 'node_modules', '.node_version'),\n    currentNodeCompatibilityVersion());\n};\n\n// This value should change whenever we think that the Node C ABI has changed\n// (ie, when we need to be sure to reinstall npm packages because they might\n// have native components that need to be rebuilt). It does not need to change\n// for every patch release of Node! Notably, it needed to change between 0.8.*\n// and 0.10.*.  If Node does make a patch release of 0.10 that breaks\n// compatibility, you can just change this from \"0.10.*\" to \"0.10.35\" or\n// whatever.\nvar currentNodeCompatibilityVersion = function () {\n  var version = process.version;\n  version = version.replace(/\\.(\\d+)$/, '.*');\n  return version + '\\n';\n};\n\nconst npmUserConfigFile = files.pathJoin(\n  __dirname,\n  \"meteor-npm-userconfig\"\n);\n\nvar runNpmCommand = meteorNpm.runNpmCommand =\nProfile(\"meteorNpm.runNpmCommand\", function (args, cwd) {\n  import { getEnv } from \"../cli/dev-bundle-bin-helpers.js\";\n\n  const devBundleDir = files.getDevBundle();\n  const isWindows = process.platform === \"win32\";\n  const npmPath = files.convertToOSPath(files.pathJoin(\n    devBundleDir, \"bin\",\n    isWindows ? \"npm.cmd\" : \"npm\"\n  ));\n\n  if (meteorNpm._printNpmCalls) {\n    // only used by test-bundler.js\n    process.stdout.write('cd ' + cwd + ' && ' + npmPath + ' ' +\n                         args.join(' ') + ' ...\\n');\n  }\n\n  return getEnv({\n    devBundle: devBundleDir\n  }).then(env => {\n    const opts = {\n      env: env,\n      maxBuffer: 10 * 1024 * 1024\n    };\n\n    if (cwd) {\n      opts.cwd = files.convertToOSPath(cwd);\n    }\n\n    // Make sure we don't honor any user-provided configuration files.\n    env.npm_config_userconfig = npmUserConfigFile;\n\n    return new Promise(function (resolve) {\n      require('child_process').execFile(\n        npmPath, args, opts, function (err, stdout, stderr) {\n          if (meteorNpm._printNpmCalls) {\n            process.stdout.write(err ? 'failed\\n' : 'done\\n');\n          }\n\n          resolve({\n            success: ! err,\n            error: (err ? `${err.message}${stderr}` : stderr),\n            stdout: stdout,\n            stderr: stderr\n          });\n        }\n      );\n    }).await();\n\n  }).await();\n});\n\n// Gets a JSON object from `npm ls --json` (getInstalledDependenciesTree) or\n// `npm-shrinkwrap.json` (getShrinkwrappedDependenciesTree).\n//\n// @returns {Object} eg {\n//   \"name\": \"packages\",\n//   \"version\": \"0.0.0\",\n//   \"dependencies\": {\n//     \"sockjs\": {\n//       \"version\": \"0.3.4\",\n//       \"dependencies\": {\n//         \"node-uuid\": {\n//           \"version\": \"1.3.3\"\n//         }\n//       }\n//     }\n//   }\n// }\nfunction getInstalledDependenciesTree(dir) {\n  function ls(nodeModulesDir) {\n    let contents;\n    try {\n      contents = files.readdir(nodeModulesDir).sort();\n    } finally {\n      if (! contents) return;\n    }\n\n    const result = {};\n\n    contents.forEach(item => {\n      if (item.startsWith(\".\")) {\n        return;\n      }\n\n      const pkgDir = files.pathJoin(nodeModulesDir, item);\n      const pkgJsonPath = files.pathJoin(pkgDir, \"package.json\");\n\n      let pkg;\n      try {\n        pkg = JSON.parse(files.readFile(pkgJsonPath));\n      } finally {\n        if (! pkg) return;\n      }\n\n      const info = result[item] = {\n        version: pkg.version\n      };\n\n      const resolved = pkg._resolved || pkg.resolved;\n      if (resolved) {\n        info.resolved = resolved;\n      }\n\n      const from = pkg._from || pkg.from;\n      if (from) {\n        info.from = from;\n      }\n\n      const deps = ls(files.pathJoin(pkgDir, \"node_modules\"));\n      if (deps && ! _.isEmpty(deps)) {\n        info.dependencies = deps;\n      }\n    });\n\n    return result;\n  }\n\n  return {\n    dependencies: ls(files.pathJoin(dir, \"node_modules\"))\n  };\n}\n\nvar getShrinkwrappedDependenciesTree = function (dir) {\n  var shrinkwrapFile = files.readFile(files.pathJoin(dir, 'npm-shrinkwrap.json'));\n  return JSON.parse(shrinkwrapFile);\n};\n\n// Maps a \"dependency object\" (a thing you find in `npm ls --json` or\n// npm-shrinkwrap.json with keys like \"version\" and \"from\") to the\n// canonical version that matches what users put in the `Npm.depends`\n// clause.  ie, either the version or the tarball URL.\n//\n// If more logic is added here, it should probably go in minimizeModule too.\nvar canonicalVersion = function (depObj) {\n  if (utils.isNpmUrl(depObj.from)) {\n    return depObj.from;\n  } else {\n    return depObj.version;\n  }\n};\n\n// map the structure returned from `npm ls` or shrinkwrap.json into\n// the structure of npmDependencies (e.g. {gcd: '0.0.0'}), so that\n// they can be diffed. This only returns top-level dependencies.\nvar treeToDependencies = function (tree) {\n  return _.object(\n    _.map(\n      tree.dependencies, function (properties, name) {\n        return [name, canonicalVersion(properties)];\n      }));\n};\n\nvar getInstalledDependencies = function (dir) {\n  return treeToDependencies(getInstalledDependenciesTree(dir));\n};\n\n// (appears to not be called)\nvar getShrinkwrappedDependencies = function (dir) {\n  return treeToDependencies(getShrinkwrappedDependenciesTree(dir));\n};\n\nvar installNpmModule = function (name, version, dir) {\n\n  var installArg = utils.isNpmUrl(version)\n    ? version : (name + \"@\" + version);\n\n  // We don't use npm.commands.install since we couldn't figure out\n  // how to silence all output (specifically the installed tree which\n  // is printed out with `console.log`)\n  //\n  // We used to use --force here, because the NPM cache is broken! See\n  // https://github.com/npm/npm/issues/3265 Basically, switching\n  // back and forth between a tarball fork of version X and the real\n  // version X could confuse NPM. But the main reason to use tarball\n  // URLs is to get a fork of the latest version with some fix, so\n  // it was easy to trigger this!\n  //\n  // We now use a forked version of npm with our PR\n  // https://github.com/npm/npm/pull/5137 to work around this.\n  var result = runNpmCommand([\"install\", installArg], dir);\n\n  if (! result.success) {\n    var pkgNotFound = \"404 '\" + utils.quotemeta(name) +\n          \"' is not in the npm registry\";\n    var versionNotFound = \"version not found: \" + utils.quotemeta(name) +\n          '@' + utils.quotemeta(version);\n    if (result.stderr.match(new RegExp(pkgNotFound))) {\n      buildmessage.error(\"there is no npm package named '\" + name + \"'\");\n    } else if (result.stderr.match(new RegExp(versionNotFound))) {\n      buildmessage.error(name + \" version \" + version + \" \" +\n                         \"is not available in the npm registry\");\n    } else {\n      buildmessage.error(`couldn't install npm package ${name}@${version}: ${result.error}`);\n    }\n\n    // Recover by returning false from updateDependencies\n    throw new NpmFailure;\n  }\n\n  const pkgDir = files.pathJoin(dir, \"node_modules\", name);\n  if (! isPortable(pkgDir)) {\n    recordLastRebuildVersions(pkgDir);\n  }\n\n  if (process.platform !== \"win32\") {\n    // If we are on a unixy file system, we should not build a package that\n    // can't be used on Windows.\n\n    var pathsWithColons = files.findPathsWithRegex(\".\", new RegExp(\":\"),\n      { cwd: files.pathJoin(dir, \"node_modules\") });\n\n    if (pathsWithColons.length) {\n      var firstTen = pathsWithColons.slice(0, 10);\n      if (pathsWithColons.length > 10) {\n        firstTen.push(\"... \" + (pathsWithColons.length - 10) +\n          \" paths omitted.\");\n      }\n\n      buildmessage.error(\n\"Some filenames in your package have invalid characters.\\n\" +\n\"The following file paths in the NPM module '\" + name + \"' have colons, ':', which won't work on Windows:\\n\" +\nfirstTen.join(\"\\n\"));\n\n      throw new NpmFailure;\n    }\n  }\n};\n\nvar installFromShrinkwrap = function (dir) {\n  if (! files.exists(files.pathJoin(dir, \"npm-shrinkwrap.json\"))) {\n    throw new Error(\n      \"Can't call `npm install` without a npm-shrinkwrap.json file present\");\n  }\n\n  const tempPkgJsonPath = files.pathJoin(dir, \"package.json\");\n  const pkgJsonExisted = files.exists(tempPkgJsonPath);\n  if (! pkgJsonExisted) {\n    // Writing an empty package.json file prevents ENOENT warnings about\n    // package.json not existing, which are noisy at best and sometimes\n    // seem to interfere with the install.\n    files.writeFile(tempPkgJsonPath, \"{}\\n\", \"utf8\");\n  }\n\n  // `npm install`, which reads npm-shrinkwrap.json.\n  var result = runNpmCommand([\"install\"], dir);\n\n  if (! pkgJsonExisted) {\n    files.rm_recursive(tempPkgJsonPath);\n  }\n\n  if (! result.success) {\n    buildmessage.error(`couldn't install npm packages from npm-shrinkwrap: ${result.error}`);\n    // Recover by returning false from updateDependencies\n    throw new NpmFailure;\n  }\n\n  const nodeModulesDir = files.pathJoin(dir, \"node_modules\");\n  files.readdir(nodeModulesDir).forEach(function (name) {\n    const pkgDir = files.pathJoin(nodeModulesDir, name);\n    if (! isPortable(pkgDir, true)) {\n      recordLastRebuildVersions(pkgDir);\n    }\n  });\n};\n\n// `npm shrinkwrap`\nfunction shrinkwrap(dir) {\n  const tree = getInstalledDependenciesTree(dir);\n\n  files.writeFile(\n    files.pathJoin(dir, \"npm-shrinkwrap.json\"),\n    JSON.stringify(tree, null, 2) + \"\\n\"\n  );\n\n  return tree;\n}\n\n// Reduces a dependency tree (as read from a just-made npm-shrinkwrap.json or\n// from npm ls --json) to just the versions we want. Returns an object that does\n// not share state with its input\nvar minimizeDependencyTree = function (tree) {\n  var minimizeModule = function (module) {\n    var version;\n    if (module.resolved &&\n        !module.resolved.match(/^https?:\\/\\/registry.npmjs.org\\//)) {\n      version = module.resolved;\n    } else if (utils.isNpmUrl(module.from)) {\n      version = module.from;\n    } else {\n      version = module.version;\n    }\n    var minimized = {version: version};\n\n    if (module.dependencies) {\n      minimized.dependencies = {};\n      _.each(module.dependencies, function (subModule, name) {\n        minimized.dependencies[name] = minimizeModule(subModule);\n      });\n    }\n    return minimized;\n  };\n\n  var newTopLevelDependencies = {};\n  _.each(tree.dependencies, function (module, name) {\n    newTopLevelDependencies[name] = minimizeModule(module);\n  });\n  return {dependencies: newTopLevelDependencies};\n};\n\nvar logUpdateDependencies = function (packageName, npmDependencies) {\n  runLog.log(packageName + ': updating npm dependencies -- ' +\n             _.keys(npmDependencies).join(', ') + '...');\n};\n"]}