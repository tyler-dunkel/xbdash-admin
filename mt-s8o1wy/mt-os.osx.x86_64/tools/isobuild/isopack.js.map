{"version":3,"sources":["/tools/isobuild/isopack.js"],"names":["assert","require","compiler","archinfo","_","linker","buildmessage","Builder","bundler","watch","files","isopackets","colonConverter","utils","buildPluginModule","Console","Profile","rejectBadPath","p","match","Error","nextBuildId","Unibuild","isopack","options","self","pkg","kind","arch","uses","implies","watchSet","WatchSet","id","name","declaredExports","resources","nodeModulesDirectories","some","nmd","nodeModulesPath","local","Isopack","metadata","version","isTest","debugOnly","prodOnly","testOnly","unibuilds","plugins","cordovaDependencies","isobuildFeatures","pluginWatchSet","_pluginsInitialized","sourceProcessors","linter","minifier","includeTool","toolsOnDisk","pluginProviderPackageMap","pluginCacheDir","lintingMessages","knownFormats","convertOneStepForward","data","fromFormat","convertedData","clone","builds","convertOneStepBackward","format","convertIsopackFormat","toFormat","fromPos","indexOf","toPos","step","readMetadataFromDirectory","isopackDirectory","originalVersion","isopackJsonPath","pathJoin","unipackageJsonPath","exists","isopackJson","JSON","parse","readFile","exports","OldIsopackFormatError","stringify","extend","prototype","initEmpty","initFromOptions","npmDiscards","addUnibuild","push","setPluginProviderPackageMap","getSourceFilesUnderSourceRoot","sourceRoot","sourceFiles","anySourceFiles","addSourceFilesFromWatchSet","each","hash","filename","relativePath","pathRelative","substr","pathSep","u","keys","architectures","archSet","unibuild","_toolArchitectures","plugin","plug","arches","sort","any","a","without","buildArchitectures","join","platformSpecific","tarballName","convert","toolArches","pluck","host","uniq","getUnibuildAtArch","chosenArch","mostSpecificMatch","error","secondary","findWhere","_checkPluginsInitialized","ensurePluginsInitialized","assertInJob","SourceProcessorSet","displayName","hardcodeJs","singlePackage","allowConflicts","pluginsByArch","enterJob","title","Plugin","_makePluginApi","load","sourceProcessorSet","allSourceProcessors","sourceProcessor","instantiatePlugin","registerSourceHandler","extension","handler","addLegacyHandler","packageDisplayName","isTemplate","archMatching","_registerSourceProcessor","factory","extensions","filenames","methodName","featurePackage","featureEnabled","hasExtensions","Array","length","hasFilenames","useMyCaller","e","endsWith","f","sp","SourceProcessor","factoryFunction","addSourceProcessor","registerCompiler","registerLinter","registerMinifier","badUsedExtension","find","ext","contains","undefined","nudge","convertToOSPath","convertToStandardPath","path","normalize","pathNormalize","relative","resolve","pathResolve","dirname","pathDirname","basename","pathBasename","extname","pathExtname","sep","fs","fsFixPath","initFromPath","dir","firstIsopack","_loadUnibuildsFromPath","realpath","mainJson","has","unibuildWatchSets","isopackBuildInfoJson","unibuildDependencies","watchSetJSON","unibuildTag","fromJSON","pluginDependencies","summary","pluginMeta","readJsImage","pluginsBuilt","unibuildMeta","alreadyHaveUnibuild","unibuildJson","unibuildBasePath","unibuildHasPrelink","resource","file","readBufferWithLengthAndOffset","offset","type","prelinkResource","servePath","sha1","usesDefaultSourceProcessor","legacyPrelink","packageVariables","sourceMap","fileOptions","pv","forEach","use","weak","isIsobuildFeaturePackage","rebuildBinaries","matches","NodeModulesDirectory","readDirsFromJSON","node_modules","packageName","tools","toolMeta","rootDir","hasCordovaUnibuild","canWriteLegacyBuilds","isResourceSafeForLegacyBuilds","every","saveToPath","outputDir","includePreCompilerPluginIsopackVersions","includeIsopackBuildInfo","isopackCache","outputPath","builder","unibuildInfos","toolsJson","mainLegacyJson","isEmpty","writeLegacyBuilds","builtBy","BUILT_BY","toJSON","includeCordovaUnibuild","reserve","npmDirsToCopy","Object","create","write","Buffer","baseUnibuildName","unibuildDir","generateFilename","directory","unibuildJsonFile","jsResourcesForLegacyPrelink","bundlePath","sourcePath","getPreferredBundlePath","preferredPaths","map","constraint","unordered","usesModules","concat","head","body","lazy","parts","generatedFilename","writeToGeneratedFilename","_getServePath","bare","writeJson","copyDirectory","from","to","symlink","pluginDir","pluginBuild","enter","pluginEntry","controlFile","_writeTool","unibuildInfo","legacyFilename","legacyDir","newResources","prelinkFile","prelinkData","packageVariableNames","symbol","results","prelink","inputFiles","combinedServePath","source","assignedVariables","acceptedByBuffer","isString","isNumber","isArray","complete","abort","pathsToCopy","runGitInCheckout","filter","split","transpileRegexes","pathsToTranspile","pathsToCopyStraight","shouldTranspile","regex","toolPath","babel","fullPath","getCurrentToolsDir","inputFileContents","replace","babelOptions","getDefaultOptions","sourceFileName","sourceMapTarget","transpiled","compile","sourceMapUrlComment","code","gitSha","specificFiles","devBundleIgnore","ignoreFiles","getDevBundle","ignore","isopacketBuildContext","makeIsopacketBuildContext","messages","capture","ISOPACKETS","packages","isopacketName","buildLocalPackages","jobHasMessages","image","buildJsImage","packageMap","hasMessages","formatMessages","getMergedWatchSet","merge","getClientWatchSet","test","getServerWatchSet","getStrongOrderedUsedAndImpliedPackages","processUse","featurePackageName","pathInPackage","serveRoot","toString"],"mappings":"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","file":"tools/isobuild/isopack.js.map","sourcesContent":["var assert = require('assert');\nvar compiler = require('./compiler.js');\nvar archinfo = require('../utils/archinfo.js');\nvar _ = require('underscore');\nvar linker = require('./linker.js');\nvar buildmessage = require('../utils/buildmessage.js');\nimport Builder from './builder.js';\nvar bundler = require('./bundler.js');\nvar watch = require('../fs/watch.js');\nvar files = require('../fs/files.js');\nvar isopackets = require('../tool-env/isopackets.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar utils = require('../utils/utils.js');\nvar buildPluginModule = require('./build-plugin.js');\nvar Console = require('../console/console.js').Console;\nvar Profile = require('../tool-env/profile.js').Profile;\n\nvar rejectBadPath = function (p) {\n  if (p.match(/\\.\\./)) {\n    throw new Error(\"bad path: \" + p);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// Unibuild\n///////////////////////////////////////////////////////////////////////////////\n\n// Options:\n// - kind [required] (main/plugin/app)\n// - arch [required]\n// - uses\n// - implies\n// - watchSet\n// - nodeModulesDirectories\n// - declaredExports\n// - resources\n\nvar nextBuildId = 1;\nvar Unibuild = function (isopack, options) {\n  var self = this;\n  options = options || {};\n  self.pkg = isopack;\n\n  self.kind = options.kind;\n  self.arch = options.arch;\n\n  self.uses = options.uses;\n  self.implies = options.implies || [];\n\n  // This WatchSet will end up having the watch items from the\n  // SourceArch (such as package.js or .meteor/packages), plus all of\n  // the actual source files for the unibuild (including items that we\n  // looked at to find the source files, such as directories we\n  // scanned).\n  self.watchSet = options.watchSet || new watch.WatchSet();\n\n  // Each Unibuild is given a unique id when it's loaded (it is\n  // not saved to disk). This is just a convenience to make it easier\n  // to keep track of Unibuilds in a map; it's used by bundler\n  // and compiler. We put some human readable info in here too to make\n  // debugging easier.\n  self.id = self.pkg.name + \".\" + self.kind + \"@\" + self.arch + \"#\" +\n    (nextBuildId ++);\n\n  // 'declaredExports' are the variables which are exported from this package.\n  // A list of objects with keys 'name' (required) and 'testOnly' (boolean,\n  // defaults to false).\n  self.declaredExports = options.declaredExports;\n\n  // All of the data provided for eventual inclusion in the bundle,\n  // other than JavaScript that still needs to be fed through the\n  // final link stage. A list of objects with these keys:\n  //\n  // type: \"source\", \"head\", \"body\", \"asset\". (resources produced by\n  // legacy source handlers can also be \"js\" or \"css\".\n  //\n  // data: The contents of this resource, as a Buffer. For example,\n  // for \"head\", the data to insert in <head>; for \"js\", the\n  // JavaScript source code (which may be subject to further\n  // processing such as minification); for \"asset\", the contents of a\n  // static resource such as an image.\n  //\n  // servePath: The (absolute) path at which the resource would prefer\n  // to be served. Interpretation varies by type. For example, always\n  // honored for \"asset\", ignored for \"head\" and \"body\", sometimes\n  // honored for CSS but ignored if we are concatenating.\n  //\n  // sourceMap: Allowed only for \"js\". If present, a string.\n  //\n  // fileOptions: for \"source\", the options passed to `api.addFiles`.\n  // plugin-specific.\n  //\n  // extension: for \"source\", the file extension that this matched\n  // against at build time. null if matched against a specific filename.\n  self.resources = options.resources;\n\n  // Map from absolute paths of node_modules directories to\n  // NodeModulesDirectory objects.\n  self.nodeModulesDirectories = options.nodeModulesDirectories;\n\n  // Provided for backwards compatibility; please use\n  // unibuild.nodeModulesDirectories instead!\n  _.some(self.nodeModulesDirectories, (nmd, nodeModulesPath) => {\n    if (! nmd.local) {\n      self.nodeModulesPath = nodeModulesPath;\n      return true;\n    }\n  });\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// Isopack\n///////////////////////////////////////////////////////////////////////////////\n\n// Meteor has a packaging system called \"Isobuild\". Isobuild knows how to\n// compile the same JavaScript code-base to different architectures: browser,\n// node.js-like server environment (could be Rhino or other) or a webview in a\n// Cordova mobile app.\n//\n// Each package used by Isobuild forms an Isopack. Isopack is a package format\n// containing source code for each architecture it can be ran on.\n// Each separate part built for a separate architecture is called \"Unibuild\".\n//\n// There are multiple reasons why we can't call it just \"build\" and historically\n// the name \"Unibuild\" has been associated with parts of Isopacks. We also can't\n// call it \"Isobuild\" because this is the brand-name of the whole\n// build/packaging system.\nvar Isopack = function () {\n  var self = this;\n\n  // These have the same meaning as in PackageSource.\n  self.name = null;\n  self.metadata = {};\n  self.version = null;\n  self.isTest = false;\n  self.debugOnly = false;\n  self.prodOnly = false;\n  self.testOnly = false;\n\n  // Unibuilds, an array of class Unibuild.\n  self.unibuilds = [];\n\n  // Plugins in this package. Map from plugin name to {arch -> JsImage}.\n  // Plugins are package-supplied classes and functions that can change the\n  // build process: introduce a new source processor (compiler, minifier,\n  // linter)\n  self.plugins = {};\n\n  self.cordovaDependencies = {};\n\n  // isobuild:* pseudo-packages which this package depends on.\n  self.isobuildFeatures = [];\n\n  // -- Information for up-to-date checks --\n  // Data in this section is only set if the Isopack was directly created by\n  // compiler.compile or read from a package compiled by IsopackCache (with its\n  // isopack-buildinfo.json file). They are not set for Isopacks read from\n  // the tropohouse.\n\n  // XXX this is likely to change once we have build versions\n  //\n  // A WatchSet for the full transitive dependencies for all plugins in this\n  // package, as well as this package's package.js. If any of these dependencies\n  // change, our plugins need to be rebuilt... but also, any package that\n  // directly uses this package needs to be rebuilt in case the change to\n  // plugins affected compilation.\n  self.pluginWatchSet = new watch.WatchSet();\n\n  // -- Loaded plugin state --\n\n  // True if plugins have been initialized (if ensurePluginsInitialized has\n  // been called)\n  self._pluginsInitialized = false;\n\n  // The SourceProcessors registered by plugins defined by this package.  Each\n  // value is a SourceProcessorSet. sourceProcessors.compiler includes the\n  // legacy source handlers as well.\n  // Valid when self._pluginsInitialized is true.\n  self.sourceProcessors = {\n    compiler: null,\n    linter: null,\n    minifier: null\n  };\n\n  // See description in PackageSource. If this is set, then we include a copy of\n  // our own source, in addition to any other tools that were originally in the\n  // isopack.\n  self.includeTool = false;\n\n  // This is tools to copy from trees on disk. This is used by the\n  // isopack-merge code in tropohouse.\n  self.toolsOnDisk = [];\n\n  // A map of package dependencies that can provide a plugin for this isopack.\n  // In practice, it is every direct dependency and implied packages.\n  self.pluginProviderPackageMap = null;\n\n  // A directory on disk that plugins can use for caching. Should be created\n  // by the code that initializes the Isopack. If not provided, plugins don't\n  // get a disk cache.\n  self.pluginCacheDir = null;\n\n  // An in-memory only buildmessage.MessageSet object that is printed by the\n  // build tool when the app is linted. Is also printed when a package\n  // represented by Isopack is published.\n  self.lintingMessages = null;\n};\n\nIsopack.knownFormats = [\"unipackage-pre2\", \"isopack-1\", \"isopack-2\"];\n\n// These functions are designed to convert isopack metadata between\n// versions. They were designed to convert between unipackage-pre2 and\n// isopack-1. The differences between these formats are essentially syntactical,\n// not semantic, and occur entirely in the isopack.json file, not in the\n// individual unibuild json files. These functions are written assuming those\n// constraints, and were not actually useful in the isopack-1/isopack-2\n// transition,where most of the changes are in the unibuild level, and there's\n// actual semantic changes involved. So they are not actually used as much as\n// they were before.\nIsopack.convertOneStepForward = function (data, fromFormat) {\n  var convertedData = _.clone(data);\n  // XXX COMPAT WITH 0.9.3\n  if (fromFormat === \"unipackage-pre2\") {\n    convertedData.builds = convertedData.unibuilds;\n    delete convertedData.unibuilds;\n    return convertedData;\n  }\n  if (fromFormat === \"isopack-1\") {\n    // For now, there's no difference in this direction at the isopack level.\n    return convertedData;\n  }\n};\nIsopack.convertOneStepBackward = function (data, fromFormat) {\n  var convertedData = _.clone(data);\n  if (fromFormat === \"isopack-1\") {\n    convertedData.unibuilds = convertedData.builds;\n    convertedData.format = \"unipackage-pre2\";\n    delete convertedData.builds;\n    return convertedData;\n  }\n  if (fromFormat === \"isopack-2\") {\n    // The conversion from isopack-2 requires converting the nested\n    // unibuild data as well.  This shouldn't happen.\n    throw Error(\"Can't automatically convert backwards from isopack-2\");\n  }\n};\nIsopack.convertIsopackFormat = Profile(\n  \"Isopack.convertIsopackFormat\", function (data, fromFormat, toFormat) {\n  var fromPos = _.indexOf(Isopack.knownFormats, fromFormat);\n  var toPos = _.indexOf(Isopack.knownFormats, toFormat);\n  var step = fromPos < toPos ? 1 : -1;\n\n  if (fromPos === -1) {\n    throw new Error(\"Can't convert from unknown Isopack format: \" + fromFormat);\n  }\n  if (toPos === -1) {\n    throw new Error(\"Can't convert to unknown Isopack format: \" + toFormat);\n  }\n\n  while (fromPos !== toPos) {\n    if (step > 0) {\n      data = Isopack.convertOneStepForward(data, fromFormat);\n    } else {\n      data = Isopack.convertOneStepBackward(data, fromFormat);\n    }\n\n    fromPos += step;\n    fromFormat = Isopack.knownFormats[fromPos];\n  }\n\n  return data;\n});\n\n// Read the correct file from isopackDirectory and convert to current format\n// of the isopack metadata. Returns null if there is no package here.\nIsopack.readMetadataFromDirectory =\n  Profile(\"Isopack.readMetadataFromDirectory\", function (isopackDirectory) {\n  var metadata = null;\n  let originalVersion = null;\n\n  // deal with different versions of \"isopack.json\", backwards compatible\n  var isopackJsonPath = files.pathJoin(isopackDirectory, \"isopack.json\");\n  var unipackageJsonPath = files.pathJoin(isopackDirectory, \"unipackage.json\");\n\n  if (files.exists(isopackJsonPath)) {\n    var isopackJson = JSON.parse(files.readFile(isopackJsonPath));\n\n    if (isopackJson['isopack-2']) {\n      metadata = isopackJson['isopack-2'];\n      originalVersion = 'isopack-2';\n    } else if (isopackJson['isopack-1']) {\n      metadata = Isopack.convertIsopackFormat(\n        isopackJson['isopack-1'], 'isopack-1', 'isopack-2');\n      originalVersion = 'isopack-1';\n    } else {\n      // This file is from the future and no longer supports this version\n      throw new Error(\"Could not find isopack data supported any supported format (isopack-1 or isopack-2).\\n\" +\n        \"This isopack was likely built with a much newer version of Meteor.\");\n    }\n  } else if (files.exists(unipackageJsonPath)) {\n    // super old version with different file name\n    // XXX COMPAT WITH 0.9.3\n    if (files.exists(unipackageJsonPath)) {\n      metadata = JSON.parse(files.readFile(unipackageJsonPath));\n\n      metadata = Isopack.convertIsopackFormat(metadata,\n        \"unipackage-pre2\", \"isopack-2\");\n      originalVersion = 'unipackage-pre2';\n    }\n\n    if (metadata.format !== \"unipackage-pre2\") {\n      // We don't support pre-0.9.0 isopacks, but we do know enough to delete\n      // them if we find them in an isopack cache somehow (rather than crash).\n      if (metadata.format === \"unipackage-pre1\") {\n        throw new exports.OldIsopackFormatError();\n      }\n\n      throw new Error(\"Unsupported isopack format: \" +\n                      JSON.stringify(metadata.format));\n    }\n  }\n\n  return {metadata, originalVersion};\n});\n\n_.extend(Isopack.prototype, {\n  // Make a dummy (empty) package that contains nothing of interest.\n  // XXX used?\n  initEmpty: function (name) {\n    var self = this;\n    self.name = name;\n  },\n\n  // This is primarily intended to be used by the compiler. After\n  // calling this, call addUnibuild to add the unibuilds.\n  initFromOptions: function (options) {\n    var self = this;\n    self.name = options.name;\n    self.metadata = options.metadata;\n    self.version = options.version;\n    self.isTest = options.isTest;\n    self.plugins = options.plugins;\n    self.cordovaDependencies = options.cordovaDependencies;\n    self.pluginWatchSet = options.pluginWatchSet;\n    self.npmDiscards = options.npmDiscards;\n    self.includeTool = options.includeTool;\n    self.debugOnly = options.debugOnly;\n    self.prodOnly = options.prodOnly;\n    self.testOnly = options.testOnly;\n    self.pluginCacheDir = options.pluginCacheDir || null;\n    self.isobuildFeatures = options.isobuildFeatures;\n  },\n\n  // Programmatically add a unibuild to this Isopack. Should only be\n  // called as part of building up a new Isopack using\n  // initFromOptions. 'options' are the options to the Unibuild\n  // constructor.\n  addUnibuild: function (options) {\n    var self = this;\n    self.unibuilds.push(new Unibuild(self, options));\n  },\n\n  setPluginProviderPackageMap: function (pluginProviderPackageMap) {\n    var self = this;\n    self.pluginProviderPackageMap = pluginProviderPackageMap;\n  },\n\n  getSourceFilesUnderSourceRoot: Profile(\n    \"Isopack#getSourceFilesUnderSourceRoot\", function (sourceRoot) {\n    var self = this;\n    var sourceFiles = {};\n    var anySourceFiles = false;\n    var addSourceFilesFromWatchSet = function (watchSet) {\n      _.each(watchSet.files, function (hash, filename) {\n        if (! hash) {\n          // If a file has a falsy hash, that means the file does/should\n          // not exist.\n          return;\n        }\n\n        anySourceFiles = true;\n        var relativePath = files.pathRelative(sourceRoot, filename);\n        // We only want files that are actually under sourceRoot.\n        if (relativePath.substr(0, 3) === '..' + files.pathSep) {\n          return;\n        }\n        sourceFiles[relativePath] = true;\n      });\n    };\n    addSourceFilesFromWatchSet(self.pluginWatchSet);\n    _.each(self.unibuilds, function (u) {\n      addSourceFilesFromWatchSet(u.watchSet);\n    });\n\n    // Were we actually built from source or loaded from an IsopackCache? If so\n    // then there should be at least one source file in some WatchSet. If not,\n    // return null.\n    if (! anySourceFiles) {\n      return null;\n    }\n    return _.keys(sourceFiles);\n  }),\n\n  // An sorted array of all the architectures included in this package.\n  architectures: Profile(\"Isopack#architectures\", function () {\n    var self = this;\n    var archSet = {};\n    _.each(self.unibuilds, function (unibuild) {\n      archSet[unibuild.arch] = true;\n    });\n    _.each(self._toolArchitectures(), function (arch) {\n      archSet[arch] = true;\n    });\n    _.each(self.plugins, function (plugin, name) {\n      _.each(plugin, function (plug, arch) {\n        archSet[arch] = true;\n      });\n    });\n    var arches = _.keys(archSet).sort();\n    // Ensure that our buildArchitectures string does not look like\n    //    web+os+os.osx.x86_64\n    // This would happen if there is an 'os' unibuild but a platform-specific\n    // tool (eg, in meteor-tool).  This would confuse catalog.getBuildsForArches\n    // into thinking that it would work for Linux, since the 'os' means\n    // 'works on any Node server'.\n    if (_.any(arches, function (a) { return a.match(/^os\\./); })) {\n      arches = _.without(arches, 'os');\n    }\n    return arches;\n  }),\n\n  // A sorted plus-separated string of all the architectures included in this\n  // package.\n  buildArchitectures: function () {\n    var self = this;\n    return self.architectures().join('+');\n  },\n\n  // Returns true if we think that this isopack is platform specific (contains\n  // binary builds)\n  platformSpecific: function () {\n    var self = this;\n    return _.any(self.architectures(), function (arch) {\n      return arch.match(/^os\\./);\n    });\n  },\n\n  tarballName: function () {\n    var self = this;\n    return colonConverter.convert(self.name) + '-' + self.version;\n  },\n\n  _toolArchitectures: function () {\n    var self = this;\n    var toolArches = _.pluck(self.toolsOnDisk, 'arch');\n    self.includeTool && toolArches.push(archinfo.host());\n    return _.uniq(toolArches).sort();\n  },\n\n  // Return the unibuild of the package to use for a given target architecture\n  // (eg, 'os.linux.x86_64' or 'web'), or throw an exception if that\n  // packages can't be loaded under these circumstances.\n  getUnibuildAtArch: Profile(\"Isopack#getUnibuildAtArch\", function (arch) {\n    var self = this;\n\n    let chosenArch = archinfo.mostSpecificMatch(\n      arch, _.pluck(self.unibuilds, 'arch'));\n    if (! chosenArch && arch.match(/^os\\./)) {\n      // Special-case: we're looking for a specific server platform and\n      // it's not available. (eg, we're deploying from a Mac to Linux and\n      // are processing a local package with binary npm deps).  Search\n      // again for the host version, which might find the Mac version.\n      chosenArch =\n        archinfo.mostSpecificMatch(archinfo.host(), _.pluck(self.unibuilds, 'arch'));\n    }\n    if (! chosenArch) {\n      buildmessage.error(\n        (self.name || \"this app\") +\n          \" is not compatible with architecture '\" + arch + \"'\",\n        { secondary: true });\n      // recover by returning by no unibuilds\n      return null;\n    }\n    return _.findWhere(self.unibuilds, { arch: chosenArch });\n  }),\n\n  _checkPluginsInitialized: function () {\n    var self = this;\n    if (self._pluginsInitialized) {\n      return;\n    }\n    throw Error(\"plugins not yet initialized?\");\n  },\n\n  // If this package has plugins, initialize them (run the startup\n  // code in them so that they register their extensions). Idempotent.\n  ensurePluginsInitialized: Profile(\"Isopack#ensurePluginsInitialized\", function () {\n    var self = this;\n\n    buildmessage.assertInJob();\n\n    if (self._pluginsInitialized) {\n      return;\n    }\n\n    self.sourceProcessors.compiler = new buildPluginModule.SourceProcessorSet(\n      self.displayName(), { hardcodeJs: true, singlePackage: true });\n    self.sourceProcessors.linter = new buildPluginModule.SourceProcessorSet(\n      self.displayName(), { singlePackage: true, allowConflicts: true });\n    self.sourceProcessors.minifier = new buildPluginModule.SourceProcessorSet(\n      self.displayName(), { singlePackage: true });\n\n    _.each(self.plugins, function (pluginsByArch, name) {\n      var arch = archinfo.mostSpecificMatch(\n        archinfo.host(), _.keys(pluginsByArch));\n      if (! arch) {\n        buildmessage.error(\"package `\" + name + \"` is built for incompatible \" +\n                           \"architecture\");\n        // Recover by ignoring plugin\n        // XXX does this recovery work?\n        return;\n      }\n\n      var plugin = pluginsByArch[arch];\n      buildmessage.enterJob({\n        title: \"loading plugin `\" + name +\n          \"` from package `\" + self.name + \"`\"\n        // don't necessarily have rootPath anymore\n        // (XXX we do, if the isopack was locally built, which is\n        // the important case for debugging. it'd be nice to get this\n        // case right.)\n      }, function () {\n        // Make a new Plugin API object for this plugin.\n        var Plugin = self._makePluginApi();\n        plugin.load({ Plugin: Plugin, Profile: Profile });\n      });\n    });\n\n    // Instantiate each of the registered batch plugins.  Note that we don't\n    // do this directly in the registerCompiler (etc) call, because we want\n    // to allow people to do something like:\n    //   Plugin.registerCompiler({...}, function () { return new C; });\n    //   var C = function () {...}\n    // and so we want to wait for C to be defined.\n    _.each(self.sourceProcessors, (sourceProcessorSet) => {\n      _.each(sourceProcessorSet.allSourceProcessors, (sourceProcessor) => {\n        sourceProcessor.instantiatePlugin();\n      });\n    });\n\n    self._pluginsInitialized = true;\n  }),\n\n  _makePluginApi: function () {\n    var isopack = this;\n\n    /**\n     * @global\n     * @namespace Plugin\n     * @summary The namespace that is exposed inside build plugin files.\n     */\n    var Plugin = {\n      // 'extension' is a file extension without the separation dot\n      // (eg 'js', 'coffee', 'coffee.md')\n      //\n      // 'options' can be omitted. The only known option is 'isTemplate', which\n      // is a bit of a hack meaning \"in an app, these files should be loaded\n      // before non-templates\".\n      //\n      // 'handler' is a function that takes a single argument, a\n      // CompileStep (#CompileStep)\n\n      /**\n       * @summary Inside a build plugin source file specified in\n       * [Package.registerBuildPlugin](#Package-registerBuildPlugin),\n       * add a handler to compile files with a certain file extension.\n       * @param  {String} fileExtension The file extension that this plugin\n       * should handle, without the first dot.\n       * Examples: `\"coffee\"`, `\"coffee.md\"`.\n       * @param  {Function} handler  A function that takes one argument,\n       * a CompileStep object.\n       *\n       * Documentation for CompileStep is available [on the GitHub Wiki](https://github.com/meteor/meteor/wiki/CompileStep-API-for-Build-Plugin-Source-Handlers).\n       * @memberOf Plugin\n       * @locus Build Plugin\n       * @deprecated since 1.2\n       * XXX COMPAT WITH 1.1\n       */\n      registerSourceHandler: function (extension, options, handler) {\n        if (!handler) {\n          handler = options;\n          options = {};\n        }\n\n        // The popular package mquandalle:bower has a call to\n        // `registerSourceHandler('json', null)` for some reason, to\n        // work around some behavior of Meteor believed to be a bug. We\n        // think that new features of registerCompiler like being able\n        // to register for filenames will allow them to drop that line,\n        // but in the meantime we might as well not choke on it. (The\n        // old implementation coincidentally didn't choke.)\n        if (!handler) {\n          handler = function () {};\n        }\n\n        isopack.sourceProcessors.compiler.addLegacyHandler({\n          extension,\n          handler,\n          packageDisplayName: isopack.displayName(),\n          isTemplate: !!options.isTemplate,\n          archMatching: options.archMatching\n        });\n      },\n\n      _registerSourceProcessor: function (\n        {extensions, filenames, archMatching, isTemplate},\n        factory,\n        {sourceProcessorSet, methodName, featurePackage}) {\n        if (!isopack.featureEnabled(featurePackage)) {\n          // This error is OK because we only define 1.0.0 for each of these\n          // feature packages (in compiler.KNOWN_ISOBUILD_FEATURE_PACKAGES).\n          buildmessage.error(\n            `your package must \\`api.use('${ featurePackage }@1.0.0')\\` in ` +\n              `order for its plugins to call Plugin.${ methodName }`);\n          return;\n        }\n\n        const hasExtensions = (extensions &&\n                               extensions instanceof Array &&\n                               extensions.length > 0);\n        const hasFilenames = (filenames &&\n                              filenames instanceof Array &&\n                              filenames.length > 0);\n        if (! (hasExtensions || hasFilenames)) {\n          buildmessage.error(\"Plugin.\" + methodName + \" must specify a \" +\n                             \"non-empty array of extensions or filenames\",\n                             { useMyCaller: 3 });\n          // recover by ignoring\n          return;\n        }\n\n        // Don't let extensions or filenames try to look for directories (in the\n        // way that WatchSet expresses them).\n        if (extensions && extensions.some(e => e.endsWith('/'))) {\n          buildmessage.error(\n            `Plugin.${methodName}: extensions may not end in /`);\n          // recover by ignoring\n          return;\n        }\n        if (filenames && filenames.some(f => f.endsWith('/'))) {\n          buildmessage.error(\n            `Plugin.${methodName}: filenames may not end in /`);\n          // recover by ignoring\n          return;\n        }\n\n        if (typeof factory !== 'function') {\n          buildmessage.error(methodName + \" call must \"\n                             + \"specify a factory function\",\n                             { useMyCaller: 3 });\n          // recover by ignoring\n          return;\n        }\n\n        const sp = new buildPluginModule.SourceProcessor({\n          isopack: isopack,\n          extensions: extensions,\n          filenames: filenames,\n          archMatching: archMatching,\n          isTemplate: isTemplate,\n          factoryFunction: factory,\n          methodName: methodName\n        });\n        // This logs a buildmessage on conflicts.\n        sourceProcessorSet.addSourceProcessor(sp);\n      },\n\n      // Compilers are part of the Batch Plugins API.\n      //\n      // A compiler plugin is provided by packages to participate in\n      // the build process. A compiler can register file extensions and\n      // filenames it handles and the build tool will call the compiler's\n      // `processFilesForTarget` method once for each target (eg, the server\n      // or client program) with all of the files in the target.\n      //\n      // Compilers are run on application bundling (in bundle.js).\n      // This is different from the legacy registerSourceHandler API,\n      // which runs on a single file at a time when a *package* is built.\n      // Published Isopack packages contain the original sources of\n      // files handled by registerCompiler, not the generated output,\n      // so compilers can be involved in the very end, when the app is bundled\n      // (not in package publish time).  (Note that this requires a new\n      // Isopack format, 'isopack-2'; versions of packages published with new\n      // compilers cannot be used with previous releases of Meteor, but\n      // Version Solver knows this and will select an older compatible\n      // version if possible.\n      //\n      // Unlike the legacy API called \"source handlers\" (deprecated in\n      // Meteor 1.2), compiler plugins can handle all files for the target,\n      // making independent decisions about caching and dependencies resolution.\n      //\n      // The factory function must return an instance of a compiler.\n      //\n      // Note: It's important to ensure that all plugins that want to call\n      // plugin compiler use the isobuild:compiler-plugin fake package, so that\n      // Version Solver will not let you use registerCompiler plugins with old\n      // versions of the tool.\n\n      /**\n       * @summary Inside a build plugin source file specified in\n       * [Package.registerBuildPlugin](#Package-registerBuildPlugin),\n       * add a compiler that will handle files with certain extensions or\n       * filenames.\n       * @param {Object} options\n       * @param {String[]} options.extensions The file extensions that this\n       * plugin should handle, without the first dot.\n       * Examples: `[\"coffee\", \"coffee.md\"]`.\n       * @param {String[]} options.filenames The list of filenames\n       * that this plugin should handle. Examples: `[\"config.json\"]`.\n       * @param {Function} factory A function that returns an instance\n       * of a compiler class.\n       *\n       * More detailed documentation for build plugins is available [on the GitHub Wiki](https://github.com/meteor/meteor/wiki/Build-Plugins-API).\n       * @memberOf Plugin\n       * @locus Build Plugin\n       */\n      registerCompiler: function (options, factory) {\n        Plugin._registerSourceProcessor(options || {}, factory, {\n          sourceProcessorSet: isopack.sourceProcessors.compiler,\n          methodName: \"registerCompiler\",\n          featurePackage: \"isobuild:compiler-plugin\"\n        });\n      },\n\n      // Linters are part of the Batch Plugin API.\n      //\n      // A linter plugin provides a Linter instance. The linter is\n      // given a batch of source files for the target according to\n      // linter's declared file extensions and filenames (e.g.: '*.js',\n      // '.jshintrc').\n      //\n      // Linters don't output any files. They can only raise an error\n      // message on one of the source files to force the build tool to\n      // print a linting message.\n      //\n      // The factory function must return an instance of the linter.\n      // The linter must have the `processFilesForPackage` method that\n      // has two arguments:\n      // - inputFiles - LinterFile - sources instances\n      // - options - Object\n      //   - globals - a list of strings - global variables that can be\n      //     used in the target's scope as they are dependencies of the\n      //     package or the app. e.g.: \"Minimongo\" or \"Webapp\".\n      //\n      // Unlike compilers and minifiers, linters run on one package\n      // at a time.  Linters are run by `meteor run`, `meteor publish`,\n      // and `meteor lint`.\n\n      /**\n       * @summary Inside a build plugin source file specified in\n       * [Package.registerBuildPlugin](#Package-registerBuildPlugin),\n       * add a linter that will handle files with certain extensions or\n       * filenames.\n       * @param {Object} options\n       * @param {String[]} options.extensions The file extensions that this\n       * plugin should handle, without the first dot.\n       * Examples: `[\"js\", \"es6\", \"jsx\"]`.\n       * @param {Function} factory A function that returns an instance\n       * of a linter class.\n       *\n       * More detailed documentation for build plugins is available [on the GitHub Wiki](https://github.com/meteor/meteor/wiki/Build-Plugins-API).\n       * @memberOf Plugin\n       * @locus Build Plugin\n       */\n      registerLinter: function (options, factory) {\n        Plugin._registerSourceProcessor(options || {}, factory, {\n          sourceProcessorSet: isopack.sourceProcessors.linter,\n          methodName: \"registerLinter\",\n          featurePackage: \"isobuild:linter-plugin\"\n        });\n      },\n\n      // Minifiers are part of the Batch Plugin API.\n      //\n      // The minifiers are applied in the very end of the bundling\n      // process, after the linters and compilers. Unlike linters and\n      // compilers, minifiers are given the output of compilers and not\n      // the source files the application developer supplied.\n      //\n      // The minifier plugins can fill into 2 types of minifiers: CSS or JS.\n      // When the minifier is added to an app, it is used during \"bundling\" to\n      // compress the app code and each package's code separately.\n      // Only minifier packages directly used by an app (or implied by a package\n      // directly used by the app) are active: using a minifer's package in\n      // another package does nothing.\n      //\n      // So far, the minifiers are only run on client targets such as\n      // web.browser and web.cordova.\n      //\n      // The factory function must return an instance of a\n      // minifier. The method `processFilesForBundle` is passed a list of\n      // files, possibly a linked file per target (for JavaScript files).\n      //\n      // - files - processed files to minify\n      // - options - Object\n      //   - minifyMode - string - 'development' or 'production', based\n      //     on the bundling mode\n\n      /**\n       * @summary Inside a build plugin source file specified in\n       * [Package.registerBuildPlugin](#Package-registerBuildPlugin),\n       * add a linter that will handle files with certain extensions or\n       * filenames.\n       * @param {Object} options\n       * @param {String[]} options.extensions The file extensions that this\n       * plugin should handle, without the first dot. Can only be \"js\" or \"css\".\n       * Examples: `[\"js\", \"css\"]`.\n       * @param {String[]} options.filenames The list of filenames\n       * that this plugin should handle. Examples: `[\"config.json\"]`.\n       * @param {Function} factory A function that returns an instance\n       * of a minifier class.\n       *\n       * More detailed documentation for build plugins is available [on the GitHub Wiki](https://github.com/meteor/meteor/wiki/Build-Plugins-API).\n       * @memberOf Plugin\n       * @locus Build Plugin\n       */\n      registerMinifier: function (options, factory) {\n        var badUsedExtension = _.find(options.extensions, function (ext) {\n          return ! _.contains(['js', 'css'], ext);\n        });\n\n        if (badUsedExtension !== undefined) {\n          buildmessage.error(badUsedExtension + ': Minifiers are only allowed to register \"css\" or \"js\" extensions.');\n          return;\n        }\n\n        if (options.filenames) {\n          buildmessage.error(\"Plugin.registerMinifier does not accept `filenames`\");\n          return;\n        }\n\n        Plugin._registerSourceProcessor(options || {}, factory, {\n          sourceProcessorSet: isopack.sourceProcessors.minifier,\n          methodName: \"registerMinifier\",\n          featurePackage: \"isobuild:minifier-plugin\"\n        });\n      },\n\n      nudge: function () {\n        Console.nudge(true);\n      },\n\n      convertToOSPath: files.convertToOSPath,\n      convertToStandardPath: files.convertToStandardPath,\n      path: {\n        join: files.pathJoin,\n        normalize: files.pathNormalize,\n        relative: files.pathRelative,\n        resolve: files.pathResolve,\n        dirname: files.pathDirname,\n        basename: files.pathBasename,\n        extname: files.pathExtname,\n        sep: files.pathSep\n      },\n      fs: files.fsFixPath\n    };\n    return Plugin;\n  },\n\n  // Load a Isopack on disk.\n  //\n  // options:\n  // - isopackBuildInfoJson: parsed isopack-buildinfo.json object,\n  //   if loading from an IsopackCache.\n  initFromPath: Profile(\n    \"Isopack#initFromPath\", function (name, dir, options) {\n    var self = this;\n    options = _.clone(options || {});\n    options.firstIsopack = true;\n\n    if (options.pluginCacheDir) {\n      self.pluginCacheDir = options.pluginCacheDir;\n    }\n\n    return self._loadUnibuildsFromPath(name, dir, options);\n  }),\n\n  _loadUnibuildsFromPath: function (name, dir, options) {\n    var self = this;\n    options = options || {};\n\n    // In the tropohouse, isopack paths are symlinks (which can be updated if\n    // more unibuilds are merged in). For any given call to\n    // _loadUnibuildsFromPath, let's ensure we see a consistent isopack by\n    // realpath'ing dir.\n    dir = files.realpath(dir);\n\n    var {metadata: mainJson} = Isopack.readMetadataFromDirectory(dir);\n    if (! mainJson) {\n      throw new Error(\"No metadata files found for isopack at: \" + dir);\n    }\n\n    // isopacks didn't used to know their name, but they should.\n    if (_.has(mainJson, 'name') && name !== mainJson.name) {\n      throw new Error(\"isopack \" + name + \" thinks its name is \" +\n                      mainJson.name);\n    }\n\n    // If we're loading from an IsopackCache, we need to load the WatchSets\n    // which will be used by the bundler.  (builtBy is only used by\n    // IsopackCache._checkUpToDate. pluginProviderPackageMap will actually be\n    // set by IsopackCache afterwards, because it has access to an appropriate\n    // PackageMap which can be subset to create a new PackageMap object.)\n    var unibuildWatchSets = {};\n    if (options.isopackBuildInfoJson) {\n      if (! options.firstIsopack) {\n        throw Error(\"can't merge isopacks with buildinfo\");\n      }\n\n      // XXX should comprehensively sanitize (eg, typecheck) everything\n      // read from json files\n\n      // Read the watch sets for each unibuild\n      _.each(\n        options.isopackBuildInfoJson.unibuildDependencies,\n        function (watchSetJSON, unibuildTag) {\n          unibuildWatchSets[unibuildTag] =\n            watch.WatchSet.fromJSON(watchSetJSON);\n        });\n\n      // Read pluginWatchSet. (In the multi-sub-isopack case, these are\n      // guaranteed to be trivial (since we check that there's no\n      // isopackBuildInfoJson), so no need to merge.)\n      self.pluginWatchSet = watch.WatchSet.fromJSON(\n        options.isopackBuildInfoJson.pluginDependencies);\n    }\n\n    // If we are loading multiple isopacks, only take this stuff from the\n    // first one.\n    if (options.firstIsopack) {\n      self.name = name;\n      self.metadata = {\n        summary: mainJson.summary\n      };\n      self.version = mainJson.version;\n      self.isTest = mainJson.isTest;\n      self.debugOnly = !!mainJson.debugOnly;\n      self.prodOnly = !!mainJson.prodOnly;\n      self.testOnly = !!mainJson.testOnly;\n    }\n    _.each(mainJson.plugins, function (pluginMeta) {\n      rejectBadPath(pluginMeta.path);\n\n      var plugin = bundler.readJsImage(files.pathJoin(dir, pluginMeta.path));\n\n      if (!_.has(self.plugins, pluginMeta.name)) {\n        self.plugins[pluginMeta.name] = {};\n      }\n      // If we already loaded a plugin of this name/arch, just ignore this one.\n      if (!_.has(self.plugins[pluginMeta.name], plugin.arch)) {\n        self.plugins[pluginMeta.name][plugin.arch] = plugin;\n      }\n    });\n    self.pluginsBuilt = true;\n    _.each(mainJson.builds, function (unibuildMeta) {\n      // aggressively sanitize path (don't let it escape to parent\n      // directory)\n      rejectBadPath(unibuildMeta.path);\n\n      // Skip unibuilds we already have.\n      var alreadyHaveUnibuild = _.find(self.unibuilds, function (unibuild) {\n        return unibuild.arch === unibuildMeta.arch;\n      });\n      if (alreadyHaveUnibuild) {\n        return;\n      }\n\n      var unibuildJson = JSON.parse(\n        files.readFile(files.pathJoin(dir, unibuildMeta.path)));\n\n      var unibuildBasePath =\n        files.pathDirname(files.pathJoin(dir, unibuildMeta.path));\n\n      if (unibuildJson.format !== \"unipackage-unibuild-pre1\" &&\n          unibuildJson.format !== \"isopack-2-unibuild\") {\n        throw new Error(\"Unsupported isopack unibuild format: \" +\n                        JSON.stringify(unibuildJson.format));\n      }\n\n      // Is this unibuild the legacy pre-\"compiler plugin\" format which contains\n      // \"prelink\" resources of pre-processed JS files (as well as the\n      // \"packageVariables\" field) instead of individual \"source\" resources (and\n      // a \"declaredExports\" field)?\n      var unibuildHasPrelink =\n            unibuildJson.format === \"unipackage-unibuild-pre1\";\n\n      var resources = [];\n\n      _.each(unibuildJson.resources, function (resource) {\n        rejectBadPath(resource.file);\n        var data = files.readBufferWithLengthAndOffset(\n          files.pathJoin(unibuildBasePath, resource.file),\n          resource.length, resource.offset);\n\n        if (resource.type === \"prelink\") {\n          if (! unibuildHasPrelink) {\n            throw Error(\"Unexpected prelink resource in \" +\n                        unibuildJson.format + \" at \" + dir);\n          }\n          // We found a \"prelink\" resource, because we're processing a package\n          // published with an older version of Meteor which did not create\n          // isopack-2 isopacks and which always preprocessed and linked all JS\n          // files instead of leaving that until bundle time.  Let's pretend it\n          // was just a single js source file, but leave a \"legacyPrelink\" field\n          // on it so we can not re-link that part (and not re-analyze for\n          // assigned variables).\n          var prelinkResource = {\n            type: \"source\",\n            extension: \"js\",\n            data: data,\n            path: resource.servePath,\n            // It's a shame to have to calculate the hash here instead of having\n            // it on disk, but this only runs for legacy packages anyway.\n            hash: watch.sha1(data),\n            // Legacy prelink files definitely don't have a source processor!\n            // They were created by an Isobuild that didn't even know about\n            // source processors!\n            usesDefaultSourceProcessor: true,\n            legacyPrelink: {\n              packageVariables: unibuildJson.packageVariables || []\n            }\n          };\n          if (resource.sourceMap) {\n            rejectBadPath(resource.sourceMap);\n            prelinkResource.legacyPrelink.sourceMap = files.readFile(\n              files.pathJoin(unibuildBasePath, resource.sourceMap), 'utf8');\n          }\n          resources.push(prelinkResource);\n        } else if (resource.type === \"source\") {\n          resources.push({\n            type: \"source\",\n            extension: resource.extension,\n            usesDefaultSourceProcessor:\n              !! resource.usesDefaultSourceProcessor,\n            data: data,\n            path: resource.path,\n            hash: resource.hash,\n            fileOptions: resource.fileOptions\n          });\n        } else if (_.contains([\"head\", \"body\", \"css\", \"js\", \"asset\"],\n                              resource.type)) {\n          resources.push({\n            type: resource.type,\n            data: data,\n            servePath: resource.servePath || undefined,\n            path: resource.path || undefined\n          });\n        } else {\n          throw new Error(\"bad resource type in isopack: \" +\n                          JSON.stringify(resource.type));\n        }\n      });\n\n      var declaredExports;\n      if (unibuildHasPrelink) {\n        // Legacy unibuild; it stores packageVariables and says some of them\n        // are exports.\n        declaredExports = [];\n        _.each(unibuildJson.packageVariables, function (pv) {\n          if (pv.export) {\n            declaredExports.push({\n              name: pv.name,\n              testOnly: pv.export === 'tests'\n            });\n          }\n        });\n      } else {\n        declaredExports = unibuildJson.declaredExports || [];\n      }\n\n      unibuildJson.uses && unibuildJson.uses.forEach((use) => {\n        if (!use.weak && compiler.isIsobuildFeaturePackage(use.package) &&\n            self.isobuildFeatures.indexOf(use.package) === -1) {\n          self.isobuildFeatures.push(use.package);\n        }\n      });\n\n      // Rebuild binary npm packages if unibuild arch matches host arch.\n      const rebuildBinaries = archinfo.matches(\n        archinfo.host(),\n        unibuildMeta.arch\n      );\n\n      const nodeModulesDirectories = bundler.NodeModulesDirectory\n        .readDirsFromJSON(unibuildJson.node_modules, {\n          packageName: self.name,\n          sourceRoot: unibuildBasePath,\n          rebuildBinaries,\n        });\n\n      self.unibuilds.push(new Unibuild(self, {\n        // At some point we stopped writing 'kind's to the metadata file, so\n        // default to main.\n        kind: unibuildMeta.kind || 'main',\n        arch: unibuildMeta.arch,\n        uses: unibuildJson.uses,\n        implies: unibuildJson.implies,\n        watchSet: unibuildWatchSets[unibuildMeta.path],\n        nodeModulesDirectories,\n        declaredExports: declaredExports,\n        resources: resources\n      }));\n    });\n\n    self.cordovaDependencies = mainJson.cordovaDependencies || null;\n\n    _.each(mainJson.tools, function (toolMeta) {\n      toolMeta.rootDir = dir;\n      // XXX check for overlap\n      self.toolsOnDisk.push(toolMeta);\n    });\n\n    return true;\n  },\n\n  hasCordovaUnibuild: function () {\n    var self = this;\n    return _.any(self.unibuilds, function (unibuild) {\n      return unibuild.arch === 'web.cordova';\n    });\n  },\n\n  canWriteLegacyBuilds() {\n    function isResourceSafeForLegacyBuilds(resource) {\n      // The only new kind of resource is \"source\"; other resources are\n      // unchanged from legacy builds.\n      if (resource.type !== \"source\") {\n        return true;\n      }\n\n      // CSS is safe for legacy builds. (We assume everyone is using the\n      // SourceProcessor from the 'meteor' package.)\n      if (resource.extension === \"css\") {\n        return true;\n      }\n\n      // If this JS resource uses hard-coded support for plain old ES5, then it\n      // is safe to write as part of a legacy Isopack.\n      if (resource.extension === \"js\" && resource.usesDefaultSourceProcessor) {\n        return true;\n      }\n\n      // Nope, this package cannot be represented as an isopack-1 Isopack\n      // because it uses a file implemented by registerCompiler other than the\n      // very basic JS and CSS types.\n      return false;\n    }\n\n    return this.unibuilds.every(\n      unibuild => unibuild.resources.every(isResourceSafeForLegacyBuilds)\n    );\n  },\n\n  // options:\n  //\n  // - includeIsopackBuildInfo: If set, write an isopack-buildinfo.json file.\n  // - includePreCompilerPluginIsopackVersions: By default, saveToPath only\n  //   creates an isopack of format 'isopack-2', with unibuilds of format\n  //   'isopack-2-unibuild'.  These isopacks may contain \"source\" resources,\n  //   which are processed at *bundle* time by compiler plugins.  They cannot be\n  //   properly processed by older tools.  If this flag is set, saveToPath also\n  //   tries to save data for older formats (isopack-1 and unipackage-pre2),\n  //   converting JS and CSS \"source\" resources into \"prelink\" and \"css\"\n  //   resources.  This is not possible if there are \"source\" resources other\n  //   than JS or CSS; however, such packages must indirectly depend on the\n  //   \"isobuild:compiler-plugin\" pseudo-package which is not compatible with\n  //   older releases.  For packages that can't be converted to the older\n  //   format, this function silently only saves the newer format.  (The point\n  //   of this flag is allow us to optimize cases that never need to write the\n  //   older format, such as the per-app isopack cache.)\n  // - isopackCache: isopack cache in which this isopack is registered\n  saveToPath: Profile(\"Isopack#saveToPath\", function (outputDir, {\n    includePreCompilerPluginIsopackVersions,\n    includeIsopackBuildInfo,\n    isopackCache = null,\n  } = {}) {\n    var self = this;\n    var outputPath = outputDir;\n\n    var builder = new Builder({ outputPath: outputPath });\n    try {\n      var mainJson = {\n        name: self.name,\n        summary: self.metadata.summary,\n        version: self.version,\n        isTest: self.isTest,\n        builds: [],\n        plugins: []\n      };\n\n      if (self.debugOnly) {\n        mainJson.debugOnly = true;\n      }\n      if (self.prodOnly) {\n        mainJson.prodOnly = true;\n      }\n      if (self.testOnly) {\n        mainJson.testOnly = true;\n      }\n      if (! _.isEmpty(self.cordovaDependencies)) {\n        mainJson.cordovaDependencies = self.cordovaDependencies;\n      }\n\n      const writeLegacyBuilds = (\n        includePreCompilerPluginIsopackVersions\n          && self.canWriteLegacyBuilds());\n\n      var isopackBuildInfoJson = null;\n      if (includeIsopackBuildInfo) {\n        isopackBuildInfoJson = {\n          builtBy: compiler.BUILT_BY,\n          unibuildDependencies: {},\n          // pluginDependencies defines a WatchSet that any package that could\n          // use this package as a plugin needs to watch. So it always contains\n          // our package.js (because modifications to package.js could add a new\n          // plugin), as well as any files making up plugins in our package.\n          pluginDependencies: self.pluginWatchSet.toJSON(),\n          pluginProviderPackageMap: self.pluginProviderPackageMap.toJSON(),\n          includeCordovaUnibuild: self.hasCordovaUnibuild()\n        };\n      }\n\n      // XXX COMPAT WITH 0.9.3\n      builder.reserve(\"unipackage.json\");\n\n      builder.reserve(\"isopack.json\");\n      // Reserve this even if includeIsopackBuildInfo is not set, to ensure\n      // nothing else writes it somehow.\n      builder.reserve(\"isopack-buildinfo.json\");\n\n      builder.reserve(\"head\");\n      builder.reserve(\"body\");\n\n      // Map from absolute path to npm directory in the unibuild, to the\n      // generated filename in the isopack we're writing.  Multiple builds\n      // can use the same npm modules (though maybe not any more, since tests\n      // have been separated?), but also there can be different sets of\n      // directories as well (eg, for a isopack merged with from multiple\n      // isopacks with _loadUnibuildsFromPath).\n      const npmDirsToCopy = Object.create(null);\n\n      // Pre-linker versions of Meteor expect all packages in the warehouse to\n      // contain a file called \"package.js\"; they use this as part of deciding\n      // whether or not they need to download a new package. Because packages\n      // are downloaded by the *existing* version of the tools, we need to\n      // include this file until we're comfortable breaking \"meteor update\" from\n      // 0.6.4.  (Specifically, warehouse.packageExistsInWarehouse used to check\n      // to see if package.js exists instead of just looking for the package\n      // directory.)\n      // XXX Remove this once we can.\n      builder.write(\"package.js\", {\n        data: new Buffer(\n          (\"// This file is included for compatibility with the Meteor \" +\n           \"0.6.4 package downloader.\\n\"),\n          \"utf8\")\n      });\n\n      var unibuildInfos = [];\n\n      // Unibuilds\n      _.each(self.unibuilds, function (unibuild) {\n        // Make up a filename for this unibuild\n        var baseUnibuildName = unibuild.arch;\n        var unibuildDir =\n          builder.generateFilename(baseUnibuildName, { directory: true });\n        var unibuildJsonFile =\n          builder.generateFilename(baseUnibuildName + \".json\");\n        mainJson.builds.push({\n          kind: unibuild.kind,\n          arch: unibuild.arch,\n          path: unibuildJsonFile\n        });\n\n        var jsResourcesForLegacyPrelink = [];\n\n        // Save unibuild dependencies. Keyed by the json path rather than thinking\n        // too hard about how to encode pair (name, arch).\n        if (isopackBuildInfoJson) {\n          isopackBuildInfoJson.unibuildDependencies[unibuildJsonFile] =\n            unibuild.watchSet.toJSON();\n        }\n\n        // Figure out where the npm dependencies go.\n        let node_modules = {};\n        _.each(unibuild.nodeModulesDirectories, nmd => {\n          const bundlePath = _.has(npmDirsToCopy, nmd.sourcePath)\n            // We already have this npm directory from another unibuild.\n            ? npmDirsToCopy[nmd.sourcePath]\n            : npmDirsToCopy[nmd.sourcePath] = builder.generateFilename(\n              nmd.getPreferredBundlePath(\"isopack\"),\n              { directory: true }\n            );\n          node_modules[bundlePath] = nmd.toJSON();\n        });\n\n        const preferredPaths = Object.keys(node_modules);\n        if (preferredPaths.length === 1) {\n          // For backwards compatibility, if there's only one node_modules\n          // directory, store it as a single string.\n          node_modules = preferredPaths[0];\n        }\n\n        // Construct unibuild metadata\n        var unibuildJson = {\n          format: \"isopack-2-unibuild\",\n          declaredExports: unibuild.declaredExports,\n          uses: _.map(unibuild.uses, function (u) {\n            return {\n              'package': u.package,\n              // For cosmetic value, leave false values for these options out of\n              // the JSON file.\n              constraint: u.constraint || undefined,\n              unordered: u.unordered || undefined,\n              weak: u.weak || undefined\n            };\n          }),\n          implies: (_.isEmpty(unibuild.implies) ? undefined : unibuild.implies),\n          resources: []\n        };\n\n        if (preferredPaths.length > 0) {\n          // If there are no node_modules directories, don't confuse older\n          // versions of Meteor by storing an empty object.\n          unibuildJson.node_modules = node_modules;\n        }\n\n        const usesModules = ! isopackCache ||\n          isopackCache.uses(self, \"modules\", unibuild.arch);\n\n        // Output 'head', 'body' resources nicely\n        var concat = { head: [], body: [] };\n        var offset = { head: 0, body: 0 };\n        _.each(unibuild.resources, function (resource) {\n          if (_.contains([\"head\", \"body\"], resource.type)) {\n            if (concat[resource.type].length) {\n              concat[resource.type].push(new Buffer(\"\\n\", \"utf8\"));\n              offset[resource.type]++;\n            }\n            if (! (resource.data instanceof Buffer)) {\n              throw new Error(\"Resource data must be a Buffer\");\n            }\n\n            if (! usesModules &&\n                resource.fileOptions &&\n                resource.fileOptions.lazy) {\n              // Omit lazy resources from the unibuild JSON file.\n              return;\n            }\n\n            unibuildJson.resources.push({\n              type: resource.type,\n              file: files.pathJoin(unibuildDir, resource.type),\n              length: resource.data.length,\n              offset: offset[resource.type]\n            });\n\n            concat[resource.type].push(resource.data);\n            offset[resource.type] += resource.data.length;\n          }\n        });\n\n        _.each(concat, function (parts, type) {\n          if (parts.length) {\n            builder.write(files.pathJoin(unibuildDir, type), {\n              data: Buffer.concat(concat[type], offset[type])\n            });\n          }\n        });\n\n        // Output other resources each to their own file\n        _.each(unibuild.resources, function (resource) {\n          if (_.contains([\"head\", \"body\"], resource.type)) {\n            // already did this one\n            return;\n          }\n\n          const generatedFilename =\n            builder.writeToGeneratedFilename(\n              files.pathJoin(unibuildDir,\n                             resource.servePath || resource.path),\n              { data: resource.data });\n\n          if (! usesModules &&\n              resource.fileOptions &&\n              resource.fileOptions.lazy) {\n            // Omit lazy resources from the unibuild JSON file, but only\n            // after they are copied into the bundle (immediately above).\n            return;\n          }\n\n          // If we're going to write a legacy prelink file later, track the\n          // original form of the resource object (with the source in a Buffer,\n          // etc) instead of the later version.  #HardcodeJs\n          if (writeLegacyBuilds &&\n              resource.type === \"source\" &&\n              resource.extension == \"js\") {\n            jsResourcesForLegacyPrelink.push({\n              data: resource.data,\n              hash: resource.hash,\n              servePath: unibuild.pkg._getServePath(resource.path),\n              bare: resource.fileOptions && resource.fileOptions.bare,\n              sourceMap: resource.sourceMap,\n              // If this file was actually read from a legacy isopack and is\n              // itself prelinked, this will be an object with some metadata\n              // about it, and we can skip re-running prelink later.\n              legacyPrelink: resource.legacyPrelink\n            });\n          }\n\n          unibuildJson.resources.push({\n            type: resource.type,\n            extension: resource.extension,\n            file: generatedFilename,\n            length: resource.data.length,\n            offset: 0,\n            usesDefaultSourceProcessor:\n              resource.usesDefaultSourceProcessor || undefined,\n            servePath: resource.servePath || undefined,\n            path: resource.path || undefined,\n            hash: resource.hash || undefined,\n            fileOptions: resource.fileOptions || undefined\n          });\n        });\n\n        // Control file for unibuild\n        builder.writeJson(unibuildJsonFile, unibuildJson);\n        unibuildInfos.push({\n          unibuild: unibuild,\n          unibuildJson: unibuildJson,\n          jsResourcesForLegacyPrelink: jsResourcesForLegacyPrelink\n        });\n      });\n\n      // If unibuilds included node_modules, copy them in.\n      _.each(npmDirsToCopy, (bundlePath, sourcePath) => {\n        builder.copyDirectory({\n          from: sourcePath,\n          to: bundlePath,\n          npmDiscards: self.npmDiscards,\n          symlink: false\n        });\n      });\n\n      // Plugins\n      _.each(self.plugins, function (pluginsByArch, name) {\n        _.each(pluginsByArch, function (plugin) {\n          // XXX the name of the plugin doesn't typically contain a colon, but\n          // escape it just in case.\n          var pluginDir = builder.generateFilename(\n            'plugin.' + colonConverter.convert(name) + '.' + plugin.arch,\n            { directory: true });\n          var pluginBuild = plugin.write(builder.enter(pluginDir));\n          var pluginEntry = {\n            name: name,\n            arch: plugin.arch,\n            path: files.pathJoin(pluginDir, pluginBuild.controlFile)\n          };\n          mainJson.plugins.push(pluginEntry);\n        });\n      });\n\n      // Tools\n      // First, are we supposed to include our own source as a tool?\n      if (self.includeTool) {\n        var toolsJson = self._writeTool(builder);\n        mainJson.tools = toolsJson;\n      }\n      // Next, what about other tools we may be merging from other isopacks?\n      // XXX check for overlap\n      _.each(self.toolsOnDisk, function (toolMeta) {\n        toolMeta = _.clone(toolMeta);\n        var rootDir = toolMeta.rootDir;\n        delete toolMeta.rootDir;\n        builder.copyDirectory({\n          from: files.pathJoin(rootDir, toolMeta.path),\n          to: toolMeta.path,\n          symlink: false\n        });\n        if (!mainJson.tools) {\n          mainJson.tools = [];\n        }\n        mainJson.tools.push(toolMeta);\n      });\n\n      var mainLegacyJson = null;\n      if (writeLegacyBuilds) {\n        mainLegacyJson = _.clone(mainJson);\n        mainLegacyJson.builds = [];\n\n        _.each(unibuildInfos, function (unibuildInfo) {\n          var unibuild = unibuildInfo.unibuild;\n          var unibuildJson = unibuildInfo.unibuildJson;\n          var jsResourcesForLegacyPrelink =\n                unibuildInfo.jsResourcesForLegacyPrelink;\n          var legacyFilename = builder.generateFilename(\n            unibuild.arch + '-legacy.json');\n          var legacyDir = unibuild.arch + '-legacy';\n          mainLegacyJson.builds.push({\n            kind: unibuild.kind,\n            arch: unibuild.arch,\n            path: legacyFilename\n          });\n\n          unibuildJson.format = 'unipackage-unibuild-pre1';\n          var newResources = [];\n          _.each(unibuildJson.resources, function (resource) {\n            if (resource.type !== 'source') {\n              newResources.push(resource);\n            } else if (resource.extension === 'css') {\n              // Convert this resource from a new-style \"source\" to an\n              // old-style \"css\".\n              newResources.push({\n                type: 'css',\n                file: resource.file,\n                length: resource.length,\n                offset: resource.offset,\n                servePath: self._getServePath(resource.path)\n              });\n            } else if (resource.extension === 'js') {\n              // Skip; we saved this in jsResourcesForLegacyPrelink above\n              // already, in the format that linker.prelink understands.\n            } else {\n              throw Error(\n                \"shouldn't write legacy builds for non-JS/CSS source \"\n                  + JSON.stringify(resource));\n            }\n          });\n\n          var prelinkFile, prelinkData, packageVariables;\n          if (jsResourcesForLegacyPrelink.length === 1 &&\n              jsResourcesForLegacyPrelink[0].legacyPrelink) {\n            // Aha!  This isopack was actually a legacy isopack in the first\n            // place! So this source file is already the output of prelink,\n            // and we don't need to reprocess it.\n            prelinkFile = jsResourcesForLegacyPrelink[0];\n            // XXX It's weird that the type of object going in and out of\n            // linker.prelink is different (so that this prelinkData\n            // assignment differs from that below), ah well.\n            prelinkData = prelinkFile.data;\n            packageVariables =\n              jsResourcesForLegacyPrelink[0].legacyPrelink.packageVariables;\n          } else {\n            // Determine captured variables, legacy way. First, start with the\n            // exports. We'll add the package variables after running prelink.\n            packageVariables = [];\n            var packageVariableNames = {};\n            _.each(unibuild.declaredExports, function (symbol) {\n              if (_.has(packageVariableNames, symbol.name)) {\n                return;\n              }\n              packageVariables.push({\n                name: symbol.name,\n                export: symbol.testOnly? \"tests\" : true\n              });\n              packageVariableNames[symbol.name] = true;\n            });\n\n            if (jsResourcesForLegacyPrelink.length) {\n              // Not originally legacy; let's run prelink to make it legacy.\n              var results = linker.prelink({\n                inputFiles: jsResourcesForLegacyPrelink,\n                // I was confused about this, so I am leaving a comment -- the\n                // combinedServePath is either [pkgname].js or [pluginName]:plugin.js.\n                // XXX: If we change this, we can get rid of source arch names!\n                combinedServePath: (\n                  \"/packages/\" + colonConverter.convert(\n                    unibuild.pkg.name +\n                      (unibuild.kind === \"main\" ? \"\" : (\":\" + unibuild.kind)) +\n                      \".js\")),\n                name: unibuild.pkg.name\n              });\n              if (results.files.length !== 1) {\n                throw Error(\"prelink should return 1 file, not \" +\n                            results.files.length);\n              }\n              prelinkFile = results.files[0];\n              prelinkData = new Buffer(prelinkFile.source, 'utf8');\n\n              _.each(results.assignedVariables, function (name) {\n                if (_.has(packageVariableNames, name)) {\n                  return;\n                }\n                packageVariables.push({\n                  name: name\n                });\n                packageVariableNames[name] = true;\n              });\n            }\n          }\n\n          if (prelinkFile && prelinkData) {\n            var prelinkResource = {\n              type: 'prelink',\n              file: builder.writeToGeneratedFilename(\n                files.pathJoin(legacyDir, prelinkFile.servePath),\n                { data: prelinkData }),\n              length: prelinkData.length,\n              offset: 0,\n              servePath: prelinkFile.servePath || undefined\n            };\n            if (prelinkFile.sourceMap) {\n              // It appears in node v0.10.x, `new Buffer({someobject: 1})`\n              // would be silently swallowed. (leaving an empty buffer)\n              // In node v4+ this same code throws an error.\n              // XX - Not 100% sure what prelinkFile.sourceMap _can_ be,\n              //      so here's some exhaustive checking of things buffer\n              //      _will_ accept.\n              var acceptedByBuffer = _.isString(prelinkFile.sourceMap)\n                    || _.isNumber(prelinkFile.sourceMap)\n                    || _.isArray(prelinkFile.sourceMap)\n                    || (prelinkFile.sourceMap instanceof Buffer);\n              if (!acceptedByBuffer) {\n                prelinkFile.sourceMap = JSON.stringify(prelinkFile.sourceMap);\n              }\n              // Write the source map.\n\n              if (typeof prelinkFile.sourceMap !== \"string\") {\n                prelinkFile.sourceMap = JSON.stringify(prelinkFile.sourceMap);\n              }\n\n              prelinkResource.sourceMap = builder.writeToGeneratedFilename(\n                files.pathJoin(legacyDir, prelinkFile.servePath + '.map'),\n                { data: new Buffer(prelinkFile.sourceMap, 'utf8') }\n              );\n            }\n            newResources.push(prelinkResource);\n          }\n\n          if (packageVariables.length) {\n            unibuildJson.packageVariables = packageVariables;\n          }\n\n          unibuildJson.resources = newResources;\n          delete unibuildJson.declaredExports;\n          builder.writeJson(legacyFilename, unibuildJson);\n        });\n\n        // old unipackage.json format/filename.  no point to save this if\n        // we can't even support isopack-1.\n        // XXX COMPAT WITH 0.9.3\n        builder.writeJson(\n          \"unipackage.json\",\n          Isopack.convertIsopackFormat(\n            // Note that mainLegacyJson is isopack-1 (has no \"source\" resources)\n            // rather than isopack-2.\n            mainLegacyJson, \"isopack-1\", \"unipackage-pre2\"));\n      }\n\n      var isopackJson = {};\n      isopackJson['isopack-2'] = mainJson;\n      if (writeLegacyBuilds) {\n        isopackJson['isopack-1'] = mainLegacyJson;\n      }\n\n      // writes one file with all of the new formats, so that it is possible\n      // to invent a new format and have old versions of meteor still read the\n      // old format\n      //\n      // This looks something like:\n      // {\n      //   isopack-1: {... data ...},\n      //   isopack-2: {... data ...}\n      // }\n      builder.writeJson(\"isopack.json\", isopackJson);\n\n      if (isopackBuildInfoJson) {\n        builder.writeJson(\"isopack-buildinfo.json\", isopackBuildInfoJson);\n      }\n      builder.complete();\n    } catch (e) {\n      builder.abort();\n      throw e;\n    }\n  }),\n\n  _writeTool: Profile(\"Isopack#_writeTool\", function (builder) {\n    var self = this;\n\n    var pathsToCopy = utils.runGitInCheckout(\n      'ls-tree',\n      '-r',\n      '--name-only',\n      '--full-tree',\n      'HEAD',\n      // The actual trees to copy!\n      'tools', 'examples', 'LICENSE.txt', 'LICENSES',\n      'meteor', 'meteor.bat', 'scripts/admin/launch-meteor',\n      'packages/package-version-parser/package-version-parser.js',\n      'packages/meteor/flush-buffers-on-exit-in-windows.js');\n\n    // Trim blank line and unnecessary examples.\n    pathsToCopy = _.filter(pathsToCopy.split('\\n'), function (f) {\n      return f && !f.match(/^examples\\/other/) &&\n        !f.match(/^examples\\/unfinished/);\n    });\n\n    // Regexes matching paths to transpile using babel\n    var transpileRegexes = [\n      /^tools\\/[^\\/]+\\.js$/, // General tools files\n      /^tools\\/isobuild\\/[^\\/]+\\.js$/, // Isobuild files\n      /^tools\\/cli\\/[^\\/]+\\.js$/, // CLI files\n      /^tools\\/tool-env\\/[^\\/]+\\.js$/, // Tool initiation and clean up\n      /^tools\\/runners\\/[^\\/]+\\.js$/, // Parts of tool process\n      /^tools\\/packaging\\/[^\\/]+\\.js$/,\n      /^tools\\/packaging\\/catalog\\/[^\\/]+\\.js$/,\n      /^tools\\/utils\\/[^\\/]+\\.js$/,\n      /^tools\\/fs\\/[^\\/]+\\.js$/,\n      /^tools\\/meteor-services\\/[^\\/]+\\.js$/,\n      /^tools\\/tool-testing\\/[^\\/]+\\.js$/,\n      /^tools\\/console\\/[^\\/]+\\.js$/,\n      /^tools\\/cordova\\/[^\\/]+\\.js$/,\n      // We don't support running self-test from an install anymore\n    ];\n\n    // Split pathsToCopy into two arrays - one of files that should be copied\n    // directly, and one of files that should be transpiled with Babel\n    var pathsToTranspile = [];\n    var pathsToCopyStraight = [];\n    pathsToCopy.forEach((path) => {\n      var shouldTranspile =\n        _.some(transpileRegexes, (regex) => path.match(regex));\n\n      if (shouldTranspile) {\n        pathsToTranspile.push(path);\n      } else {\n        pathsToCopyStraight.push(path);\n      }\n    });\n\n    // Set up builder to write to the correct directory\n    var toolPath = 'mt-' + archinfo.host();\n    builder = builder.enter(toolPath);\n\n    // Transpile the files we selected\n    var babel = require(\"meteor-babel\");\n    pathsToTranspile.forEach((path) => {\n      var fullPath = files.convertToOSPath(\n        files.pathJoin(files.getCurrentToolsDir(), path));\n\n      var inputFileContents = files.readFile(fullPath, \"utf-8\");\n\n      // #RemoveInProd\n      // We don't actually want to load the babel auto-transpiler when we are\n      // in a Meteor installation where everything is already transpiled for us.\n      // Therefore, strip out that line in main.js\n      if (path === \"tools/tool-env/install-babel.js\" ||\n          path === \"tools/tool-env/source-map-retriever-stack.js\") {\n        inputFileContents = inputFileContents.replace(/^.*#RemoveInProd.*$/mg, \"\");\n      }\n\n      var babelOptions = babel.getDefaultOptions();\n\n      _.extend(babelOptions, {\n        filename: path,\n        sourceFileName: \"/\" + path,\n        sourceMapTarget: path + \".map\",\n        sourceMap: true\n      });\n\n      var transpiled = babel.compile(inputFileContents, babelOptions);\n\n      var sourceMapUrlComment = \"//# sourceMappingURL=\" + files.pathBasename(path + \".map\");\n\n      builder.write(path, {\n        data: new Buffer(transpiled.code + \"\\n\" + sourceMapUrlComment, 'utf8')\n      });\n\n      builder.write(path + \".map\", {\n        data: new Buffer(JSON.stringify(transpiled.map), 'utf8')\n      });\n    });\n\n    var gitSha = utils.runGitInCheckout('rev-parse', 'HEAD');\n    builder.reserve('isopackets', {directory: true});\n    builder.write('.git_version.txt', {data: new Buffer(gitSha, 'utf8')});\n\n    builder.copyDirectory({\n      from: files.getCurrentToolsDir(),\n      to: '',\n      specificFiles: pathsToCopyStraight,\n      symlink: false\n    });\n\n    // Include the dev bundle, but drop a few things that are only used by\n    // self-test (which isn't supported from release).\n    var devBundleIgnore = _.clone(bundler.ignoreFiles);\n    devBundleIgnore.push(/BrowserStackLocal/, /browserstack-webdriver/);\n    builder.copyDirectory({\n      from: files.pathJoin(files.getDevBundle()),\n      to: 'dev_bundle',\n      ignore: devBundleIgnore,\n      symlink: false\n    });\n\n    // Build all of the isopackets now, so that no build step is required when\n    // you're actually running meteor from a release in order to load packages.\n    var isopacketBuildContext = isopackets.makeIsopacketBuildContext();\n\n    var messages = buildmessage.capture(function () {\n      // We rebuild them in the order listed in ISOPACKETS. This is not strictly\n      // necessary here, since any isopackets loaded as part of the build\n      // process are going to be the current tool's isopackets, not the\n      // isopackets that we're writing out.\n      _.each(isopackets.ISOPACKETS, function (packages, isopacketName) {\n        buildmessage.enterJob({\n          title: \"compiling \" + isopacketName + \" packages for the tool\"\n        }, function () {\n          isopacketBuildContext.isopackCache.buildLocalPackages(packages);\n          if (buildmessage.jobHasMessages()) {\n            return;\n          }\n\n          var image = bundler.buildJsImage({\n            name: \"isopacket-\" + isopacketName,\n            packageMap: isopacketBuildContext.packageMap,\n            isopackCache: isopacketBuildContext.isopackCache,\n            use: packages\n          }).image;\n          if (buildmessage.jobHasMessages()) {\n            return;\n          }\n\n          image.write(\n            builder.enter(files.pathJoin('isopackets', isopacketName)));\n        });\n      });\n    });\n    // This is a build step ... but it's one that only happens in development,\n    // and similar to a isopacket load failure, it can just crash the app\n    // instead of being handled nicely.\n    if (messages.hasMessages()) {\n      Console.error(\"Errors prevented tool build:\");\n      Console.error(messages.formatMessages());\n      throw new Error(\"tool build failed?\");\n    }\n\n    return [{\n      name: 'meteor',\n      arch: archinfo.host(),\n      path: toolPath\n    }];\n  }),\n\n  getMergedWatchSet: Profile(\"Isopack#getMergedWatchSet\", function () {\n    var self = this;\n    var watchSet = self.pluginWatchSet.clone();\n    _.each(self.unibuilds, function (unibuild) {\n      watchSet.merge(unibuild.watchSet);\n    });\n    return watchSet;\n  }),\n\n  getClientWatchSet: Profile(\"Isopack#getClientWatchSet\", function () {\n    var watchSet = this.pluginWatchSet.clone();\n    _.each(this.unibuilds, function (unibuild) {\n      if (/^web\\./.test(unibuild.arch)) {\n        watchSet.merge(unibuild.watchSet);\n      }\n    });\n    return watchSet;\n  }),\n\n  getServerWatchSet: Profile(\"Isopack#getServerWatchSet\", function () {\n    var watchSet = this.pluginWatchSet.clone();\n    _.each(this.unibuilds, function (unibuild) {\n      if (! /^web\\./.test(unibuild.arch)) {\n        watchSet.merge(unibuild.watchSet);\n      }\n    });\n    return watchSet;\n  }),\n\n  // Similar to PackageSource.getPackagesToLoadFirst, but doesn't include\n  // packages used by plugins, because plugin dependencies are already\n  // statically included in this built Isopack. Used by\n  // IsopackCache._ensurePackageLoaded.\n  //\n  // Like getPackagesToLoadFirst, it filters out isobuild:* pseudo-packages and\n  // should not be used to create input to Version Solver.\n  getStrongOrderedUsedAndImpliedPackages: Profile(\n    \"Isopack#getStrongOrderedUsedAndImpliedPackages\", function () {\n    var self = this;\n    var packages = {};\n    var processUse = function (use) {\n      if (use.weak || use.unordered) {\n        return;\n      }\n      // Only include real packages, not isobuild:* pseudo-packages.\n      if (compiler.isIsobuildFeaturePackage(use.package)) {\n        return;\n      }\n      packages[use.package] = true;\n    };\n\n    _.each(self.unibuilds, function (unibuild) {\n      _.each(unibuild.uses, processUse);\n      _.each(unibuild.implies, processUse);\n    });\n    return _.keys(packages);\n  }),\n\n  featureEnabled(featurePackageName) {\n    return this.isobuildFeatures.indexOf(featurePackageName) !== -1;\n  },\n\n  _getServePath: function (pathInPackage) {\n    var self = this;\n    var serveRoot;\n    if (self.name) {\n      serveRoot = files.pathJoin('/packages/', self.name);\n    } else {\n      serveRoot = '/';\n    }\n\n    return colonConverter.convert(\n      files.pathJoin(\n        serveRoot,\n        // XXX or should everything in this API use slash already?\n        files.convertToStandardPath(pathInPackage, true)));\n  },\n\n  displayName() {\n    return this.name === null ? 'the app' : this.name;\n  }\n});\n\nexports.Isopack = Isopack;\n\nexports.OldIsopackFormatError = function () {\n  // This should always be caught anywhere where it can appear (ie, anywhere\n  // that isn't definitely loading something from the tropohouse).\n  this.toString = function () { return \"old isopack format!\" };\n};\n"]}