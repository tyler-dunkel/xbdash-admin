{"version":3,"sources":["/tools/isobuild/build-plugin.js"],"names":["archinfo","require","buildmessage","files","_","utils","nextId","exports","SourceProcessor","options","self","isopack","extensions","slice","filenames","archMatching","isTemplate","factoryFunction","methodName","id","displayName","userPlugin","extend","prototype","instantiatePlugin","assertInCapture","Error","enterJob","markBoundary","call","pluginCacheDir","setDiskCacheDirectory","convertToOSPath","e","exception","relevantForArch","arch","matches","SourceProcessorSet","myPackageDisplayName","hardcodeJs","singlePackage","allowConflicts","_myPackageDisplayName","_singlePackage","_hardcodeJs","_allowConflicts","_byExtension","_byFilename","allSourceProcessors","_legacyHandlers","_conflictError","package1","package2","conflict","error","addSourceProcessor","sp","assertInJob","_addSourceProcessorHelper","push","things","byThing","errorPrefix","forEach","thing","hasOwnProperty","addLegacyHandler","extension","handler","packageDisplayName","merge","otherSet","sourceProcessor","each","info","getByExtension","getByFilename","filename","classifyFilename","SourceClassification","sourceProcessors","parts","split","i","length","join","usesDefaultSourceProcessor","legacy","legacyHandler","legacyIsTemplate","isEmpty","appReadDirectoryOptions","include","names","addedJs","addExtension","ext","RegExp","quotemeta","some","Object","keys","exclude","type","knownTypes","indexOf","filteredSourceProcessors","filter","undefined","isNonLegacySource","InputFile","getContentsAsBuffer","getPackageName","getPathInPackage","getSourceHash","getArch","getContentsAsString","toString","getBasename","pathBasename","getDirname","pathDirname","getFileOptions","path","packageName","_reportError","message","file","sourcePath","line","column","func"],"mappings":"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","file":"tools/isobuild/build-plugin.js.map","sourcesContent":["var archinfo = require('../utils/archinfo.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar files = require('../fs/files.js');\nvar _ = require('underscore');\nimport utils from '../utils/utils.js';\n\nlet nextId = 1;\n\nexports.SourceProcessor = function (options) {\n  var self = this;\n  self.isopack = options.isopack;\n  self.extensions = (options.extensions || []).slice();\n  self.filenames = (options.filenames || []).slice();\n  self.archMatching = options.archMatching;\n  self.isTemplate = !! options.isTemplate;\n  self.factoryFunction = options.factoryFunction;\n  self.methodName = options.methodName;\n  self.id = `${ options.isopack.displayName() }#${ nextId++ }`;\n  self.userPlugin = null;\n};\n_.extend(exports.SourceProcessor.prototype, {\n  // Call the user's factory function to get the actual build plugin object.\n  // Note that we're supposed to have one userPlugin per project, so this\n  // assumes that each Isopack object is specific to a project.  We don't run\n  // this immediately on evaluating Plugin.registerCompiler; we instead wait\n  // until the whole plugin file has been evaluated (so that it can use things\n  // defined later in the file).\n  instantiatePlugin: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n    if (self.userPlugin) {\n      throw Error(\"Called instantiatePlugin twice?\");\n    }\n    buildmessage.enterJob(\n      `running ${self.methodName} callback in package ` +\n        self.isopack.displayName(),\n      () => {\n        try {\n          self.userPlugin = buildmessage.markBoundary(self.factoryFunction)\n            .call(null);\n          // If we have a disk cache directory and the plugin wants it, use it.\n          if (self.isopack.pluginCacheDir &&\n              self.userPlugin.setDiskCacheDirectory) {\n            buildmessage.markBoundary(function () {\n              self.userPlugin.setDiskCacheDirectory(\n                files.convertToOSPath(self.isopack.pluginCacheDir)\n              );\n            })();\n          }\n        } catch (e) {\n          buildmessage.exception(e);\n        }\n      }\n    );\n  },\n  relevantForArch: function (arch) {\n    var self = this;\n    return ! self.archMatching || archinfo.matches(arch, self.archMatching);\n  }\n});\n\n// Represents a set of SourceProcessors available in a given package. They may\n// not have conflicting extensions or filenames.\nexport class SourceProcessorSet {\n  constructor(myPackageDisplayName, {\n    hardcodeJs,\n    singlePackage,\n    allowConflicts,\n  } = {}) {\n    // For error messages only.\n    this._myPackageDisplayName = myPackageDisplayName;\n    // If this represents the SourceProcessors *registered* by a single package\n    // (vs those *available* to a package), use different error messages.\n    this._singlePackage = singlePackage;\n    // If this is being used for *compilers*, we hardcode *.js. If it is being\n    // used for linters, we don't.\n    this._hardcodeJs = !! hardcodeJs;\n    // Multiple linters may be registered on the same extension or filename, but\n    // not compilers.\n    this._allowConflicts = !! allowConflicts;\n\n    // Map from extension -> [SourceProcessor]\n    this._byExtension = {};\n    // Map from basename -> [SourceProcessor]\n    this._byFilename = {};\n    // This is just an duplicate-free list of all SourceProcessors in\n    // byExtension or byFilename.\n    this.allSourceProcessors = [];\n    // extension -> { handler, packageDisplayName, isTemplate, archMatching }\n    this._legacyHandlers = {};\n  }\n\n  _conflictError(package1, package2, conflict) {\n    if (this._singlePackage) {\n      buildmessage.error(\n        `plugins in package ${ this._myPackageDisplayName } define multiple ` +\n          `handlers for ${ conflict }`);\n    } else {\n      buildmessage.error(\n        `conflict: two packages included in ${ this._myPackageDisplayName } ` +\n          `(${ package1 } and ${ package2 }) are both trying to handle ` +\n          conflict);\n    }\n  }\n\n  addSourceProcessor(sp) {\n    buildmessage.assertInJob();\n    this._addSourceProcessorHelper(sp, sp.extensions, this._byExtension, '*.');\n    this._addSourceProcessorHelper(sp, sp.filenames, this._byFilename, '');\n    // If everything conflicted, then the SourceProcessors will be in\n    // allSourceProcessors but not any of the data structures, but in that case\n    // the caller should be checking for errors anyway.\n    this.allSourceProcessors.push(sp);\n  }\n  _addSourceProcessorHelper(sp, things, byThing, errorPrefix) {\n    buildmessage.assertInJob();\n\n    things.forEach((thing) => {\n      if (byThing.hasOwnProperty(thing)) {\n        if (this._allowConflicts) {\n          byThing[thing].push(sp);\n        } else {\n          this._conflictError(sp.isopack.displayName(),\n                              byThing[thing][0].isopack.displayName(),\n                              errorPrefix + thing);\n          // recover by ignoring this one\n        }\n      } else {\n        byThing[thing] = [sp];\n      }\n    });\n  }\n\n  addLegacyHandler({ extension, handler, packageDisplayName, isTemplate,\n                     archMatching }) {\n    if (this._allowConflicts) {\n      throw Error(\"linters have no legacy handlers\");\n    }\n\n    if (this._byExtension.hasOwnProperty(extension)) {\n      this._conflictError(packageDisplayName,\n                          this._byExtension[extension].isopack.displayName(),\n                          '*.' + extension);\n      // recover by ignoring\n      return;\n    }\n    if (this._legacyHandlers.hasOwnProperty(extension)) {\n      this._conflictError(packageDisplayName,\n                          this._legacyHandlers[extension].packageDisplayName,\n                          '*.' + extension);\n      // recover by ignoring\n      return;\n    }\n    this._legacyHandlers[extension] =\n      {handler, packageDisplayName, isTemplate, archMatching};\n  }\n\n  // Adds all the source processors (and legacy handlers) from the other set to\n  // this one. Logs buildmessage errors on conflict.  Ignores packageDisplayName\n  // and singlePackage.  If arch is set, skips SourceProcessors that\n  // don't match it.\n  merge(otherSet, options = {}) {\n    const { arch } = options;\n    buildmessage.assertInJob();\n    otherSet.allSourceProcessors.forEach((sourceProcessor) => {\n      if (! arch || sourceProcessor.relevantForArch(arch)) {\n        this.addSourceProcessor(sourceProcessor);\n      }\n    });\n    _.each(otherSet._legacyHandlers, (info, extension) => {\n      const { handler, packageDisplayName, isTemplate, archMatching } = info;\n      this.addLegacyHandler(\n        {extension, handler, packageDisplayName, isTemplate, archMatching});\n    });\n  }\n\n  // Note: Only returns SourceProcessors, not legacy handlers.\n  getByExtension(extension) {\n    if (this._allowConflicts) {\n      throw Error(\"Can't call getByExtension for linters\");\n    }\n\n    if (this._byExtension.hasOwnProperty(extension)) {\n      return this._byExtension[extension][0];\n    }\n    return null;\n  }\n\n  // Note: Only returns SourceProcessors, not legacy handlers.\n  getByFilename(filename) {\n    if (this._allowConflicts) {\n      throw Error(\"Can't call getByFilename for linters\");\n    }\n\n    if (this._byFilename.hasOwnProperty(filename)) {\n      return this._byFilename[filename][0];\n    }\n    return null;\n  }\n\n  // filename, arch -> SourceClassification\n  classifyFilename(filename, arch) {\n    // First check to see if a plugin registered for this exact filename.\n    if (this._byFilename.hasOwnProperty(filename)) {\n      return new SourceClassification('filename', {\n        arch,\n        sourceProcessors: this._byFilename[filename].slice()\n      });\n    }\n\n    // Now check to see if a plugin registered for an extension. We prefer\n    // longer extensions.\n    const parts = filename.split('.');\n    // don't use iteration functions, so we can return (and start at #1)\n    for (let i = 1; i < parts.length; i++) {\n      const extension = parts.slice(i).join('.');\n\n      if (this._byExtension.hasOwnProperty(extension)) {\n        return new SourceClassification('extension', {\n          arch,\n          extension,\n          sourceProcessors: this._byExtension[extension]\n        });\n      }\n\n      if (this._hardcodeJs && extension === 'js') {\n        // If there is no special sourceProcessor for handling a .js file,\n        // we can still classify it as extension/js, only without any\n        // source processors. #HardcodeJs\n        return new SourceClassification('extension', {\n          extension,\n          usesDefaultSourceProcessor: true\n        });\n      }\n\n      if (this._legacyHandlers.hasOwnProperty(extension)) {\n        const legacy = this._legacyHandlers[extension];\n        if (legacy.archMatching &&\n            ! archinfo.matches(arch, legacy.archMatching)) {\n          return new SourceClassification('wrong-arch');\n        }\n        return new SourceClassification('legacy-handler', {\n          extension,\n          legacyHandler: legacy.handler,\n          legacyIsTemplate: legacy.isTemplate\n        });\n      }\n    }\n\n    // Nothing matches; it must be a static asset (or a non-linted file).\n    return new SourceClassification('unmatched');\n  }\n\n  isEmpty() {\n    return _.isEmpty(this._byFilename) && _.isEmpty(this._byExtension) &&\n      _.isEmpty(this._legacyHandlers);\n  }\n\n  // Returns an options object suitable for passing to\n  // `watch.readAndWatchDirectory` to find source files processed by this\n  // SourceProcessorSet.\n  appReadDirectoryOptions(arch) {\n    const include = [];\n    const names = [];\n    let addedJs = false;\n\n    function addExtension(ext) {\n      include.push(new RegExp('\\\\.' + utils.quotemeta(ext) + '$'));\n      if (ext === 'js') {\n        addedJs = true;\n      }\n    }\n\n    _.each(this._byExtension, (sourceProcessors, ext) => {\n      if (sourceProcessors.some(sp => sp.relevantForArch(arch))) {\n        addExtension(ext);\n      }\n    });\n    Object.keys(this._legacyHandlers).forEach(addExtension);\n\n    if (this._hardcodeJs && ! addedJs) {\n      // If there is no sourceProcessor for handling .js files, we still\n      // want to make sure they get picked up when we're reading the\n      // contents of app directories. #HardcodeJs\n      addExtension('js');\n    }\n\n    _.each(this._byFilename, (sourceProcessors, filename) => {\n      if (sourceProcessors.some(sp => sp.relevantForArch(arch))) {\n        names.push(filename);\n      }\n    });\n    return {include, names, exclude: []};\n  }\n}\n\nclass SourceClassification {\n  constructor(type, {\n    legacyHandler,\n    extension,\n    sourceProcessors,\n    usesDefaultSourceProcessor,\n    legacyIsTemplate,\n    arch,\n  } = {}) {\n    const knownTypes = ['extension', 'filename', 'legacy-handler', 'wrong-arch',\n                        'unmatched'];\n    if (knownTypes.indexOf(type) === -1) {\n      throw Error(`Unknown SourceClassification type ${ type }`);\n    }\n    // This is the only thing we can write to `this` before checking for\n    // wrong-arch.\n    this.type = type;\n\n    if (type === 'extension' || type === 'filename') {\n      if (sourceProcessors) {\n        if (! arch) {\n          throw Error(\"need to filter based on arch!\");\n        }\n\n        // If there's a SourceProcessor (or legacy handler) registered for this\n        // file but not for this arch, we want to ignore it instead of\n        // processing it or treating it as a static asset. (Note that prior to\n        // the batch-plugins project, files added in a package with\n        // `api.addFiles('foo.bar')` where *.bar is a web-specific legacy\n        // handler (eg) would end up adding 'foo.bar' as a static asset on\n        // non-web programs, which was unintended. This didn't happen in apps\n        // because initFromAppDir's getFiles never added them.)\n        const filteredSourceProcessors = sourceProcessors.filter(\n          (sourceProcessor) => sourceProcessor.relevantForArch(arch)\n        );\n        if (! filteredSourceProcessors.length) {\n          // Wrong architecture! Rewrite this.type and return.  (Note that we\n          // haven't written anything else to `this` so far.)\n          this.type = 'wrong-arch';\n          return;\n        }\n\n        this.sourceProcessors = filteredSourceProcessors;\n      } else if (!(type === 'extension' && extension === 'js')) {\n        // 'extension' and 'filename' classifications need to have at least one\n        // SourceProcessor, unless it's the #HardcodeJs special case.\n        throw Error(`missing sourceProcessors for ${ type }!`);\n      }\n    }\n\n    if (type === 'legacy-handler') {\n      if (! legacyHandler) {\n        throw Error('SourceClassification needs legacyHandler!');\n      }\n      if (legacyIsTemplate === undefined) {\n        throw Error('SourceClassification needs legacyIsTemplate!');\n      }\n      this.legacyHandler = legacyHandler;\n      this.legacyIsTemplate = legacyIsTemplate;\n    }\n\n    if (type === 'extension' || type === 'legacy-handler') {\n      if (! extension) {\n        throw Error('extension SourceClassification needs extension!');\n      }\n      this.extension = extension;\n    }\n\n    if (usesDefaultSourceProcessor) {\n      if (this.extension !== 'js' &&\n          this.extension !== 'css') {\n        // We only currently hard-code support for processing .js files\n        // when no source processor is registered (#HardcodeJs). Default\n        // support could conceivably be extended to .css files too, but\n        // anything else is almost certainly a mistake.\n        throw Error('non-JS/CSS file relying on default source processor?');\n      }\n      this.usesDefaultSourceProcessor = true;\n    } else {\n      this.usesDefaultSourceProcessor = false;\n    }\n  }\n\n  isNonLegacySource() {\n    return this.type === 'extension' || this.type === 'filename';\n  }\n}\n\n\n\n// This is the base class of the object presented to the user's plugin code.\nexport class InputFile {\n  /**\n   * @summary Returns the full contents of the file as a buffer.\n   * @memberof InputFile\n   * @returns {Buffer}\n   */\n  getContentsAsBuffer() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns the name of the package or `null` if the file is not in a\n   * package.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getPackageName() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns the relative path of file to the package or app root\n   * directory. The returned path always uses forward slashes.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getPathInPackage() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns a hash string for the file that can be used to implement\n   * caching.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getSourceHash() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns the architecture that is targeted while processing this\n   * file.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getArch() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns the full contents of the file as a string.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getContentsAsString() {\n    var self = this;\n    return self.getContentsAsBuffer().toString('utf8');\n  }\n\n  /**\n   * @summary Returns the filename of the file.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getBasename() {\n    var self = this;\n    return files.pathBasename(self.getPathInPackage());\n  }\n\n  /**\n   * @summary Returns the directory path relative to the package or app root.\n   * The returned path always uses forward slashes.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getDirname() {\n    var self = this;\n    return files.pathDirname(self.getPathInPackage());\n  }\n\n  /**\n   * @summary Returns an object of file options such as those passed as the\n   *          third argument to api.addFiles.\n   * @memberof InputFile\n   * @returns {Object}\n   */\n  getFileOptions() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Call this method to raise a compilation or linting error for the\n   * file.\n   * @param {Object} options\n   * @param {String} options.message The error message to display.\n   * @param {String} [options.sourcePath] The path to display in the error message.\n   * @param {Integer} options.line The line number to display in the error message.\n   * @param {String} options.func The function name to display in the error message.\n   * @memberof InputFile\n   */\n  error(options) {\n    var self = this;\n    var path = self.getPathInPackage();\n    var packageName = self.getPackageName();\n    if (packageName) {\n      path = \"packages/\" + packageName + \"/\" + path;\n    }\n\n    self._reportError(options.message || (\"error building \" + path), {\n      file: options.sourcePath || path,\n      line: options.line ? options.line : undefined,\n      column: options.column ? options.column : undefined,\n      func: options.func ? options.func : undefined\n    });\n  }\n\n  // Default implementation. May be overridden by subclasses.\n  _reportError(message, info) {\n    buildmessage.error(message, info);\n  }\n}\n"]}