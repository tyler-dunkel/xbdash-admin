{"version":3,"sources":["/tools/inspector.js"],"names":["assert","require","net","inspector","spawn","_","chalk","EOL","Protocol","debugEntries","start","debugPort","entryPoint","entry","DebugEntry","attach","ok","incomingSink","BackloggedStreamWriter","outgoingSink","inspectorProcess","interceptServer","debugConnection","connectCount","bind","suggestedDebugBrkPort","DEp","prototype","child","clear","startInterceptServer","startInspector","connectToChildProcess","self","createServer","socket","setTarget","on","buffer","write","err","listen","webPort","proc","process","execPath","resolve","url","buildInspectorUrl","stderr","pipe","code","onData","match","exec","toString","removeListener","connect","port","disconnect","createConnection","setEncoding","protocol","execute","onResponse","res","body","type","event","scriptName","script","name","lineNumber","sourceLine","sendContinue","stdout","sentContinue","serialize","command","banner","setTimeout","end","stop","kill","close","target","backlog","BSWp","push","length","each","splice","strictEqual","green","join","cyan","onExit","killAll","exports"],"mappings":"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","file":"tools/inspector.js.map","sourcesContent":["var assert = require(\"assert\");\nvar net = require(\"net\");\nvar inspector = require(\"node-inspector\");\nvar spawn = require(\"child_process\").spawn;\nvar _ = require(\"underscore\");\nvar chalk = require(\"chalk\");\nvar EOL = require(\"os\").EOL;\nvar Protocol = require(\"_debugger\").Protocol;\nvar debugEntries = [];\n\n// There can be only one debugger attached to a process at a time, and\n// detaching can leave the child process in a weird state for future\n// debugging, so the code that attaches to the child process must also\n// serve as a proxy for connections from actual debugger clients like\n// node-inspector.\n\n// This proxying system requires the child process to be invoked with\n// --debug-brk=<port> where <port> is not the same as debugPort, so that\n// we can proxy data between <port> and debugPort, as if the child process\n// were listening on debugPort (as it did before this commit).\n\n// The first time the server starts, the --debug-brk behavior of pausing\n// at the first line of the program is helpful so that the user can set\n// breakpoints. When the server restarts, however, that behavior is more\n// confusing than helpful, especially since the server can restart\n// multiple times in quick succession if the user edits and saves a file\n// multiple times. To avoid this confusion, we use the proxy to send a\n// continue command to resume execution automatically after restart.\n\n// Itercepting debugger requests, responses, events, etc. has the\n// additional benefit of allowing us to print helpful information to the\n// console, like notifying the developer that the debugger hit a\n// breakpoint, so that there is less confusion when the app is not\n// responding to requests.\n\nfunction start(debugPort, entryPoint) {\n  debugPort = +(debugPort || 5858);\n\n  var entry = debugEntries[debugPort];\n  if (entry instanceof DebugEntry) {\n    return entry.attach;\n  }\n\n  debugEntries[debugPort] = entry =\n    new DebugEntry(debugPort, entryPoint);\n\n  return entry.attach;\n}\n\nfunction DebugEntry(debugPort, entryPoint) {\n  assert.ok(this instanceof DebugEntry);\n\n  this.debugPort = debugPort;\n  this.entryPoint = entryPoint;\n  this.incomingSink = new BackloggedStreamWriter;\n  this.outgoingSink = new BackloggedStreamWriter;\n  this.inspectorProcess = null;\n  this.interceptServer = null;\n  this.debugConnection = null;\n  this.connectCount = 0;\n  this.attach = this.attach.bind(this);\n\n  // We create a connection to whatever port the child process says it's\n  // listening on, so this port is purely advisory.\n  this.attach.suggestedDebugBrkPort = debugPort + 101;\n}\n\nvar DEp = DebugEntry.prototype;\n\nDEp.attach = function attach(child) {\n  this.incomingSink.clear();\n  this.outgoingSink.clear();\n\n  this.startInterceptServer();\n  this.startInspector();\n  this.connectToChildProcess(child);\n};\n\n// The intercept server listens for connections and data from\n// node-inspector (on debugPort) and mediates communication between\n// node-inspector and the child process that we're debugging, so that we\n// can inject our own commands (e.g. \"continue\") and print helpful\n// information to the console when the debugger hits breakpoints. Note\n// that the intercept server survives server restarts, just like\n// node-inspector.\nDEp.startInterceptServer = function startInterceptServer() {\n  var self = this;\n  if (self.interceptServer) {\n    return;\n  }\n\n  self.interceptServer = net.createServer(function(socket) {\n    self.outgoingSink.setTarget(socket);\n    socket.on(\"data\", function(buffer) {\n      self.incomingSink.write(buffer);\n    });\n  }).on(\"error\", function(err) {\n    self.interceptServer = null;\n  }).listen(self.debugPort);\n};\n\nDEp.startInspector = function startInspector() {\n  var self = this;\n  if (self.inspectorProcess) {\n    return;\n  }\n\n  // Port 8080 is the default port that node-inspector uses for its web\n  // server, and port 5858 is the default port that node listens on when\n  // it receives the --debug or --debug-brk flags. Developers familiar\n  // with node-inspector may have http://localhost:8080/debug?port=5858\n  // saved in their browser history already, so let's stick with these\n  // conventions in the default case (unless of course the developer runs\n  // `meteor debug --debug-port <some other port>`).\n  var debugPort = self.debugPort;\n  var webPort = 8080 + debugPort - 5858;\n\n  var proc = spawn(process.execPath, [\n    require.resolve(\"node-inspector/bin/inspector\"),\n    \"--web-port\", \"\" + webPort,\n    \"--debug-port\", \"\" + debugPort\n  ]);\n\n  proc.url = inspector.buildInspectorUrl(\"localhost\", webPort, debugPort);\n\n  // Forward error output to process.stderr, but silence normal output.\n  // proc.stdout.pipe(process.stdout);\n  proc.stderr.pipe(process.stderr);\n\n  proc.on(\"exit\", function(code) {\n    // Restart the process if it died without us explicitly stopping it.\n    if (self.inspectorProcess === proc) {\n      self.inspectorProcess = null;\n      self.startInspector();\n    }\n  });\n\n  self.inspectorProcess = proc;\n};\n\nDEp.connectToChildProcess = function connectToChildProcess(child) {\n  var self = this;\n\n  // Wait for the child process to tell us it's listening on a certain\n  // port (not debugPort!), and create a connection to that port so that\n  // the child process can communicate with node-inspector.\n  child.stderr.on(\"data\", function onData(buffer) {\n    var match = /debugger listening on port (\\d+)/i\n      .exec(buffer.toString(\"utf8\"));\n    if (match) {\n      child.stderr.removeListener(\"data\", onData);\n      connect(+match[1]);\n    }\n  });\n\n  function connect(port) {\n    disconnect();\n\n    self.debugConnection = net.createConnection(port);\n    self.debugConnection.setEncoding(\"utf8\");\n    self.debugConnection.on(\"data\", function(buffer) {\n      protocol.execute(buffer);\n      self.outgoingSink.write(buffer);\n    }).on(\"error\", disconnect);\n\n    var protocol = new Protocol;\n    protocol.onResponse = function onResponse(res) {\n      // Listen for break events so that we can either skip them or print\n      // information to the console about them.\n      if (res.body.type === \"event\" &&\n          res.body.event === \"break\") {\n        var scriptName = res.body.body.script.name;\n        var lineNumber = res.body.body.sourceLine + 1;\n\n        if (self.connectCount > 1 &&\n            scriptName === self.entryPoint) {\n          // If we've restarted the server at least once and the break\n          // event occurred in the entry point file (typically\n          // .meteor/local/build/main.js), send a continue command to skip\n          // this breakpoint automatically, so that the user does not have\n          // to keep manually continuing the debugger every time the\n          // server restarts.\n          sendContinue();\n\n        } else {\n          // Give some indication in the console that server execution has\n          // stopped at a breakpoint.\n          process.stdout.write(\n            \"Paused at \" + scriptName + \":\" + lineNumber + \"\\n\"\n          );\n        }\n      }\n    };\n\n    var sentContinue = false;\n    function sendContinue() {\n      if (! sentContinue) {\n        sentContinue = true;\n        self.incomingSink.write(protocol.serialize({\n          command: \"continue\"\n        }));\n      }\n    }\n\n    if (self.connectCount++ === 0) {\n      process.stdout.write(banner(self.debugPort));\n    } else {\n      // Sometimes (for no good reason) the protocol.onResponse handler\n      // never receives a break event at the very beginning of the\n      // program. This timeout races against that break event to make sure\n      // we send exactly one continue command.\n      setTimeout(sendContinue, 500);\n    }\n\n    self.incomingSink.setTarget(self.debugConnection);\n  }\n\n  function disconnect() {\n    if (self.debugConnection) {\n      self.debugConnection.end();\n      self.debugConnection = null;\n    }\n  }\n};\n\nDEp.stop = function stop() {\n  var proc = this.inspectorProcess;\n  if (proc && proc.kill) {\n    this.inspectorProcess = null;\n    proc.kill();\n  }\n\n  if (this.interceptServer) {\n    this.interceptServer.close();\n    this.interceptServer = null;\n  }\n\n  if (this.debugConnection) {\n    this.debugConnection.end();\n    this.debugConnection = null;\n  }\n};\n\n// A simple wrapper object for writable streams that keeps a backlog of\n// data written before the stream is available, and writes that data to the\n// stream when the stream becomes available.\nfunction BackloggedStreamWriter(target) {\n  assert.ok(this instanceof BackloggedStreamWriter);\n  this.backlog = [];\n  this.target = target || null;\n}\n\nvar BSWp = BackloggedStreamWriter.prototype;\n\nBSWp.write = function write(buffer) {\n  if (this.target) {\n    this.target.write(buffer);\n  } else {\n    this.backlog.push(buffer);\n  }\n};\n\nBSWp.setTarget = function setTarget(target) {\n  if (this.target &&\n      this.target !== target) {\n    this.clear();\n  }\n\n  this.target = target;\n\n  if (target) {\n    var clear = this.clear.bind(this);\n    target.on(\"close\", clear);\n    target.on(\"end\", clear);\n\n    if (this.backlog.length > 0) {\n      _.each(this.backlog.splice(0), this.write, this);\n    }\n  }\n\n  return target;\n};\n\nBSWp.clear = function clear() {\n  this.backlog.length = 0;\n  this.target = null;\n};\n\nfunction banner(debugPort) {\n  debugPort = +(debugPort || 5858);\n  var entry = debugEntries[debugPort];\n  var proc = entry && entry.inspectorProcess;\n  assert.strictEqual(typeof proc.url, \"string\");\n\n  return [\n    \"\",\n    chalk.green([\n      \"Your application is now ready for debugging!\",\n      \"\",\n      \"To debug the server process using a graphical debugging interface, \",\n      \"visit this URL in your web browser:\",\n      \"\"\n    ].join(EOL)),\n    chalk.cyan(\"  \" + proc.url),\n    chalk.green([\n      \"\",\n      \"If your application is paused on a breakpoint but the code is not \",\n      \"visible in the debugger, press the pause (||) button.\",\n      \"\"\n    ].join(EOL)),\n    \"\"\n  ].join(EOL);\n}\n\nfunction stop(debugPort) {\n  debugPort = +(debugPort || 5858);\n  var entry = debugEntries[debugPort];\n  delete debugEntries[debugPort];\n  if (entry) {\n    entry.stop();\n  }\n}\n\nrequire('./tool-env/cleanup.js').onExit(function killAll() {\n  for (var debugPort in debugEntries) {\n    stop(debugPort);\n  }\n  debugEntries.length = 0;\n});\n\nexports.start = start;\nexports.stop = stop;\n"]}