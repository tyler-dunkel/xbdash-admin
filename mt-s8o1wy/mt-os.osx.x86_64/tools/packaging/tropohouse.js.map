{"version":3,"sources":["/tools/packaging/tropohouse.js"],"names":["_","require","files","utils","httpHelpers","archinfo","catalog","Isopack","config","buildmessage","Console","colonConverter","exports","Tropohouse","root","options","self","platform","process","defaultWarehouseDir","env","METEOR_WAREHOUSE_DIR","warehouseBase","inCheckout","getCurrentToolsDir","getHomeDir","pathJoin","_extractAndConvert","packageTarball","forceConvert","targetDirectory","mkdtemp","extractTarGz","readMetadataFromDirectory","metadata","originalVersion","convertedMetadata","convertIsopack","isopackFileData","isopackJsonPath","exists","chmod","writeFile","Buffer","JSON","stringify","mode","unlink","each","builds","unibuildMeta","unibuildJsonPath","path","unibuildJson","parse","readFile","format","Error","convertedUnibuild","convertUnibuild","plugins","pluginMeta","programJsonPath","programJson","convertedPlugin","convertJSImage","extend","prototype","packagePath","packageName","version","relative","isValidPackageName","relativePath","getPackagesDirectoryName","convert","wipeAllPackages","packagesDirectoryName","packageRootDir","escapedPackages","readdir","e","code","latestToolPackageEscaped","latestToolVersion","currentToolPackageEscaped","currentToolVersion","toolsDir","pathBasename","pathDirname","toolVersionDir","toolVersionWithDotAndRandomBit","split","pieces","shift","pop","join","latestMeteorSymlink","startsWith","pathSep","rest","substr","length","packageEscaped","packageDir","versions","test","rm_recursive","installed","architectures","host","downloaded","_alreadyDownloaded","every","requiredArch","mostSpecificMatch","downloadedArches","packageMetadata","pluck","_saveIsopack","isopack","saveToPath","includePreCompilerPluginIsopackVersions","newPackageLinkTarget","randomToken","buildArchitectures","combinedDirectory","symlinkOverSync","_makeDownloader","assertInJob","archesToDownload","filter","debug","buildsToDownload","official","getBuildsForArches","error","tags","refreshCouldHelp","download","assertInCapture","enterJob","title","buildInputDirs","buildTempDirs","packageLinkTarget","push","readlink","pathResolve","url","build","METEOR_WAREHOUSE_URLBASE","replace","getUrlWithResuming","encoding","progress","getCurrentProgressTracker","wait","OfflineError","message","jobHasMessages","buildTempDir","i","_loadUnibuildsFromPath","firstIsopack","freeTempDir","downloadPackagesMissingFromMap","packageMap","serverArchs","serverArchitectures","downloader","downloaders","eachPackage","info","kind","forkJoin","parallel","linkPath","readLinkToMeteorScript","linkToLatestMeteor","scriptLocation","linkToMeteorScript","_getPlatform"],"mappings":"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","file":"tools/packaging/tropohouse.js.map","sourcesContent":["var _ = require(\"underscore\");\nvar files = require('../fs/files.js');\nvar utils = require('../utils/utils.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar archinfo = require('../utils/archinfo.js');\nvar catalog = require('./catalog/catalog.js');\nvar Isopack = require('../isobuild/isopack.js').Isopack;\nvar config = require('../meteor-services/config.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar Console = require('../console/console.js').Console;\nvar colonConverter = require('../utils/colon-converter.js');\n\nexports.Tropohouse = function (root, options) {\n  var self = this;\n  options = options || {};\n\n  self.root = root;\n  self.platform = options.platform || process.platform;\n};\n\n// Return the directory containing our loaded collection of tools, releases and\n// packages. If we're running an installed version, found at $HOME/.meteor, if\n// we are running form a checkout, probably at $CHECKOUT_DIR/.meteor.\nvar defaultWarehouseDir = function () {\n  // a hook for tests, or i guess for users.\n  if (process.env.METEOR_WAREHOUSE_DIR) {\n    return process.env.METEOR_WAREHOUSE_DIR;\n  }\n\n  var warehouseBase = files.inCheckout()\n     ? files.getCurrentToolsDir() : files.getHomeDir();\n  // XXX This will be `.meteor` soon, once we've written the code to make the\n  // tropohouse and warehouse live together in harmony (eg, allowing tropohouse\n  // tools to springboard to warehouse tools).\n  return files.pathJoin(warehouseBase, \".meteor\");\n};\n\n// The default tropohouse is on disk at defaultWarehouseDir(); you can make your\n// own Tropohouse to override these things.\nexports.default = new exports.Tropohouse(defaultWarehouseDir());\n\n/**\n * Extract a package tarball, and on Windows convert file paths and metadata\n * @param  {String} packageTarball path to tarball\n * @param {Boolean} forceConvert Convert paths even on unix, for testing\n * @return {String}                Temporary directory with contents of package\n */\nexports._extractAndConvert = function (packageTarball, forceConvert) {\n  var targetDirectory = files.mkdtemp();\n  files.extractTarGz(packageTarball, targetDirectory, {\n    forceConvert: forceConvert\n  });\n\n  if (process.platform === \"win32\" || forceConvert) {\n    // Packages published before the Windows release might have colons or\n    // other unsavory characters in path names. In hopes of making most of\n    // these packages work on Windows, we will try to automatically convert\n    // them.\n    //\n    // At this location in the code, the metadata inside the isopack is\n    // inconsistent with the actual file paths, since we convert some file\n    // paths inside extractTarGz. Now we need to convert the metadata to match\n    // the files.\n\n    // Step 1. Load the metadata from isopack.json and convert colons in the\n    // file paths. We have already converted the colons in the actual files\n    // while untarring.\n    var {metadata, originalVersion} =\n          Isopack.readMetadataFromDirectory(targetDirectory);\n\n    // By the time that isopack-2 came out (around Meteor 1.2) nobody should be\n    // making colon packages anyway, so let's not waste effort converting (and\n    // moreover, not bother to make sure the code below works for isopack-2).\n    if (originalVersion === 'unipackage-pre2' ||\n        originalVersion === 'isopack-1') {\n      var convertedMetadata = colonConverter.convertIsopack(metadata);\n\n      // Step 2. Write the isopack.json file.  Keep it as isopack-1;\n      // _saveIsopack later will upgrade to isopack-2.\n      var isopackFileData = {};\n      isopackFileData['isopack-1'] = convertedMetadata;\n\n      var isopackJsonPath = files.pathJoin(targetDirectory, \"isopack.json\");\n\n      if (files.exists(isopackJsonPath)) {\n        files.chmod(isopackJsonPath, 0o777);\n      }\n\n      files.writeFile(\n        isopackJsonPath,\n        new Buffer(JSON.stringify(isopackFileData, null, 2), 'utf8'),\n        {mode: 0o444});\n\n      // Step 3. Clean up old unipackage.json file if it exists\n      files.unlink(files.pathJoin(targetDirectory, \"unipackage.json\"));\n\n      // Result: Now we are in a state where the isopack.json file paths are\n      // consistent with the paths in the downloaded tarball.\n\n      // Now, we have to convert the unibuild files in the same way.\n      _.each(convertedMetadata.builds, function (unibuildMeta) {\n        var unibuildJsonPath = files.pathJoin(targetDirectory,\n                                              unibuildMeta.path);\n        var unibuildJson = JSON.parse(files.readFile(unibuildJsonPath));\n\n        if (unibuildJson.format !== \"unipackage-unibuild-pre1\") {\n          throw new Error(\"Unsupported isopack unibuild format: \" +\n                          JSON.stringify(unibuildJson.format));\n        }\n\n        var convertedUnibuild = colonConverter.convertUnibuild(unibuildJson);\n\n        files.chmod(unibuildJsonPath, 0o777);\n        files.writeFile(\n          unibuildJsonPath,\n          new Buffer(JSON.stringify(convertedUnibuild, null, 2), 'utf8'),\n          {mode: 0o444});\n        // Result: Now we are in a state where the unibuild file paths are\n        // consistent with the paths in the downloaded tarball.\n      });\n\n      // Lastly, convert the build plugins, which are in the JSImage format\n      _.each(convertedMetadata.plugins, function (pluginMeta) {\n        var programJsonPath = files.pathJoin(targetDirectory, pluginMeta.path);\n        var programJson = JSON.parse(files.readFile(programJsonPath));\n\n        if (programJson.format !== \"javascript-image-pre1\") {\n          throw new Error(\"Unsupported plugin format: \" +\n                          JSON.stringify(programJson.format));\n        }\n\n        var convertedPlugin = colonConverter.convertJSImage(programJson);\n\n        files.chmod(programJsonPath, 0o777);\n        files.writeFile(\n          programJsonPath,\n          new Buffer(JSON.stringify(convertedPlugin, null, 2), 'utf8'),\n          {mode: 0o444});\n        // Result: Now we are in a state where the build plugin file paths are\n        // consistent with the paths in the downloaded tarball.\n      });\n    }\n  }\n\n  return targetDirectory;\n};\n\n_.extend(exports.Tropohouse.prototype, {\n  // Returns the load path where one can expect to find the package, at a given\n  // version, if we have already downloaded from the package server. Does not\n  // check for contents.\n  //\n  // Returns null if the package name is lexographically invalid.\n  packagePath: function (packageName, version, relative) {\n    var self = this;\n    if (! utils.isValidPackageName(packageName)) {\n      return null;\n    }\n\n    var relativePath = files.pathJoin(\n      config.getPackagesDirectoryName(),\n      colonConverter.convert(packageName),\n      version);\n\n    return relative ? relativePath : files.pathJoin(self.root, relativePath);\n  },\n\n  // Pretty extreme! We call this when we learn that something has changed on\n  // the server in a way that our sync protocol doesn't understand well.\n  wipeAllPackages: function () {\n    var self = this;\n    var packagesDirectoryName = config.getPackagesDirectoryName();\n    var packageRootDir = files.pathJoin(self.root, packagesDirectoryName);\n    var escapedPackages;\n\n    try {\n      // XXX this variable actually can't be accessed from outside this\n      // line, this is definitely a bug\n      escapedPackages = files.readdir(packageRootDir);\n    } catch (e) {\n      // No packages at all? We're done.\n      if (e.code === 'ENOENT') {\n        return;\n      }\n      throw e;\n    }\n\n    // We want to be careful not to break the 'meteor' symlink inside the\n    // tropohouse. Hopefully nobody deleted/modified that package!\n    var latestToolPackageEscaped = null;\n    var latestToolVersion = null;\n    var currentToolPackageEscaped = null;\n    var currentToolVersion = null;\n    // Warning: we can't examine release.current here, because we might be\n    // currently processing release.load!\n    if (!files.inCheckout()) {\n      // toolsDir is something like:\n      // /home/user/.meteor/packages/meteor-tool/.1.0.17.ut200e++os.osx.x86_64+web.browser+web.cordova/meteor-tool-os.osx.x86_64\n      // or /C/Users/user/AppData/Local/Temp/mt-17618kk/tropohouse/packages/meteor-tool/33.0.1/mt-os.windows.x86_32 on Windows\n      var toolsDir = files.getCurrentToolsDir();\n      // eg, 'meteor-tool'\n      currentToolPackageEscaped =\n        files.pathBasename(files.pathDirname(files.pathDirname(toolsDir)));\n      // eg, '.1.0.17-xyz1.2.ut200e++os.osx.x86_64+web.browser+web.cordova' on Unix\n      // or '33.0.1' on Windows\n      var toolVersionDir = files.pathBasename(files.pathDirname(toolsDir));\n\n      if (process.platform !== 'win32') {\n        var toolVersionWithDotAndRandomBit = toolVersionDir.split('++')[0];\n        var pieces = toolVersionWithDotAndRandomBit.split('.');\n        pieces.shift();\n        pieces.pop();\n        currentToolVersion = pieces.join('.');\n      } else {\n        currentToolVersion = toolVersionDir;\n      }\n\n      var latestMeteorSymlink = self.latestMeteorSymlink();\n      if (latestMeteorSymlink.startsWith(packagesDirectoryName +\n                                         files.pathSep)) {\n        var rest = latestMeteorSymlink.substr(\n          packagesDirectoryName.length + files.pathSep.length);\n\n        pieces = rest.split(files.pathSep);\n        latestToolPackageEscaped = pieces[0];\n        latestToolVersion = pieces[1];\n      }\n    }\n\n    _.each(escapedPackages, function (packageEscaped) {\n      var packageDir = files.pathJoin(packageRootDir, packageEscaped);\n      var versions;\n\n      try {\n        versions = files.readdir(packageDir);\n      } catch (e) {\n        // Somebody put a file in here or something? Whatever, ignore.\n        if (e.code === 'ENOENT' || e.code === 'ENOTDIR') {\n          return;\n        }\n        throw e;\n      }\n      _.each(versions, function (version) {\n        // Is this a pre-0.9.0 \"warehouse\" version with a hash name?\n        if (/^[a-f0-9]{3,}$/.test(version)) {\n          return;\n        }\n\n        // Skip the currently-latest tool (ie, don't break top-level meteor\n        // symlink). This includes both the symlink with its name and the thing\n        // it points to.\n        if (packageEscaped === latestToolPackageEscaped &&\n            (version === latestToolVersion ||\n             version.startsWith('.' + latestToolVersion + '.'))) {\n          return;\n        }\n\n        // Skip the currently-executing tool (ie, don't break the current\n        // operation).\n        if (packageEscaped === currentToolPackageEscaped &&\n            (version === currentToolVersion ||\n             version.startsWith('.' + currentToolVersion + '.'))) {\n          return;\n        }\n\n        files.rm_recursive(files.pathJoin(packageDir, version));\n      });\n    });\n  },\n  // Returns true if the given package at the given version exists on disk, or\n  // false otherwise. Takes in the following:\n  //  - packageName: name of the package\n  //  - version: version\n  //  - architectures: (optional) array of architectures. Defaults to\n  //    archinfo.host().\n  installed: function (options) {\n    var self = this;\n    if (!options.packageName) {\n      throw Error(\"Missing required argument: packageName\");\n    }\n    if (!options.version) {\n      throw Error(\"Missing required argument: version\");\n    }\n    var architectures = options.architectures || [archinfo.host()];\n\n    var downloaded = self._alreadyDownloaded({\n      packageName: options.packageName,\n      version: options.version\n    });\n\n    return _.every(architectures, function (requiredArch) {\n      return archinfo.mostSpecificMatch(requiredArch, downloaded);\n    });\n  },\n\n  // Given a package name and version, returns the architectures for\n  // which we have downloaded this package\n  //\n  // Throws if the symlink cannot be read for any reason other than\n  // ENOENT/\n  _alreadyDownloaded: function (options) {\n    var self = this;\n    var packageName = options.packageName;\n    var version = options.version;\n    if (!options.packageName) {\n      throw Error(\"Missing required argument: packageName\");\n    }\n    if (!options.version) {\n      throw Error(\"Missing required argument: version\");\n    }\n\n\n    // Figure out what arches (if any) we have loaded for this package version\n    // already.\n    var packagePath = self.packagePath(packageName, version);\n    var downloadedArches = [];\n\n    // Find out which arches we have by reading the isopack metadata\n    var {metadata: packageMetadata} =\n          Isopack.readMetadataFromDirectory(packagePath);\n\n    // packageMetadata is null if there is no package at packagePath\n    if (packageMetadata) {\n      downloadedArches = _.pluck(packageMetadata.builds, \"arch\");\n    }\n\n    return downloadedArches;\n  },\n\n  _saveIsopack: function (isopack, packageName) {\n    // XXX does this actually need the name as an argument or can we just get\n    // it from isopack?\n\n    var self = this;\n\n    if (self.platform === \"win32\") {\n      isopack.saveToPath(self.packagePath(packageName, isopack.version), {\n        includePreCompilerPluginIsopackVersions: true\n      });\n    } else {\n      // Note: wipeAllPackages depends on this filename structure\n      // On Mac and Linux, we used to use a filename structure that used the\n      // names of symlinks to determine which builds we have downloaded. We no\n      // longer need this because we now parse package metadata, but we still\n      // need to write the symlinks correctly so that old meteor tools can\n      // still read newly downloaded packages.\n      var newPackageLinkTarget = '.' + isopack.version + '.' +\n        utils.randomToken() + '++' + isopack.buildArchitectures();\n\n      var combinedDirectory = self.packagePath(\n        packageName, newPackageLinkTarget);\n\n      isopack.saveToPath(combinedDirectory, {\n        includePreCompilerPluginIsopackVersions: true\n      });\n\n      files.symlinkOverSync(newPackageLinkTarget,\n        self.packagePath(packageName, isopack.version));\n    }\n  },\n\n  // Given a package name, version, and required architectures, checks to make\n  // sure that we have the package downloaded at the requested arch. If we do,\n  // returns null.\n  //\n  // Otherwise, if the catalog has no information about appropriate builds,\n  // registers a buildmessage error and returns null.\n  //\n  // Otherwise, returns a 'downloader' object with keys packageName, version,\n  // and download; download is a method which should be called in a buildmessage\n  // capture which actually downloads the package (registering any errors with\n  // buildmessage).\n  _makeDownloader: function (options) {\n    var self = this;\n    buildmessage.assertInJob();\n\n    if (!options.packageName) {\n      throw Error(\"Missing required argument: packageName\");\n    }\n    if (!options.version) {\n      throw Error(\"Missing required argument: version\");\n    }\n    if (!options.architectures) {\n      throw Error(\"Missing required argument: architectures\");\n    }\n\n    var packageName = options.packageName;\n    var version = options.version;\n\n    // Look up which arches we have already downloaded\n    var downloadedArches = self._alreadyDownloaded({\n      packageName: packageName,\n      version: version\n    });\n\n    var archesToDownload = _.filter(options.architectures, function (requiredArch) {\n      return !archinfo.mostSpecificMatch(requiredArch, downloadedArches);\n    });\n\n    // Have everything we need? Great.\n    if (!archesToDownload.length) {\n      Console.debug(\"Local package version is up-to-date:\", packageName + \"@\" + version);\n      return null;\n    }\n\n    // Since we are downloading from the server (and we've already done the\n    // local package check), we can use the official catalog here. (This is\n    // important, since springboarding calls this function before the complete\n    // catalog is ready!)\n    var buildsToDownload = catalog.official.getBuildsForArches(\n      packageName, version, archesToDownload);\n    if (! buildsToDownload) {\n      buildmessage.error(\n        \"No compatible binary build found for this package. \" +\n        \"Contact the package author and ask them to publish it \" +\n        \"for your platform.\", {tags: { refreshCouldHelp: true }});\n      return null;\n    }\n\n    var packagePath = self.packagePath(packageName, version);\n    var download = function download () {\n      buildmessage.assertInCapture();\n\n      Console.debug(\"Downloading missing local versions of package\",\n                    packageName + \"@\" + version, \":\", archesToDownload);\n\n      buildmessage.enterJob({\n        title: \"downloading \" + packageName + \"@\" + version + \"...\"\n      }, function() {\n        var buildInputDirs = [];\n        var buildTempDirs = [];\n        var packageLinkTarget = null;\n\n        // Find the previous actual directory of the package\n        if (self.platform === \"win32\") {\n          // On Windows, we don't use symlinks.\n          // If there's already a package in the tropohouse, start with it.\n          if (files.exists(packagePath)) {\n            buildInputDirs.push(packagePath);\n          }\n        } else {\n          // On posix, we have a symlink structure. Get the target of the\n          // symlink so that we can delete it later.\n          try {\n            packageLinkTarget = files.readlink(packagePath);\n          } catch (e) {\n            // Complain about anything other than \"we don't have it at all\".\n            // This includes \"not a symlink\": The main reason this would not be\n            // a symlink is if it's a directory containing a pre-0.9.0 package\n            // (ie, this is a warehouse package not a tropohouse package). But\n            // the versions should not overlap: warehouse versions are truncated\n            // SHAs whereas tropohouse versions should be semver-like.\n            if (e.code !== 'ENOENT') {\n              throw e;\n            }\n          }\n\n          // If there's already a package in the tropohouse, start with it.\n          if (packageLinkTarget) {\n            buildInputDirs.push(\n              files.pathResolve(files.pathDirname(packagePath),\n                                packageLinkTarget));\n          }\n        }\n\n        // XXX how does concurrency work here?  we could just get errors if we\n        // try to rename over the other thing?  but that's the same as in\n        // warehouse?\n        _.each(buildsToDownload, ({ build: { url }}) => {\n          const packageTarball = buildmessage.enterJob({\n            title: \"downloading \" + packageName + \"@\" + version + \"...\"\n          }, () => {\n            try {\n              // Override the download domain name and protocol if METEOR_WAREHOUSE_URLBASE\n              // provided.\n              if (process.env.METEOR_WAREHOUSE_URLBASE) {\n                url = url.replace(\n                  /^[a-zA-Z]+:\\/\\/[^\\/]+/,\n                  process.env.METEOR_WAREHOUSE_URLBASE\n                );\n              }\n\n              return httpHelpers.getUrlWithResuming({\n                url: url,\n                encoding: null,\n                progress: buildmessage.getCurrentProgressTracker(),\n                wait: false\n              });\n\n            } catch (e) {\n              if (! (e instanceof files.OfflineError)) {\n                throw e;\n              }\n              buildmessage.error(e.error.message);\n            }\n          });\n\n          if (buildmessage.jobHasMessages()) {\n            return;\n          }\n\n          buildmessage.enterJob({\n            title: \"extracting \" + packageName + \"@\" + version + \"...\"\n          }, () => {\n            const buildTempDir = exports._extractAndConvert(packageTarball);\n            buildInputDirs.push(buildTempDir);\n            buildTempDirs.push(buildTempDir);\n          });\n        });\n\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n\n        buildmessage.enterJob({\n          title: \"loading \" + packageName + \"@\" + version + \"...\"\n        }, () => {\n          // We need to turn our builds into a single isopack.\n          var isopack = new Isopack();\n          _.each(buildInputDirs, (buildTempDir, i) => {\n            isopack._loadUnibuildsFromPath(packageName, buildTempDir, {\n              firstIsopack: i === 0,\n            });\n          });\n\n          self._saveIsopack(isopack, packageName, version);\n        });\n\n        // Delete temp directories now (asynchronously).\n        _.each(buildTempDirs, function (buildTempDir) {\n          files.freeTempDir(buildTempDir);\n        });\n\n        // Clean up old version.\n        if (packageLinkTarget) {\n          files.rm_recursive(self.packagePath(packageName, packageLinkTarget));\n        }\n      });\n    };\n\n    return {\n      packageName: packageName,\n      version: version,\n      download: download\n    };\n  },\n\n\n  // Takes in a PackageMap object. Downloads any versioned packages we don't\n  // already have.\n  //\n  // Reports errors via buildmessage.\n  downloadPackagesMissingFromMap: function (packageMap, options) {\n    var self = this;\n    buildmessage.assertInCapture();\n    options = options || {};\n    var serverArchs = options.serverArchitectures || [archinfo.host()];\n\n    var downloader;\n    var downloaders = [];\n    packageMap.eachPackage(function (packageName, info) {\n      if (info.kind !== 'versioned') {\n        return;\n      }\n      buildmessage.enterJob(\n        \"checking for \" + packageName + \"@\" + info.version,\n        function () {\n          downloader = self._makeDownloader({\n            packageName: packageName,\n            version: info.version,\n            architectures: serverArchs\n          });\n          if (buildmessage.jobHasMessages()) {\n            downloaders = null;\n            return;\n          }\n          if (downloader && downloaders) {\n            downloaders.push(downloader);\n          }\n        }\n      );\n    });\n\n    // Did anything fail? Don't download anything.\n    if (! downloaders) {\n      return;\n    }\n\n    // Nothing to download? Great.\n    if (! downloaders.length) {\n      return;\n    }\n\n    // Just one package to download? Use a good message.\n    if (downloaders.length === 1) {\n      downloader = downloaders[0];\n      buildmessage.enterJob(\n        \"downloading \" + downloader.packageName + \"@\" + downloader.version,\n        function () {\n          downloader.download();\n        }\n      );\n      return;\n    }\n\n    // Download multiple packages in parallel.\n    // XXX use a better progress bar that shows how many you've\n    // finished downloading.\n    buildmessage.forkJoin({\n      title: 'downloading ' + downloaders.length + ' packages',\n      parallel: true\n    }, downloaders, function (downloader) {\n      downloader.download();\n    });\n  },\n\n  latestMeteorSymlink: function () {\n    var self = this;\n    var linkPath = files.pathJoin(self.root, 'meteor');\n    return files.readLinkToMeteorScript(linkPath, self.platform);\n  },\n\n  linkToLatestMeteor: function (scriptLocation) {\n    var self = this;\n    var linkPath = files.pathJoin(self.root, 'meteor');\n    files.linkToMeteorScript(scriptLocation, linkPath, self.platform);\n  },\n\n  _getPlatform: function () {\n    return this.platform;\n  }\n});\n"]}