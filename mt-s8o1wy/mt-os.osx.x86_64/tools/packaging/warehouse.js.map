{"version":3,"sources":["/tools/packaging/warehouse.js"],"names":["os","require","_","files","httpHelpers","fiberHelpers","WAREHOUSE_URLBASE","process","env","METEOR_WAREHOUSE_URLBASE","warehouse","exports","extend","NoSuchReleaseError","getWarehouseDir","METEOR_WAREHOUSE_DIR","convertToStandardPath","usesWarehouse","Error","pathJoin","getHomeDir","getToolsDir","version","getToolsFreshFile","_latestReleaseSymlinkPath","_latestToolsSymlinkPath","ensureReleaseExistsAndReturnManifest","release","quiet","_populateWarehouseForRelease","packageExistsInWarehouse","name","exists","getPackageFreshFile","toolsExistsInWarehouse","realReleaseExistsInWarehouse","releasesDir","releaseManifestPath","manifest","JSON","parse","readFile","redPill","e","_calculateNewPiecesForRelease","releaseManifest","newPieces","tools","packages","toolsVersion","needsDownload","each","isEmpty","_packageUpdatesMessage","packageNames","lines","width","currentLine","length","push","join","releaseVersion","showInstalling","mkdir_p","releaseAlreadyExists","releaseManifestText","METEOR_TEST_FAIL_RELEASE_DOWNLOAD","OfflineError","result","request","response","statusCode","body","console","log","keys","sort","downloadToolsToWarehouse","_platform","error","symlink","packagesToDownload","packageInfo","downloadPackagesToWarehouse","notices","getUrl","writeFile","unlinkIfExists","file","unlink","code","platform","warehouseDirectory","dontWriteFreshFile","toolsTarballFilename","toolsTarballPath","toolsTarball","url","encoding","extractTarGz","parallelEach","packageDir","packageUrl","tarball","getUrlWithResuming","arch","type"],"mappings":"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","file":"tools/packaging/warehouse.js.map","sourcesContent":["// This file is used to access the \"warehouse\" of pre-0.9.0 releases. This code\n// is now legacy, but we keep it around so that you can still use the same\n// `meteor` entry point to run pre-0.9.0 and post-0.9.0 releases, for now. All\n// it knows how to do is download old releases and explain to main.js how to\n// exec them.\n//\n// Because of this, we do have to be careful that the files used by this code\n// and the files used by tropohouse.js (the modern version of the warehouse)\n// don't overlap. tropohouse does not use tools or releases directorys, and\n// while they both have packages directories with similar structures, the\n// version names should not overlap: warehouse versions are SHAs and tropohouse\n// versions are semvers.  Additionally, while they do both use the 'meteor'\n// symlink at the top level, there's no actual code in this file to write that\n// symlink (it was just created by the bootstrap tarball release process).\n\n\n/// We store a \"warehouse\" of tools, releases and packages on\n/// disk. This warehouse is populated from our servers, as needed.\n///\n/// Directory structure:\n///\n///     meteor (relative path symlink to tools/latest/bin/meteor)\n///     tools/ (not in checkout, since we run against checked-out code)\n///       latest/ (relative path symlink to latest VERSION/ tools directory)\n///       VERSION/\n///     releases/\n///       latest (relative path symlink to latest x.y.z.release.json)\n///       x.y.z.release.json\n///       x.y.z.notices.json\n///     packages/\n///       foo/\n///         VERSION/\n///\n/// The warehouse is not used at all when running from a\n/// checkout. Only local packages will be loaded (from\n/// CHECKOUT/packages or within a directory in the METEOR_PACKAGE_DIRS\n/// environment variable). The setup of that is handled by release.js.\n\nvar os = require(\"os\");\nvar _ = require(\"underscore\");\n\nvar files = require('../fs/files.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\n\n// Use `METEOR_WAREHOUSE_URLBASE` to override the default warehouse\n// url base. \nvar WAREHOUSE_URLBASE = process.env.METEOR_WAREHOUSE_URLBASE || 'https://warehouse.meteor.com';\n\nvar warehouse = exports;\n_.extend(warehouse, {\n  // An exception meaning that you asked for a release that doesn't\n  // exist.\n  NoSuchReleaseError: function () {\n  },\n\n  // Return our loaded collection of tools, releases and\n  // packages. If we're running an installed version, found at\n  // $HOME/.meteor.\n  getWarehouseDir: function () {\n    // a hook for tests, or i guess for users.\n    if (process.env.METEOR_WAREHOUSE_DIR) {\n      return files.convertToStandardPath(process.env.METEOR_WAREHOUSE_DIR);\n    }\n\n    // This function should never be called unless we have a warehouse\n    // (an installed version, or with process.env.METEOR_WAREHOUSE_DIR\n    // set)\n    if (!files.usesWarehouse()) {\n      throw new Error(\"There's no warehouse in a git checkout\");\n    }\n\n    return files.pathJoin(files.getHomeDir(), '.meteor');\n  },\n\n  getToolsDir: function (version) {\n    return files.pathJoin(warehouse.getWarehouseDir(), 'tools', version);\n  },\n\n  getToolsFreshFile: function (version) {\n    return files.pathJoin(warehouse.getWarehouseDir(), 'tools', version, '.fresh');\n  },\n\n  _latestReleaseSymlinkPath: function () {\n    return files.pathJoin(warehouse.getWarehouseDir(), 'releases', 'latest');\n  },\n\n  _latestToolsSymlinkPath: function () {\n    return files.pathJoin(warehouse.getWarehouseDir(), 'tools', 'latest');\n  },\n\n  // Ensure the passed release version is stored in the local\n  // warehouse and return its parsed manifest.\n  //\n  // If 'quiet' is true, don't print anything as we do it.\n  //\n  // Throws:\n  // - files.OfflineError if the release isn't cached locally and we\n  //   are offline.\n  // - warehouse.NoSuchReleaseError if we talked to the server and it\n  //   told us that no release named 'release' exists.\n  ensureReleaseExistsAndReturnManifest: function (release, quiet) {\n    if (!files.usesWarehouse()) {\n      throw new Error(\"Not in a warehouse but requesting a manifest!\");\n    }\n\n    return warehouse._populateWarehouseForRelease(release, !quiet);\n  },\n\n  packageExistsInWarehouse: function (name, version) {\n    // A package exists if its directory exists. (We used to look for a\n    // particular file name (\"package.js\") inside the directory, but since we\n    // always install packages by untarring to a temporary directory and\n    // renaming atomically, we shouldn't worry about partial packages.)\n    return files.exists(\n      files.pathJoin(warehouse.getWarehouseDir(), 'packages', name, version));\n  },\n\n  getPackageFreshFile: function (name, version) {\n    return files.pathJoin(\n      warehouse.getWarehouseDir(),\n      'packages', name, version, '.fresh');\n  },\n\n  toolsExistsInWarehouse: function (version) {\n    return files.exists(warehouse.getToolsDir(version));\n  },\n\n  // Returns true if we already have the release file on disk, and it's not a\n  // fake \"red pill\" release --- we should never springboard to those!\n  realReleaseExistsInWarehouse: function (version) {\n    var releasesDir = files.pathJoin(warehouse.getWarehouseDir(), 'releases');\n    var releaseManifestPath = files.pathJoin(releasesDir,\n                                        version + '.release.json');\n    try {\n      var manifest = JSON.parse(files.readFile(releaseManifestPath, 'utf8'));\n      return !manifest.redPill;\n    } catch (e) {\n      return false;\n    }\n  },\n\n  _calculateNewPiecesForRelease: function (releaseManifest) {\n    // newPieces.tools and newPieces.packages[PACKAGE] are either falsey (if\n    // nothing is new), or an object with keys \"version\" and bool\n    // \"needsDownload\". \"needsDownload\" is true if the piece is not in the\n    // warehouse, and is false if it's in the warehouse but has never been used.\n    var newPieces = {\n      tools: null,\n      packages: {}\n    };\n\n    // populate warehouse with tools version for this release\n    var toolsVersion = releaseManifest.tools;\n    if (!warehouse.toolsExistsInWarehouse(toolsVersion)) {\n      newPieces.tools = {version: toolsVersion, needsDownload: true};\n    } else if (files.exists(warehouse.getToolsFreshFile(toolsVersion))) {\n      newPieces.tools = {version: toolsVersion, needsDownload: false};\n    }\n\n    _.each(releaseManifest.packages, function (version, name) {\n      if (!warehouse.packageExistsInWarehouse(name, version)) {\n        newPieces.packages[name] = {version: version, needsDownload: true};\n      } else if (files.exists(warehouse.getPackageFreshFile(name, version))) {\n        newPieces.packages[name] = {version: version, needsDownload: false};\n      }\n    });\n    if (newPieces.tools || !_.isEmpty(newPieces.packages)) {\n      return newPieces;\n    }\n    return null;\n  },\n\n  _packageUpdatesMessage: function (packageNames) {\n    var lines = [];\n    var width = 80;  // see utils.printPackageList for why we hardcode this\n    var currentLine = ' * Package updates:';\n    _.each(packageNames, function (name) {\n      if (currentLine.length + 1 + name.length <= width) {\n        currentLine += ' ' + name;\n      } else {\n        lines.push(currentLine);\n        currentLine = '   ' + name;\n      }\n    });\n    lines.push(currentLine);\n    return lines.join('\\n');\n  },\n\n  // fetches the manifest file for the given release version. also fetches\n  // all of the missing versioned packages referenced from the release manifest\n  // @param releaseVersion {String} eg \"0.1\"\n  _populateWarehouseForRelease: function (releaseVersion, showInstalling) {\n    var releasesDir = files.pathJoin(warehouse.getWarehouseDir(), 'releases');\n    files.mkdir_p(releasesDir, 0o755);\n    var releaseManifestPath = files.pathJoin(releasesDir,\n                                             releaseVersion + '.release.json');\n\n    // If the release already exists, we don't have to do anything, except maybe\n    // print a message if this release has never been used before (and we only\n    // have it due to a background download).\n    var releaseAlreadyExists = true;\n    try {\n      var releaseManifestText = files.readFile(releaseManifestPath);\n    } catch (e) {\n      releaseAlreadyExists = false;\n    }\n\n    // Now get release manifest if we don't already have it, but only write it\n    // after we're done writing packages\n    if (!releaseAlreadyExists) {\n\n      // For automated self-test. If METEOR_TEST_FAIL_RELEASE_DOWNLOAD\n      // is 'offline' or 'not-found', make release downloads fail.\n      if (process.env.METEOR_TEST_FAIL_RELEASE_DOWNLOAD === \"offline\") {\n        throw new files.OfflineError(new Error(\"scripted failure for tests\"));\n      }\n      if (process.env.METEOR_TEST_FAIL_RELEASE_DOWNLOAD === \"not-found\") {\n        throw new warehouse.NoSuchReleaseError;\n      }\n\n      try {\n        var result = httpHelpers.request(\n          WAREHOUSE_URLBASE + \"/releases/\" + releaseVersion + \".release.json\");\n      } catch (e) {\n        throw new files.OfflineError(e);\n      }\n\n      if (result.response.statusCode !== 200) {\n        // We actually got some response, so we're probably online and we\n        // just can't find the release.\n        throw new warehouse.NoSuchReleaseError;\n      }\n\n      releaseManifestText = result.body;\n    }\n\n    var releaseManifest = JSON.parse(releaseManifestText);\n\n    var newPieces = warehouse._calculateNewPiecesForRelease(releaseManifest);\n\n    if (releaseAlreadyExists && !newPieces) {\n      return releaseManifest;\n    }\n\n    if (newPieces && showInstalling) {\n      console.log(\"Installing Meteor %s:\", releaseVersion);\n      if (newPieces.tools) {\n        console.log(\" * 'meteor' build tool (version %s)\",\n                    newPieces.tools.version);\n      }\n      if (!_.isEmpty(newPieces.packages)) {\n        console.log(warehouse._packageUpdatesMessage(\n          _.keys(newPieces.packages).sort()));\n      }\n      console.log();\n    }\n\n    if (!releaseAlreadyExists) {\n      if (newPieces && newPieces.tools && newPieces.tools.needsDownload) {\n        try {\n          warehouse.downloadToolsToWarehouse(\n            newPieces.tools.version,\n            warehouse._platform(),\n            warehouse.getWarehouseDir());\n        } catch (e) {\n          if (showInstalling) {\n            console.error(\"Failed to load tools for release \" + releaseVersion);\n          }\n          throw e;\n        }\n\n        // If the 'tools/latest' symlink doesn't exist, this must be the first\n        // legacy tools we've downloaded into this warehouse. Add the symlink,\n        // so that the tools doesn't get confused when it tries to readlink it.\n        if (!files.exists(warehouse._latestToolsSymlinkPath())) {\n          files.symlink(newPieces.tools.version,\n                         warehouse._latestToolsSymlinkPath());\n        }\n      }\n\n      var packagesToDownload = {};\n      _.each(newPieces && newPieces.packages, function (packageInfo, name) {\n        if (packageInfo.needsDownload) {\n          packagesToDownload[name] = packageInfo.version;\n        }\n      });\n      if (!_.isEmpty(packagesToDownload)) {\n        try {\n          warehouse.downloadPackagesToWarehouse(packagesToDownload,\n                                                warehouse._platform(),\n                                                warehouse.getWarehouseDir());\n        } catch (e) {\n          if (showInstalling) {\n            console.error(\"Failed to load packages for release \" +\n                          releaseVersion);\n          }\n          throw e;\n        }\n      }\n\n      // try getting the releases's notices. only blessed releases have one, so\n      // if we can't find it just proceed.\n      try {\n        var notices = httpHelpers.getUrl(\n          WAREHOUSE_URLBASE + \"/releases/\" + releaseVersion + \".notices.json\");\n\n        // Real notices are valid JSON.\n        JSON.parse(notices);\n\n        files.writeFile(\n          files.pathJoin(releasesDir, releaseVersion + '.notices.json'),\n          notices);\n      } catch (e) {\n        // no notices, proceed\n      }\n\n      // Now that we have written all packages, it's safe to write the\n      // release manifest.\n      files.writeFile(releaseManifestPath, releaseManifestText);\n\n      // If the 'releases/latest' symlink doesn't exist, this must be the first\n      // legacy release manifest we've downloaded into this warehouse. Add the\n      // symlink, so that the tools doesn't get confused when it tries to\n      // readlink it.\n      if (!files.exists(warehouse._latestReleaseSymlinkPath())) {\n        files.symlink(releaseVersion + '.release.json',\n                       warehouse._latestReleaseSymlinkPath());\n      }\n    }\n\n    // Finally, clear the \"fresh\" files for all the things we just printed\n    // (whether or not we just downloaded them). (Don't do this if we didn't\n    // print the installing message!)\n    if (newPieces && showInstalling) {\n      var unlinkIfExists = function (file) {\n        try {\n          files.unlink(file);\n        } catch (e) {\n          // If two processes populate the warehouse in parallel, the other\n          // process may have deleted the fresh file. That's OK!\n          if (e.code === \"ENOENT\") {\n            return;\n          }\n          throw e;\n        }\n      };\n\n      if (newPieces.tools) {\n        unlinkIfExists(warehouse.getToolsFreshFile(newPieces.tools.version));\n      }\n      _.each(newPieces.packages, function (packageInfo, name) {\n        unlinkIfExists(\n          warehouse.getPackageFreshFile(name, packageInfo.version));\n      });\n    }\n\n    return releaseManifest;\n  },\n\n  // this function is also used by bless-release.js\n  downloadToolsToWarehouse: function (\n      toolsVersion, platform, warehouseDirectory, dontWriteFreshFile) {\n    // XXX this sucks. We store all the tarballs in memory. This is huge.\n    // We should instead stream packages in parallel. Since the node stream\n    // API is in flux, we should probably wait a bit.\n    // http://blog.nodejs.org/2012/12/20/streams2/\n\n    var toolsTarballFilename =\n          \"meteor-tools-\" + toolsVersion + \"-\" + platform + \".tar.gz\";\n    var toolsTarballPath = \"/tools/\" + toolsVersion + \"/\"\n          + toolsTarballFilename;\n    var toolsTarball = httpHelpers.getUrl({\n      url: WAREHOUSE_URLBASE + toolsTarballPath,\n      encoding: null\n    });\n    files.extractTarGz(\n      toolsTarball, files.pathJoin(warehouseDirectory, 'tools', toolsVersion));\n    if (!dontWriteFreshFile) {\n      files.writeFile(warehouse.getToolsFreshFile(toolsVersion), '');\n    }\n  },\n\n  // this function is also used by bless-release.js\n  downloadPackagesToWarehouse: function (packagesToDownload,\n                                         platform,\n                                         warehouseDirectory,\n                                         dontWriteFreshFile) {\n    fiberHelpers.parallelEach(\n      packagesToDownload, function (version, name) {\n        var packageDir = files.pathJoin(\n          warehouseDirectory, 'packages', name, version);\n        var packageUrl = WAREHOUSE_URLBASE + \"/packages/\" + name +\n              \"/\" + version +\n              \"/\" + name + '-' + version + \"-\" + platform + \".tar.gz\";\n\n        var tarball = httpHelpers.getUrlWithResuming({\n          url: packageUrl,\n          encoding: null\n        });\n\n        files.extractTarGz(tarball, packageDir);\n\n        if (!dontWriteFreshFile) {\n          files.writeFile(warehouse.getPackageFreshFile(name, version), '');\n        }\n      });\n  },\n\n  _platform: function () {\n    // Normalize from Node \"os.arch()\" to \"uname -m\".\n    var arch = os.arch();\n    if (arch === \"ia32\") {\n      arch = \"i686\";\n    } else if (arch === \"x64\") {\n      arch = \"x86_64\";\n    } else {\n      throw new Error(\"Unsupported architecture \" + arch);\n    }\n    return os.type() + \"_\" + arch;\n  }\n});\n"]}