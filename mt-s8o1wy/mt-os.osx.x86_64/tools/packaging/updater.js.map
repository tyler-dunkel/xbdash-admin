{"version":3,"sources":["/tools/packaging/updater.js"],"names":["_","require","runLog","catalog","archinfo","isopack","buildmessage","Console","auth","files","tropohouse","release","packageMapModule","checkInProgress","exports","tryToDownloadUpdate","options","checkForUpdate","showBanner","printErrors","firstCheck","tryRevokeOldTokens","timeout","official","refresh","err","debug","current","isProperRelease","maybeShowBanners","lastShowTimes","shouldShow","key","maxAge","now","Date","undefined","lastShow","age","releaseData","getCatalogReleaseData","banner","bannerDate","lastUpdated","shouldShowBanner","name","log","text","setBannerShownDate","forced","catalogUtils","track","getReleaseTrack","patchReleaseVersion","patchRelease","getReleaseVersion","recommended","patchKey","displayRelease","currentReleaseOrderKey","orderKey","futureReleases","getSortedRecommendedReleaseVersions","length","futureReleaseKey","updateMeteorToolSymlink","latestReleaseVersion","getDefaultReleaseVersion","latestRelease","version","Error","tool","latestReleaseToolParts","split","latestReleaseToolPackage","latestReleaseToolVersion","relativeToolPath","packagePath","localLatestReleaseLink","latestMeteorSymlink","startsWith","pathSep","packageMap","PackageMap","fromReleaseVersion","messages","capture","downloadPackagesMissingFromMap","hasMessages","printMessages","toolIsopack","Isopack","initFromPath","toolRecord","findWhere","toolsOnDisk","arch","host","linkToLatestMeteor","pathJoin","path"],"mappings":"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","file":"tools/packaging/updater.js.map","sourcesContent":["var _ = require('underscore');\n\nvar runLog = require('../runners/run-log.js');\nvar catalog = require('./catalog/catalog.js');\nvar archinfo = require('../utils/archinfo.js');\nvar isopack = require('../isobuild/isopack.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar Console = require('../console/console.js').Console;\nvar auth = require('../meteor-services/auth.js');\nvar files = require('../fs/files.js');\n\nvar tropohouse = require('./tropohouse.js');\nvar release = require('./release.js');\nvar packageMapModule = require('./package-map.js');\n\n/**\n * Check to see if an update is available. If so, download and install\n * it before returning.\n *\n * options: showBanner\n */\nvar checkInProgress = false;\nexports.tryToDownloadUpdate = function (options) {\n  options = options || {};\n  // Don't run more than one check simultaneously. It should be\n  // harmless but having two downloads happening simultaneously (and\n  // two sets of messages being printed) would be confusing.\n  if (checkInProgress) {\n    return;\n  }\n  checkInProgress = true;\n  checkForUpdate(!! options.showBanner, !! options.printErrors);\n  checkInProgress = false;\n};\n\nvar firstCheck = true;\n\nvar checkForUpdate = function (showBanner, printErrors) {\n  // While we're doing background stuff, try to revoke any old tokens in our\n  // session file.\n  auth.tryRevokeOldTokens({ timeout: 15 * 1000 });\n\n  if (firstCheck) {\n    // We want to avoid a potential race condition here, because we run an\n    // update almost immediately at run.  We don't want to drop the resolver\n    // cache; that would be slow.  \"meteor run\" itself should have run a refresh\n    // anyway.  So, the first time, we just skip the remote catalog sync.  But\n    // we do want to do the out-of-date release checks, so we can't just delay\n    // the first update cycle.\n    firstCheck = false;\n  } else {\n    try {\n      catalog.official.refresh();\n    } catch (err) {\n      Console.debug(\"Failed to refresh catalog, ignoring error\", err);\n      return;\n    }\n  }\n\n  if (!release.current.isProperRelease()) {\n    return;\n  }\n\n  maybeShowBanners();\n};\n\nvar lastShowTimes = {};\n\nvar shouldShow = function (key, maxAge) {\n  var now = +(new Date);\n\n  if (maxAge === undefined) {\n    maxAge = 12 * 60 * 60 * 1000;\n  }\n\n  var lastShow = lastShowTimes[key];\n  if (lastShow !== undefined) {\n    var age = now - lastShow;\n    if (age < maxAge) {\n      return false;\n    }\n  }\n\n  lastShowTimes[key] = now;\n  return true;\n};\n\nvar maybeShowBanners = function () {\n  var releaseData = release.current.getCatalogReleaseData();\n\n  var banner = releaseData.banner;\n  if (banner) {\n    var bannerDate =\n          banner.lastUpdated ? new Date(banner.lastUpdated) : new Date;\n    if (catalog.official.shouldShowBanner(release.current.name, bannerDate)) {\n      // This banner is new; print it!\n      runLog.log(\"\");\n      runLog.log(banner.text);\n      runLog.log(\"\");\n      catalog.official.setBannerShownDate(release.current.name, bannerDate);\n      return;\n    }\n  }\n\n  // We now consider printing some simpler banners, if this isn't the latest\n  // release. But if the user specified a release manually with --release, we\n  // don't bother: we only want to tell users about ways to update *their app*.\n  if (release.forced) {\n    return;\n  }\n\n  const catalogUtils = require('./catalog/catalog-utils.js');\n\n  // Didn't print a banner? Maybe we have a patch release to recommend.\n  var track = release.current.getReleaseTrack();\n  var patchReleaseVersion = releaseData.patchReleaseVersion;\n  if (patchReleaseVersion) {\n    var patchRelease = catalog.official.getReleaseVersion(\n      track, patchReleaseVersion);\n    if (patchRelease && patchRelease.recommended) {\n      var patchKey = \"patchrelease-\" + track + \"-\" + patchReleaseVersion;\n      if (shouldShow(patchKey)) {\n        runLog.log(\n          \"=> A patch (\" +\n          catalogUtils.displayRelease(track, patchReleaseVersion) +\n          \") for your current release is available!\");\n        runLog.log(\"   Update this project now with 'meteor update --patch'.\");\n      }\n      return;\n    }\n  }\n\n  // There's no patch (so no urgent exclamation!) but there may be something\n  // worth mentioning.\n  // XXX maybe run constraint solver to change the message depending on whether\n  //     or not it will actually work?\n  var currentReleaseOrderKey = releaseData.orderKey || null;\n  var futureReleases = catalog.official.getSortedRecommendedReleaseVersions(\n    track, currentReleaseOrderKey);\n  if (futureReleases.length) {\n    var futureReleaseKey = \"futurerelease-\" + track + \"-\" + futureReleases[0];\n    if (shouldShow(futureReleaseKey)) {\n      runLog.log(\n        \"=> \" + catalogUtils.displayRelease(track, futureReleases[0]) +\n        \" is available. Update this project with 'meteor update'.\");\n    }\n    return;\n  }\n};\n\n// Update ~/.meteor/meteor to point to the tool binary from the tools of the\n// latest recommended release on the default release track.\nexport function updateMeteorToolSymlink(printErrors) {\n  // Get the latest release version of METEOR. (*Always* of the default\n  // track, not of whatever we happen to be running: we always want the tool\n  // symlink to go to the default track.)\n  var latestReleaseVersion = catalog.official.getDefaultReleaseVersion();\n  // Maybe you're on some random track with nothing recommended. That's OK.\n  if (!latestReleaseVersion) {\n    return;\n  }\n\n  var latestRelease = catalog.official.getReleaseVersion(\n    latestReleaseVersion.track, latestReleaseVersion.version);\n  if (!latestRelease) {\n    throw Error(\"latest release doesn't exist?\");\n  }\n  if (!latestRelease.tool) {\n    throw Error(\"latest release doesn't have a tool?\");\n  }\n\n  var latestReleaseToolParts = latestRelease.tool.split('@');\n  var latestReleaseToolPackage = latestReleaseToolParts[0];\n  var latestReleaseToolVersion = latestReleaseToolParts[1];\n  var relativeToolPath = tropohouse.default.packagePath(\n    latestReleaseToolPackage, latestReleaseToolVersion, true);\n\n  var localLatestReleaseLink = tropohouse.default.latestMeteorSymlink();\n\n  if (! localLatestReleaseLink.startsWith(relativeToolPath + files.pathSep)) {\n    // The latest release from the catalog is not where the ~/.meteor/meteor\n    // symlink points to. Let's make sure we have that release on disk,\n    // and then update the symlink.\n    var packageMap =\n          packageMapModule.PackageMap.fromReleaseVersion(latestRelease);\n    var messages = buildmessage.capture(function () {\n      tropohouse.default.downloadPackagesMissingFromMap(packageMap);\n    });\n    if (messages.hasMessages()) {\n      // Ignore errors because we are running in the background, uness we\n      // specifically requested to print errors because we are testing this\n      // feature.\n      if (printErrors) {\n        Console.printMessages(messages);\n      }\n      return;\n    }\n\n    var toolIsopack = new isopack.Isopack;\n    toolIsopack.initFromPath(\n      latestReleaseToolPackage,\n      tropohouse.default.packagePath(latestReleaseToolPackage,\n                                     latestReleaseToolVersion));\n    var toolRecord = _.findWhere(toolIsopack.toolsOnDisk,\n                                 {arch: archinfo.host()});\n\n    // XXX maybe we shouldn't throw from this background thing\n    // counter: this is super weird and should never ever happen.\n    if (!toolRecord) {\n      throw Error(\"latest release has no tool?\");\n    }\n\n    tropohouse.default.linkToLatestMeteor(files.pathJoin(\n      relativeToolPath, toolRecord.path, 'meteor'));\n  }\n}\n"]}