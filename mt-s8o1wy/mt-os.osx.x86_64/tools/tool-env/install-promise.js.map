{"version":3,"sources":["/tools/tool-env/install-promise.js"],"names":["Promise","global","require","makeCompatible","newPromise","Object","defineProperty","get","set"],"mappings":"AAAA;AACA;;AAEA,IAAIA,UAAUC,OAAOD,OAAP,IACZE,QAAQ,4BAAR,CADF;;AAGA,SAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAClCF,UAAQ,gBAAR,EAA0BC,cAA1B,CACEC,UADF,EAEEF,QAAQ,QAAR,CAFF;AAID;;AAEDC,eAAeH,OAAf;;AAEAK,OAAOC,cAAP,CAAsBL,MAAtB,EAA8B,SAA9B,EAAyC;AACvCM,OAAK,eAAY;AACf,WAAOP,OAAP;AACD,GAHsC;;AAKvC;AACA;AACAQ,OAAKL;AAPkC,CAAzC","file":"tools/tool-env/install-promise.js.map","sourcesContent":["// Install a global ES2015-compliant Promise constructor that knows how to\n// run all its callbacks in Fibers.\n\nvar Promise = global.Promise ||\n  require(\"promise/lib/es6-extensions\");\n\nfunction makeCompatible(newPromise) {\n  require(\"meteor-promise\").makeCompatible(\n    newPromise,\n    require(\"fibers\")\n  );\n}\n\nmakeCompatible(Promise);\n\nObject.defineProperty(global, \"Promise\", {\n  get: function () {\n    return Promise;\n  },\n\n  // Make the new Promise compatible with Fibers, but do not allow further\n  // modifications to global.Promise, e.g. by misbehaving polyfills.\n  set: makeCompatible\n});\n"]}