{"version":3,"sources":["/tools/utils/colon-converter.js"],"names":["_","require","convertBySchema","val","schema","convert","isArray","length","Error","map","subval","isObject","ret","clone","each","subschema","key","has","path","replace","ISOPACK_SCHEME","builds","plugins","UNIBUILD_SCHEME","node_modules","resources","file","sourceMap","servePath","JAVASCRIPT_IMAGE_SCHEME","load","sourceMapRoot","exports","convertIsopack","data","convertUnibuild","convertJSImage"],"mappings":";AAAA,IAAIA,IAAIC,QAAQ,YAAR,CAAR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,kBAAkB,SAAlBA,eAAkB,CAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC3C,MAAIA,WAAW,IAAf,EAAqB;AACnB,WAAOC,QAAQF,GAAR,CAAP;AACD,GAFD,MAEO,IAAIC,WAAW,KAAf,EAAsB;AAC3B,WAAOD,GAAP;AACD;;AAED,MAAIH,EAAEM,OAAF,CAAUF,MAAV,CAAJ,EAAuB;AACrB,QAAIA,OAAOG,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,QAAI,CAAER,EAAEM,OAAF,CAAUH,GAAV,CAAN,EAAsB;AACpB,YAAM,IAAIK,KAAJ,CAAU,6CAA4CL,GAA5C,yCAA4CA,GAA5C,EAAV,CAAN;AACD;;AAED,WAAOH,EAAES,GAAF,CAAMN,GAAN,EAAW,UAAUO,MAAV,EAAkB;AAClC,aAAOR,gBAAgBQ,MAAhB,EAAwBN,OAAO,CAAP,CAAxB,CAAP;AACD,KAFM,CAAP;AAGD;;AAED,MAAI,CAAEJ,EAAEW,QAAF,CAAWP,MAAX,CAAN,EAA0B;AACxB,UAAM,IAAII,KAAJ,CAAU,wCAAuCJ,MAAvC,yCAAuCA,MAAvC,EAAV,CAAN;AACD;;AAED,MAAIQ,MAAMZ,EAAEa,KAAF,CAAQV,GAAR,CAAV;AACAH,IAAEc,IAAF,CAAOV,MAAP,EAAe,UAAUW,SAAV,EAAqBC,GAArB,EAA0B;AACvC,QAAIhB,EAAEiB,GAAF,CAAML,GAAN,EAAWI,GAAX,CAAJ,EAAqB;AACnBJ,UAAII,GAAJ,IAAWd,gBAAgBC,IAAIa,GAAJ,CAAhB,EAA0BD,SAA1B,CAAX;AACD;AACF,GAJD;;AAMA,SAAOH,GAAP;AACD,CAjCD;;AAmCA,IAAIP,UAAU,SAAVA,OAAU,CAAUa,IAAV,EAAgB;AAC5B,SAAOA,KAAKC,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACD,CAFD;;AAIA,IAAIC,iBAAiB;AACnBC,UAAQ,CAAC;AACPH,UAAM;AADC,GAAD,CADW;AAInBI,WAAS,CAAC;AACRJ,UAAM;AADE,GAAD;AAJU,CAArB;;AASA,IAAIK,kBAAkB;AACpBC,gBAAc,IADM;AAEpBC,aAAW,CAAC;AACVC,UAAM,IADI;AAEVC,eAAW,IAFD;AAGVC,eAAW;AAHD,GAAD;AAFS,CAAtB;;AASA,IAAIC,0BAA0B;AAC5BC,QAAM,CAAC;AACLH,eAAW,IADN;AAELI,mBAAe,IAFV;AAGLb,UAAM,IAHD;AAILM,kBAAc;AAJT,GAAD;AADsB,CAA9B;;AASAQ,QAAQC,cAAR,GAAyB,UAAUC,IAAV,EAAgB;AACvC,SAAOhC,gBAAgBgC,IAAhB,EAAsBd,cAAtB,CAAP;AACD,CAFD;;AAIAY,QAAQG,eAAR,GAA0B,UAAUD,IAAV,EAAgB;AACxC,SAAOhC,gBAAgBgC,IAAhB,EAAsBX,eAAtB,CAAP;AACD,CAFD;;AAIAS,QAAQI,cAAR,GAAyB,UAAUF,IAAV,EAAgB;AACvC,SAAOhC,gBAAgBgC,IAAhB,EAAsBL,uBAAtB,CAAP;AACD,CAFD;;AAIAG,QAAQ3B,OAAR,GAAkBA,OAAlB","file":"tools/utils/colon-converter.js.map","sourcesContent":["var _ = require('underscore');\n\n// schema - Object, representing paths to correct. Ex.:\n// {\n//   format: false,\n//   arch: false,\n//   load: [\n//     {\n//       node_modulus: true,\n//       sourceMap: true,\n//       sourceMapRoot: true,\n//       path: true\n//     }\n//   ]\n// }\nvar convertBySchema = function (val, schema) {\n  if (schema === true) {\n    return convert(val);\n  } else if (schema === false) {\n    return val;\n  }\n\n  if (_.isArray(schema)) {\n    if (schema.length !== 1) {\n      throw new Error(\"Expected an array with one element in schema\");\n    }\n\n    if (! _.isArray(val)) {\n      throw new Error(\"Expected an array in value, got \" + typeof val);\n    }\n\n    return _.map(val, function (subval) {\n      return convertBySchema(subval, schema[0]);\n    });\n  }\n\n  if (! _.isObject(schema)) {\n    throw new Error(\"Unexpected type of schema: \" + typeof(schema));\n  }\n\n  var ret = _.clone(val);\n  _.each(schema, function (subschema, key) {\n    if (_.has(ret, key)) {\n      ret[key] = convertBySchema(val[key], subschema);\n    }\n  });\n\n  return ret;\n};\n\nvar convert = function (path) {\n  return path.replace(/:/g, '_');\n};\n\nvar ISOPACK_SCHEME = {\n  builds: [{\n    path: true\n  }],\n  plugins: [{\n    path: true\n  }]\n};\n\nvar UNIBUILD_SCHEME = {\n  node_modules: true,\n  resources: [{\n    file: true,\n    sourceMap: true,\n    servePath: true\n  }]\n};\n\nvar JAVASCRIPT_IMAGE_SCHEME = {\n  load: [{\n    sourceMap: true,\n    sourceMapRoot: true,\n    path: true,\n    node_modules: true\n  }]\n};\n\nexports.convertIsopack = function (data) {\n  return convertBySchema(data, ISOPACK_SCHEME);\n};\n\nexports.convertUnibuild = function (data) {\n  return convertBySchema(data, UNIBUILD_SCHEME);\n};\n\nexports.convertJSImage = function (data) {\n  return convertBySchema(data, JAVASCRIPT_IMAGE_SCHEME);\n};\n\nexports.convert = convert;\n\n"]}