{"version":3,"sources":["/tools/project-context.js"],"names":["assert","require","_","archinfo","buildmessage","catalog","catalogLocal","Console","files","isopackCacheModule","isopackets","packageMapModule","release","tropohouse","utils","watch","Profile","KNOWN_ISOBUILD_FEATURE_PACKAGES","ProjectContext","options","self","ok","projectDir","Error","originalOptions","reset","exports","STAGE","INITIAL","READ_PROJECT_METADATA","INITIALIZE_CATALOG","RESOLVE_CONSTRAINTS","DOWNLOAD_MISSING_PACKAGES","BUILD_LOCAL_PACKAGES","SAVE_CHANGED_METADATA","extend","prototype","moreOptions","resetOptions","_packageMapFilename","packageMapFilename","pathJoin","_serverArchitectures","serverArchitectures","push","host","uniq","_projectDirForLocalPackages","projectDirForLocalPackages","_explicitlyAddedLocalPackageDirs","explicitlyAddedLocalPackageDirs","projectLocalDir","process","env","METEOR_LOCAL_DIR","pathResolve","convertToStandardPath","_forceRebuildPackages","forceRebuildPackages","_ignorePackageDirsEnvVar","ignorePackageDirsEnvVar","_ignoreCheckoutPackages","ignoreCheckoutPackages","_officialCatalog","officialCatalog","official","alwaysWritePackageMap","neverWritePackageMap","_alwaysWritePackageMap","_neverWriteProjectConstraintsFile","neverWriteProjectConstraintsFile","_neverWritePackageMap","_upgradePackageNames","upgradePackageNames","_upgradeIndirectDepPatchVersions","upgradeIndirectDepPatchVersions","_forceIncludeCordovaUnibuild","forceIncludeCordovaUnibuild","preservePackageMap","packageMap","_cachedVersionsBeforeReset","toVersionMap","_oldPackageMapFileHash","packageMapFile","fileHash","_allowIncompatibleUpdate","allowIncompatibleUpdate","lintAppAndLocalPackages","_lintPackageWithSourceRoot","lintPackageWithSourceRoot","releaseFile","projectConstraintsFile","platformList","cordovaPluginsFile","appIdentifier","finishedUpgraders","projectCatalog","localCatalog","explicitlyAddedPackageNames","packageMapDelta","softRefreshIsopacks","isopackCache","forgetPreviousIsopackCache","_previousIsopackCache","_completedStage","_readResolverResultCache","readProjectMetadata","_completeStagesThrough","initializeCatalog","run","resolveConstraints","downloadMissingPackages","buildLocalPackages","saveChangedMetadata","prepareProjectForBuild","targetStage","assertInCapture","enterJob","completedStage","jobHasMessages","getProjectLocalDirectory","subdirectory","getMeteorShellDirectory","_readProjectMetadata","_ensureProjectDir","ReleaseFile","ProjectConstraintsFile","PackageMapFile","filename","CordovaPluginsFile","PlatformList","_ensureAppIdentifier","FinishedUpgraders","writeReleaseFileAndDevBundleLink","releaseName","strictEqual","inCheckout","write","mkdir_p","constraintFilePath","exists","writeFileAtomically","gitignorePath","getProjectWatchSet","watchSet","WatchSet","each","metadataFile","merge","packageLocationWatchSet","getProjectAndLocalPackagesWatchSet","allLoadedLocalPackagesWatchSet","getLintingMessagesForLocalPackages","identifierFile","lines","getLinesOrEmpty","appId","find","map","trimSpaceAndComments","identity","randomToken","comment","_resolveConstraints","assertInJob","depsAndConstraints","_getRootDepsAndConstraints","cachedVersions","getCachedVersions","anticipatedPrereleases","_getAnticipatedPrereleases","constraints","length","clone","p","resolverRunCount","runAndRetryWithRefreshIfHelpful","canRetry","resolver","_buildResolver","resolveOptions","previousSolution","missingPreviousVersionIsError","supportedIsobuildFeaturePackages","upgrade","solution","time","resolve","deps","e","constraintSolverError","versionParserError","error","message","tags","refreshCouldHelp","PackageMap","answer","PackageMapDelta","usedRCs","neededToUseUnanticipatedPrereleases","_saveResolverResultCache","_resolverResultCache","JSON","parse","readFile","code","stringify","getOriginalAppDirForTestPackages","appDir","isString","_localPackageSearchDirs","searchDirs","PACKAGE_DIRS","warn","packageDirsFromEnvVar","envVar","delimiter","pathOsDelimiter","split","envPackageDirs","forEach","packagesDir","getCurrentToolsDir","_initializeCatalog","LocalCatalog","LayeredCatalog","initialize","localPackageSearchDirs","dir","localVersionRecord","getVersionBySourceRoot","packageName","_addAppConstraints","_addLocalPackageConstraints","eachConstraint","constraint","getAllPackageNames","versionRecord","getLatestVersion","parsePackageConstraint","version","rootConstraints","add","test","has","constraintObject","versionConstraint","alternatives","alt","versionString","constraintSolverPackage","load","ConstraintSolver","PackagesResolver","nudge","resultCache","_downloadMissingPackages","downloadPackagesMissingFromMap","_buildLocalPackages","IsopackCache","includeCordovaUnibuild","usesCordova","cacheDir","pluginCacheDirRoot","previousIsopackCache","lintLocalPackages","wipeCachedPackages","_saveChangedMetadata","writeIfModified","current","isCheckout","name","fullReleaseName","_modified","_constraintLines","_constraintMap","_readFile","contents","readAndWatchFile","splitBufferToLines","last","pop","line","lineRecord","leadingSpace","trailingSpaceAndComment","match","useBuildmessage","buildmessageFile","file","_write","lineParts","constraintString","join","messages","capture","title","hasMessages","formatMessages","iterator","getConstraint","addConstraints","constraintsToAdd","constraintToAdd","isEqual","addPackages","packagesToAdd","validatePackageName","updateReleaseConstraints","releaseRecord","compact","packages","removePackages","packagesToRemove","filter","contains","removeAllPackages","_versions","fileInfo","readAndWatchFileWithHash","hash","trimSpace","packageVersion","parsePackageAndVersion","newVersions","packageNames","keys","sort","fileContents","Buffer","sha1","addFile","_platforms","DEFAULT_PLATFORMS","platforms","difference","concat","getPlatforms","getCordovaPlatforms","isEmpty","getWebArchs","archs","_plugins","parts","getPluginVersions","plugins","pluginNames","pluginName","unnormalizedReleaseName","displayReleaseName","releaseTrack","releaseVersion","fileMissing","noReleaseSpecified","normalReleaseSpecified","catalogUtils","splitReleaseName","displayRelease","ensureDevBundleLink","getDevBundle","devBundle","devBundleParts","pathSep","meteorToolIndex","lastIndexOf","getReleaseVersion","meteorToolVersion","tool","realpath","makeLink","readLink","dotMeteorDir","pathDirname","localDir","devBundleLink","rm_recursive","newTarget","oldOSPath","oldTarget","readUpgraders","upgraders","appendUpgraders","appendText","upgrader","appendFile"],"mappings":"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","file":"tools/project-context.js.map","sourcesContent":["var assert = require(\"assert\");\nvar _ = require('underscore');\n\nvar archinfo = require('./utils/archinfo.js');\nvar buildmessage = require('./utils/buildmessage.js');\nvar catalog = require('./packaging/catalog/catalog.js');\nvar catalogLocal = require('./packaging/catalog/catalog-local.js');\nvar Console = require('./console/console.js').Console;\nvar files = require('./fs/files.js');\nvar isopackCacheModule = require('./isobuild/isopack-cache.js');\nvar isopackets = require('./tool-env/isopackets.js');\nvar packageMapModule = require('./packaging/package-map.js');\nvar release = require('./packaging/release.js');\nvar tropohouse = require('./packaging/tropohouse.js');\nvar utils = require('./utils/utils.js');\nvar watch = require('./fs/watch.js');\nvar Profile = require('./tool-env/profile.js').Profile;\nimport { KNOWN_ISOBUILD_FEATURE_PACKAGES } from './isobuild/compiler.js';\n\n// The ProjectContext represents all the context associated with an app:\n// metadata files in the `.meteor` directory, the choice of package versions\n// used by it, etc.  Any time you want to work with an app, create a\n// ProjectContext and call prepareProjectForBuild on it (in a buildmessage\n// context).\n//\n// Note that this should only be used by parts of the code that truly require a\n// full project to exist; you won't find any reference to ProjectContext in\n// compiler.js or isopack.js, which work on individual files (though they will\n// get references to some of the objects which can be stored in a ProjectContext\n// such as PackageMap and IsopackCache).  Parts of the code that should deal\n// with ProjectContext include command implementations, the parts of bundler.js\n// that deal with creating a full project, PackageSource.initFromAppDir, stats\n// reporting, etc.\n//\n// Classes in this file follow the standard protocol where names beginning with\n// _ should not be externally accessed.\nfunction ProjectContext(options) {\n  var self = this;\n  assert.ok(self instanceof ProjectContext);\n\n  if (!options.projectDir)\n    throw Error(\"missing projectDir!\");\n\n  self.originalOptions = options;\n  self.reset();\n}\nexports.ProjectContext = ProjectContext;\n\n// The value is the name of the method to call to continue.\nvar STAGE = {\n  INITIAL: '_readProjectMetadata',\n  READ_PROJECT_METADATA: '_initializeCatalog',\n  INITIALIZE_CATALOG: '_resolveConstraints',\n  RESOLVE_CONSTRAINTS: '_downloadMissingPackages',\n  DOWNLOAD_MISSING_PACKAGES: '_buildLocalPackages',\n  BUILD_LOCAL_PACKAGES: '_saveChangedMetadata',\n  SAVE_CHANGED_METADATA: 'DONE'\n};\n\n_.extend(ProjectContext.prototype, {\n  reset: function (moreOptions, resetOptions) {\n    var self = this;\n    // Allow overriding some options until the next call to reset;\n    var options = _.extend({}, self.originalOptions, moreOptions);\n    // This is options that are actually directed at reset itself.\n    resetOptions = resetOptions || {};\n\n    self.projectDir = options.projectDir;\n    self.tropohouse = options.tropohouse || tropohouse.default;\n\n    self._packageMapFilename = options.packageMapFilename ||\n      files.pathJoin(self.projectDir, '.meteor', 'versions');\n\n    self._serverArchitectures = options.serverArchitectures || [];\n    // We always need to download host versions of packages, at least for\n    // plugins.\n    self._serverArchitectures.push(archinfo.host());\n    self._serverArchitectures = _.uniq(self._serverArchitectures);\n\n    // test-packages overrides this to load local packages from your real app\n    // instead of from test-runner-app.\n    self._projectDirForLocalPackages = options.projectDirForLocalPackages ||\n      options.projectDir;\n    self._explicitlyAddedLocalPackageDirs =\n      options.explicitlyAddedLocalPackageDirs;\n\n    // Used to override the directory that Meteor's build process\n    // writes to; used by `meteor test` so that you can test your\n    // app in parallel to writing it, with an isolated database.\n    // You can override the default .meteor/local by specifying\n    // METEOR_LOCAL_DIR. You can use relative path if you want it\n    // relative to your project directory.\n    self.projectLocalDir = process.env.METEOR_LOCAL_DIR ?\n      files.pathResolve(options.projectDir,\n        files.convertToStandardPath(process.env.METEOR_LOCAL_DIR))\n      : (options.projectLocalDir ||\n        files.pathJoin(self.projectDir, '.meteor', 'local'));\n\n    // Used by 'meteor rebuild'; true to rebuild all packages, or a list of\n    // package names.  Deletes the isopacks and their plugin caches.\n    self._forceRebuildPackages = options.forceRebuildPackages;\n\n    // Set in a few cases where we really want to only get packages from\n    // checkout.\n    self._ignorePackageDirsEnvVar = options.ignorePackageDirsEnvVar;\n\n    // Set by some tests where we want to pretend that we don't have packages in\n    // the git checkout (because they're using a fake warehouse).\n    self._ignoreCheckoutPackages = options.ignoreCheckoutPackages;\n\n    // Set by some tests to override the official catalog.\n    self._officialCatalog = options.officialCatalog || catalog.official;\n\n    if (options.alwaysWritePackageMap && options.neverWritePackageMap)\n      throw Error(\"always or never?\");\n\n    // Set by 'meteor create' and 'meteor update' to ensure that\n    // .meteor/versions is always written even if release.current does not match\n    // the project's release.\n    self._alwaysWritePackageMap = options.alwaysWritePackageMap;\n\n    // Set by a few special-case commands that call\n    // projectConstraintsFile.addConstraints for internal reasons without\n    // intending to actually write .meteor/packages and .meteor/versions (eg,\n    // 'publish' wants to make sure making sure the test is built, and\n    // --get-ready wants to build every conceivable package).\n    self._neverWriteProjectConstraintsFile =\n      options.neverWriteProjectConstraintsFile;\n    self._neverWritePackageMap = options.neverWritePackageMap;\n\n    // Set by 'meteor update' to specify which packages may be updated. Array of\n    // package names.\n    self._upgradePackageNames = options.upgradePackageNames;\n    // Set by 'meteor update' to mean that we should upgrade the\n    // \"patch\" (and wrapNum, etc.) parts of indirect dependencies.\n    self._upgradeIndirectDepPatchVersions =\n      options.upgradeIndirectDepPatchVersions;\n\n    // Set by publishing commands to ensure that published packages always have\n    // a web.cordova slice (because we aren't yet smart enough to just default\n    // to using the web.browser slice instead or make a common 'web' slice).\n    self._forceIncludeCordovaUnibuild = options.forceIncludeCordovaUnibuild;\n\n    if (resetOptions.preservePackageMap && self.packageMap) {\n      self._cachedVersionsBeforeReset = self.packageMap.toVersionMap();\n      // packageMapFile should always exist if packageMap does\n      self._oldPackageMapFileHash = self.packageMapFile.fileHash;\n    } else {\n      self._cachedVersionsBeforeReset = null;\n      self._oldPackageMapFileHash = null;\n    }\n\n    // The --allow-incompatible-update command-line switch, which allows\n    // the version solver to choose versions of root dependencies that are\n    // incompatible with the previously chosen versions (i.e. to downgrade\n    // them or change their major version).\n    self._allowIncompatibleUpdate = options.allowIncompatibleUpdate;\n\n    // If set, we run the linter on the app and local packages.  Set by 'meteor\n    // lint', and the runner commands (run/test-packages/debug) when --no-lint\n    // is not passed.\n    self.lintAppAndLocalPackages = options.lintAppAndLocalPackages;\n\n    // If set, we run the linter on just one local package, with this\n    // source root. Set by 'meteor lint' in a package, and 'meteor publish'.\n    self._lintPackageWithSourceRoot = options.lintPackageWithSourceRoot;\n\n    // Initialized by readProjectMetadata.\n    self.releaseFile = null;\n    self.projectConstraintsFile = null;\n    self.packageMapFile = null;\n    self.platformList = null;\n    self.cordovaPluginsFile = null;\n    self.appIdentifier = null;\n    self.finishedUpgraders = null;\n\n    // Initialized by initializeCatalog.\n    self.projectCatalog = null;\n    self.localCatalog = null;\n    // Once the catalog is read and the names of the \"explicitly\n    // added\" packages are determined, they will be listed here.\n    // (See explicitlyAddedLocalPackageDirs.)\n    // \"Explicitly added\" packages are typically present in non-app\n    // projects, like the one created by `meteor publish`.  This list\n    // is used to avoid pinning such packages to their previous\n    // versions when we run the version solver, which prevents an\n    // error telling you to pass `--allow-incompatible-update` when\n    // you publish your package after bumping the major version.\n    self.explicitlyAddedPackageNames = null;\n\n    // Initialized by _resolveConstraints.\n    self.packageMap = null;\n    self.packageMapDelta = null;\n\n    if (resetOptions.softRefreshIsopacks && self.isopackCache) {\n      // Make sure we only hold on to one old isopack cache, not a linked list\n      // of all of them.\n      self.isopackCache.forgetPreviousIsopackCache();\n      self._previousIsopackCache = self.isopackCache;\n    } else {\n      self._previousIsopackCache = null;\n    }\n    // Initialized by _buildLocalPackages.\n    self.isopackCache = null;\n\n    self._completedStage = STAGE.INITIAL;\n\n    // The resolverResultCache is used by the constraint solver; to\n    // us it's just an opaque object.  If we pass it into repeated\n    // calls to the constraint solver, the constraint solver can be\n    // more efficient by caching or memoizing its work.  We choose not\n    // to reset this when reset() is called more than once.\n    self._readResolverResultCache();\n  },\n\n  readProjectMetadata: function () {\n    // don't generate a profiling report for this stage (Profile.run),\n    // because all we do here is read a handful of files.\n    this._completeStagesThrough(STAGE.READ_PROJECT_METADATA);\n  },\n  initializeCatalog: function () {\n    Profile.run('ProjectContext initializeCatalog', () => {\n      this._completeStagesThrough(STAGE.INITIALIZE_CATALOG);\n    });\n  },\n  resolveConstraints: function () {\n    Profile.run('ProjectContext resolveConstraints', () => {\n      this._completeStagesThrough(STAGE.RESOLVE_CONSTRAINTS);\n    });\n  },\n  downloadMissingPackages: function () {\n    Profile.run('ProjectContext downloadMissingPackages', () => {\n      this._completeStagesThrough(STAGE.DOWNLOAD_MISSING_PACKAGES);\n    });\n  },\n  buildLocalPackages: function () {\n    Profile.run('ProjectContext buildLocalPackages', () => {\n      this._completeStagesThrough(STAGE.BUILD_LOCAL_PACKAGES);\n    });\n  },\n  saveChangedMetadata: function () {\n    Profile.run('ProjectContext saveChangedMetadata', () => {\n      this._completeStagesThrough(STAGE.SAVE_CHANGED_METADATA);\n    });\n  },\n  prepareProjectForBuild: function () {\n    // This is the same as saveChangedMetadata, but if we insert stages after\n    // that one it will continue to mean \"fully finished\".\n    Profile.run('ProjectContext prepareProjectForBuild', () => {\n      this._completeStagesThrough(STAGE.SAVE_CHANGED_METADATA);\n    });\n  },\n\n  _completeStagesThrough: function (targetStage) {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob('preparing project', function () {\n      while (self._completedStage !== targetStage) {\n        // This error gets thrown if you request to go to a stage that's earlier\n        // than where you started. Note that the error will be mildly confusing\n        // because the key of STAGE does not match the value.\n        if (self.completedStage === STAGE.SAVE_CHANGED_METADATA)\n          throw Error(\"can't find requested stage \" + targetStage);\n\n        // The actual value of STAGE.FOO is the name of the method that takes\n        // you to the next step after FOO.\n        self[self._completedStage]();\n        if (buildmessage.jobHasMessages())\n          return;\n      }\n    });\n  },\n\n  getProjectLocalDirectory: function (subdirectory) {\n    var self = this;\n    return files.pathJoin(self.projectLocalDir, subdirectory);\n  },\n\n  getMeteorShellDirectory: function(projectDir) {\n    return this.getProjectLocalDirectory(\"shell\");\n  },\n\n  // You can call this manually (that is, the public version without\n  // an `_`) if you want to do some work before resolving constraints,\n  // or you can let prepareProjectForBuild do it for you.\n  //\n  // This should be pretty fast --- for example, we shouldn't worry about\n  // needing to wait for it to be done before we open the runner proxy.\n  _readProjectMetadata: Profile('_readProjectMetadata', function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob('reading project metadata', function () {\n      // Ensure this is actually a project directory.\n      self._ensureProjectDir();\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/release.\n      self.releaseFile = new exports.ReleaseFile({\n        projectDir: self.projectDir,\n        catalog: self._officialCatalog,\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/packages.\n      self.projectConstraintsFile = new exports.ProjectConstraintsFile({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/versions.\n      self.packageMapFile = new exports.PackageMapFile({\n        filename: self._packageMapFilename\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/cordova-plugins.\n      self.cordovaPluginsFile = new exports.CordovaPluginsFile({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/platforms, creating it if necessary.\n      self.platformList = new exports.PlatformList({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Read .meteor/.id, creating it if necessary.\n      self._ensureAppIdentifier();\n      if (buildmessage.jobHasMessages())\n        return;\n\n      // Set up an object that knows how to read and write\n      // .meteor/.finished-upgraders.\n      self.finishedUpgraders = new exports.FinishedUpgraders({\n        projectDir: self.projectDir\n      });\n      if (buildmessage.jobHasMessages())\n        return;\n    });\n\n    self._completedStage = STAGE.READ_PROJECT_METADATA;\n  }),\n\n  // Write the new release to .meteor/release and create a\n  // .meteor/dev_bundle symlink to the corresponding dev_bundle.\n  writeReleaseFileAndDevBundleLink(releaseName) {\n    assert.strictEqual(files.inCheckout(), false);\n    this.releaseFile.write(releaseName);\n  },\n\n  _ensureProjectDir: function () {\n    var self = this;\n    files.mkdir_p(files.pathJoin(self.projectDir, '.meteor'));\n\n    // This file existing is what makes a project directory a project directory,\n    // so let's make sure it exists!\n    var constraintFilePath = files.pathJoin(self.projectDir, '.meteor', 'packages');\n    if (! files.exists(constraintFilePath)) {\n      files.writeFileAtomically(constraintFilePath, '');\n    }\n\n    // Let's also make sure we have a minimal gitignore.\n    var gitignorePath = files.pathJoin(self.projectDir, '.meteor', '.gitignore');\n    if (! files.exists(gitignorePath)) {\n      files.writeFileAtomically(gitignorePath, 'local\\n');\n    }\n  },\n\n  // This is a WatchSet that ends up being the WatchSet for the app's\n  // initFromAppDir PackageSource. Changes to this will cause the whole app to\n  // be rebuilt (client and server).\n  getProjectWatchSet: function () {\n    // We don't cache a projectWatchSet on this object, since some of the\n    // metadata files can be written by us (eg .meteor/versions\n    // post-constraint-solve).\n    var self = this;\n    var watchSet = new watch.WatchSet;\n    _.each(\n      [self.releaseFile, self.projectConstraintsFile, self.packageMapFile,\n       self.platformList, self.cordovaPluginsFile],\n      function (metadataFile) {\n        metadataFile && watchSet.merge(metadataFile.watchSet);\n      });\n\n    if (self.localCatalog) {\n      watchSet.merge(self.localCatalog.packageLocationWatchSet);\n    }\n\n    return watchSet;\n  },\n\n  // This WatchSet encompasses everything that users can change to restart an\n  // app. We only watch this for failed bundles; for successful bundles, we have\n  // more precise server-specific and client-specific WatchSets that add up to\n  // this one.\n  getProjectAndLocalPackagesWatchSet: function () {\n    var self = this;\n    var watchSet = self.getProjectWatchSet();\n\n    // Include the loaded local packages (ie, the non-metadata files) but only\n    // if we've actually gotten to the buildLocalPackages step.\n    if (self.isopackCache) {\n      watchSet.merge(self.isopackCache.allLoadedLocalPackagesWatchSet);\n    }\n    return watchSet;\n  },\n\n  getLintingMessagesForLocalPackages: function () {\n    var self = this;\n    return self.isopackCache.getLintingMessagesForLocalPackages();\n  },\n\n  _ensureAppIdentifier: function () {\n    var self = this;\n    var identifierFile = files.pathJoin(self.projectDir, '.meteor', '.id');\n\n    // Find the first non-empty line, ignoring comments. We intentionally don't\n    // put this in a WatchSet, since changing this doesn't affect the built app\n    // much (and there's no real reason to update it anyway).\n    var lines = files.getLinesOrEmpty(identifierFile);\n    var appId = _.find(_.map(lines, files.trimSpaceAndComments), _.identity);\n\n    // If the file doesn't exist or has no non-empty lines, regenerate the\n    // token.\n    if (!appId) {\n      appId = utils.randomToken() + utils.randomToken() + utils.randomToken();\n\n      var comment = (\n\"# This file contains a token that is unique to your project.\\n\" +\n\"# Check it into your repository along with the rest of this directory.\\n\" +\n\"# It can be used for purposes such as:\\n\" +\n\"#   - ensuring you don't accidentally deploy one app on top of another\\n\" +\n\"#   - providing package authors with aggregated statistics\\n\" +\n\"\\n\");\n      files.writeFileAtomically(identifierFile, comment + appId + '\\n');\n    }\n\n    self.appIdentifier = appId;\n  },\n\n  _resolveConstraints: Profile('_resolveConstraints', function () {\n    var self = this;\n    buildmessage.assertInJob();\n\n    var depsAndConstraints = self._getRootDepsAndConstraints();\n    // If this is in the runner and we have reset this ProjectContext for a\n    // rebuild, use the versions we calculated last time in this process (which\n    // may not have been written to disk if our release doesn't match the\n    // project's release on disk)... unless the actual file on disk has changed\n    // out from under us. Otherwise use the versions from .meteor/versions.\n    var cachedVersions;\n    if (self._cachedVersionsBeforeReset &&\n        self._oldPackageMapFileHash === self.packageMapFile.fileHash) {\n      // The file on disk hasn't change; reuse last time's results.\n      cachedVersions = self._cachedVersionsBeforeReset;\n    } else {\n      // We don't have a last time, or the file has changed; use\n      // .meteor/versions.\n      cachedVersions = self.packageMapFile.getCachedVersions();\n    }\n\n    var anticipatedPrereleases = self._getAnticipatedPrereleases(\n      depsAndConstraints.constraints, cachedVersions);\n\n    if (self.explicitlyAddedPackageNames.length) {\n      cachedVersions = _.clone(cachedVersions);\n      _.each(self.explicitlyAddedPackageNames, function (p) {\n        delete cachedVersions[p];\n      });\n    }\n\n    var resolverRunCount = 0;\n\n    // Nothing before this point looked in the official or project catalog!\n    // However, the resolver does, so it gets run in the retry context.\n    catalog.runAndRetryWithRefreshIfHelpful(function (canRetry) {\n      buildmessage.enterJob(\"selecting package versions\", function () {\n        var resolver = self._buildResolver();\n\n        var resolveOptions = {\n          previousSolution: cachedVersions,\n          anticipatedPrereleases: anticipatedPrereleases,\n          allowIncompatibleUpdate: self._allowIncompatibleUpdate,\n          // Not finding an exact match for a previous version in the catalog\n          // is considered an error if we haven't refreshed yet, and will\n          // trigger a refresh and another attempt.  That way, if a previous\n          // version exists, you'll get it, even if we don't have a record\n          // of it yet.  It's not actually fatal, though, for previousSolution\n          // to refer to package versions that we don't have access to or don't\n          // exist.  They'll end up getting changed or removed if possible.\n          missingPreviousVersionIsError: canRetry,\n          supportedIsobuildFeaturePackages: KNOWN_ISOBUILD_FEATURE_PACKAGES,\n        };\n        if (self._upgradePackageNames) {\n          resolveOptions.upgrade = self._upgradePackageNames;\n        }\n        if (self._upgradeIndirectDepPatchVersions) {\n          resolveOptions.upgradeIndirectDepPatchVersions = true;\n        }\n\n        resolverRunCount++;\n\n        var solution;\n        try {\n          Profile.time(\n            \"Select Package Versions\" +\n              (resolverRunCount > 1 ? (\" (Try \" + resolverRunCount + \")\") : \"\"),\n            function () {\n              solution = resolver.resolve(\n                depsAndConstraints.deps, depsAndConstraints.constraints,\n                resolveOptions);\n            });\n        } catch (e) {\n          if (!e.constraintSolverError && !e.versionParserError)\n            throw e;\n          // If the contraint solver gave us an error, refreshing\n          // might help to get new packages (see the comment on\n          // missingPreviousVersionIsError above).  If it's a\n          // package-version-parser error, print a nice message,\n          // but don't bother refreshing.\n          buildmessage.error(\n            e.message,\n            { tags: { refreshCouldHelp: !!e.constraintSolverError }});\n        }\n\n        if (buildmessage.jobHasMessages())\n          return;\n\n        self.packageMap = new packageMapModule.PackageMap(solution.answer, {\n          localCatalog: self.localCatalog\n        });\n\n        self.packageMapDelta = new packageMapModule.PackageMapDelta({\n          cachedVersions: cachedVersions,\n          packageMap: self.packageMap,\n          usedRCs: solution.usedRCs,\n          neededToUseUnanticipatedPrereleases:\n          solution.neededToUseUnanticipatedPrereleases,\n          anticipatedPrereleases: anticipatedPrereleases\n        });\n\n        self._saveResolverResultCache();\n\n        self._completedStage = STAGE.RESOLVE_CONSTRAINTS;\n      });\n    });\n  }),\n\n  _readResolverResultCache() {\n    if (! this._resolverResultCache) {\n      try {\n        this._resolverResultCache =\n          JSON.parse(files.readFile(files.pathJoin(\n            this.projectLocalDir,\n            \"resolver-result-cache.json\"\n          )));\n      } catch (e) {\n        if (e.code !== \"ENOENT\") throw e;\n        this._resolverResultCache = {};\n      }\n    }\n\n    return this._resolverResultCache;\n  },\n\n  _saveResolverResultCache() {\n    files.writeFileAtomically(\n      files.pathJoin(\n        this.projectLocalDir,\n        \"resolver-result-cache.json\"\n      ),\n      JSON.stringify(this._resolverResultCache) + \"\\n\"\n    );\n  },\n\n  // When running test-packages for an app with local packages, this\n  // method will return the original app dir, as opposed to the temporary\n  // testRunnerAppDir created for the tests.\n  getOriginalAppDirForTestPackages() {\n    const appDir = this._projectDirForLocalPackages;\n    if (_.isString(appDir) && appDir !== this.projectDir) {\n      return appDir;\n    }\n  },\n\n  _localPackageSearchDirs: function () {\n    const self = this;\n    let searchDirs = [\n      files.pathJoin(self._projectDirForLocalPackages, 'packages'),\n    ];\n\n    // User can provide additional package directories to search in\n    // METEOR_PACKAGE_DIRS (semi-colon/colon-separated, depending on OS),\n\n    // PACKAGE_DIRS Deprecated in 2016-10\n    // Warn users to migrate from PACKAGE_DIRS to METEOR_PACKAGE_DIRS\n    if (process.env.PACKAGE_DIRS) {\n      Console.warn('For compatibility, the PACKAGE_DIRS environment variable',\n        'is deprecated and will be removed in a future Meteor release.');\n      Console.warn('Developers should now use METEOR_PACKAGE_DIRS and',\n        'Windows projects should now use a semi-colon (;) to separate paths.');\n    }\n\n    function packageDirsFromEnvVar(envVar, delimiter = files.pathOsDelimiter) {\n      return process.env[envVar] && process.env[envVar].split(delimiter) || [];\n    }\n\n    const envPackageDirs = [\n    // METEOR_PACKAGE_DIRS should use the arch-specific delimiter\n      ...(packageDirsFromEnvVar('METEOR_PACKAGE_DIRS')),\n      // PACKAGE_DIRS (deprecated) always used ':' separator (yes, even Windows)\n      ...(packageDirsFromEnvVar('PACKAGE_DIRS', ':')),\n    ];\n\n    if (! self._ignorePackageDirsEnvVar && envPackageDirs.length) {\n      // path.delimiter was added in v0.9.3\n      envPackageDirs.forEach( p => searchDirs.push(files.pathResolve(p)) );\n    }\n\n    if (! self._ignoreCheckoutPackages && files.inCheckout()) {\n      // Running from a checkout, so use the Meteor core packages from the\n      // checkout.\n      const packagesDir =\n        files.pathJoin(files.getCurrentToolsDir(), 'packages');\n\n      searchDirs.push(\n        packagesDir,\n        files.pathJoin(packagesDir, \"non-core\", \"*\", \"packages\"),\n      );\n    }\n    return searchDirs;\n  },\n\n  // Returns a layered catalog with information about the packages that can be\n  // used in this project. Processes the package.js file from all local packages\n  // but does not compile the packages.\n  //\n  // Must be run in a buildmessage context. On build error, returns null.\n  _initializeCatalog: Profile('_initializeCatalog', function () {\n    var self = this;\n    buildmessage.assertInJob();\n\n    catalog.runAndRetryWithRefreshIfHelpful(function () {\n      buildmessage.enterJob(\n        \"scanning local packages\",\n        function () {\n          self.localCatalog = new catalogLocal.LocalCatalog;\n          self.projectCatalog = new catalog.LayeredCatalog(\n            self.localCatalog, self._officialCatalog);\n\n          var searchDirs = self._localPackageSearchDirs();\n          self.localCatalog.initialize({\n            localPackageSearchDirs: searchDirs,\n            explicitlyAddedLocalPackageDirs: self._explicitlyAddedLocalPackageDirs\n          });\n\n          if (buildmessage.jobHasMessages()) {\n            // Even if this fails, we want to leave self.localCatalog assigned,\n            // so that it gets counted included in the projectWatchSet.\n            return;\n          }\n\n          self.explicitlyAddedPackageNames = [];\n          _.each(self._explicitlyAddedLocalPackageDirs, function (dir) {\n            var localVersionRecord =\n                  self.localCatalog.getVersionBySourceRoot(dir);\n            if (localVersionRecord) {\n              self.explicitlyAddedPackageNames.push(localVersionRecord.packageName);\n            }\n          });\n\n          self._completedStage = STAGE.INITIALIZE_CATALOG;\n        }\n      );\n    });\n  }),\n\n  _getRootDepsAndConstraints: function () {\n    var self = this;\n\n    var depsAndConstraints = {deps: [], constraints: []};\n\n    self._addAppConstraints(depsAndConstraints);\n    self._addLocalPackageConstraints(depsAndConstraints);\n    return depsAndConstraints;\n  },\n\n  _addAppConstraints: function (depsAndConstraints) {\n    var self = this;\n\n    self.projectConstraintsFile.eachConstraint(function (constraint) {\n      // Add a dependency (\"this package must be used\") and a constraint\n      // (\"... at this version (maybe 'any reasonable')\").\n      depsAndConstraints.deps.push(constraint.package);\n      depsAndConstraints.constraints.push(constraint);\n    });\n  },\n\n  _addLocalPackageConstraints: function (depsAndConstraints) {\n    var self = this;\n    _.each(self.localCatalog.getAllPackageNames(), function (packageName) {\n      var versionRecord = self.localCatalog.getLatestVersion(packageName);\n      var constraint = utils.parsePackageConstraint(\n        packageName + \"@=\" + versionRecord.version);\n      // Add a constraint (\"this is the only version available\") but no\n      // dependency (we don't automatically use all local packages!)\n      depsAndConstraints.constraints.push(constraint);\n    });\n  },\n\n  _getAnticipatedPrereleases: function (rootConstraints, cachedVersions) {\n    var self = this;\n\n    var anticipatedPrereleases = {};\n    var add = function (packageName, version) {\n      if (! /-/.test(version)) {\n        return;\n      }\n      if (! _.has(anticipatedPrereleases, packageName)) {\n        anticipatedPrereleases[packageName] = {};\n      }\n      anticipatedPrereleases[packageName][version] = true;\n    };\n\n    // Pre-release versions that are root constraints (in .meteor/packages, in\n    // the release, or the version of a local package) are anticipated.\n    _.each(rootConstraints, function (constraintObject) {\n      _.each(constraintObject.versionConstraint.alternatives, function (alt) {\n        var version = alt.versionString;\n        version && add(constraintObject.package, version);\n      });\n    });\n\n    // Pre-release versions we decided to use in the past are anticipated.\n    _.each(cachedVersions, function (version, packageName) {\n      add(packageName, version);\n    });\n\n    return anticipatedPrereleases;\n  },\n\n  _buildResolver: function () {\n    var self = this;\n\n    var constraintSolverPackage =\n          isopackets.load('constraint-solver')['constraint-solver'];\n    var resolver =\n          new constraintSolverPackage.ConstraintSolver.PackagesResolver(\n            self.projectCatalog, {\n              nudge: function () {\n                Console.nudge(true);\n              },\n              Profile: Profile,\n              resultCache: self._resolverResultCache\n            });\n    return resolver;\n  },\n\n  _downloadMissingPackages: Profile('_downloadMissingPackages', function () {\n    var self = this;\n    buildmessage.assertInJob();\n    if (!self.packageMap)\n      throw Error(\"which packages to download?\");\n\n    catalog.runAndRetryWithRefreshIfHelpful(function () {\n      buildmessage.enterJob(\"downloading missing packages\", function () {\n        self.tropohouse.downloadPackagesMissingFromMap(self.packageMap, {\n          serverArchitectures: self._serverArchitectures\n        });\n        if (buildmessage.jobHasMessages())\n          return;\n        self._completedStage = STAGE.DOWNLOAD_MISSING_PACKAGES;\n      });\n    });\n  }),\n\n  _buildLocalPackages: Profile('_buildLocalPackages', function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.isopackCache = new isopackCacheModule.IsopackCache({\n      packageMap: self.packageMap,\n      includeCordovaUnibuild: (self._forceIncludeCordovaUnibuild\n                               || self.platformList.usesCordova()),\n      cacheDir: self.getProjectLocalDirectory('isopacks'),\n      pluginCacheDirRoot: self.getProjectLocalDirectory('plugin-cache'),\n      tropohouse: self.tropohouse,\n      previousIsopackCache: self._previousIsopackCache,\n      lintLocalPackages: self.lintAppAndLocalPackages,\n      lintPackageWithSourceRoot: self._lintPackageWithSourceRoot\n    });\n\n    if (self._forceRebuildPackages) {\n      self.isopackCache.wipeCachedPackages(\n        self._forceRebuildPackages === true\n          ? null : self._forceRebuildPackages);\n    }\n\n    buildmessage.enterJob('building local packages', function () {\n      self.isopackCache.buildLocalPackages();\n    });\n    self._completedStage = STAGE.BUILD_LOCAL_PACKAGES;\n  }),\n\n  _saveChangedMetadata: Profile('_saveChangedMetadata', function () {\n    var self = this;\n\n    // Save any changes to .meteor/packages.\n    if (! self._neverWriteProjectConstraintsFile)\n      self.projectConstraintsFile.writeIfModified();\n\n    // Write .meteor/versions if the command always wants to (create/update),\n    // or if the release of the app matches the release of the process.\n    if (! self._neverWritePackageMap &&\n        (self._alwaysWritePackageMap ||\n         (release.current.isCheckout() && self.releaseFile.isCheckout()) ||\n         (! release.current.isCheckout() &&\n          release.current.name === self.releaseFile.fullReleaseName))) {\n\n      self.packageMapFile.write(self.packageMap);\n    }\n\n    self._completedStage = STAGE.SAVE_CHANGED_METADATA;\n  })\n});\n\n\n// Represents .meteor/packages.\nexports.ProjectConstraintsFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'packages');\n  self.watchSet = null;\n\n  // Have we modified the in-memory representation since reading from disk?\n  self._modified = null;\n  // List of each line in the file; object with keys:\n  // - leadingSpace (string of spaces before the constraint)\n  // - constraint (as returned by utils.parsePackageConstraint)\n  // - trailingSpaceAndComment (string of spaces/comments after the constraint)\n  // This allows us to rewrite the file preserving comments.\n  self._constraintLines = null;\n  // Maps from package name to entry in _constraintLines.\n  self._constraintMap = null;\n  self._readFile();\n};\n\n_.extend(exports.ProjectConstraintsFile.prototype, {\n  _readFile: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.watchSet = new watch.WatchSet;\n    self._modified = false;\n    self._constraintMap = {};\n    self._constraintLines = [];\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n\n    // No .meteor/packages? This isn't a very good project directory. In fact,\n    // that's the definition of a project directory! (And that should have been\n    // fixed by _ensureProjectDir!)\n    if (contents === null)\n      throw Error(\"packages file missing: \" + self.filename);\n\n    var lines = files.splitBufferToLines(contents);\n    // Don't keep a record for the space at the end of the file.\n    if (lines.length && _.last(lines) === '')\n      lines.pop();\n\n    _.each(lines, function (line) {\n      var lineRecord =\n            { leadingSpace: '', constraint: null, trailingSpaceAndComment: '' };\n      self._constraintLines.push(lineRecord);\n      // Strip comment.\n      var match = line.match(/^([^#]*)(#.*)$/);\n      if (match) {\n        line = match[1];\n        lineRecord.trailingSpaceAndComment = match[2];\n      }\n      // Strip trailing space.\n      match = line.match(/^((?:.*\\S)?)(\\s*)$/);\n      line = match[1];\n      lineRecord.trailingSpaceAndComment =\n        match[2] + lineRecord.trailingSpaceAndComment;\n      // Strip leading space.\n      match = line.match(/^(\\s*)((?:\\S.*)?)$/);\n      lineRecord.leadingSpace = match[1];\n      line = match[2];\n\n      // No constraint? Leave lineRecord.constraint null and continue.\n      if (line === '')\n        return;\n      lineRecord.constraint = utils.parsePackageConstraint(line, {\n        useBuildmessage: true,\n        buildmessageFile: self.filename\n      });\n      if (! lineRecord.constraint)\n        return;  // recover by ignoring\n\n      if (_.has(self._constraintMap, lineRecord.constraint.package)) {\n        buildmessage.error(\n          \"Package name appears twice: \" + lineRecord.constraint.package, {\n            // XXX should this be relative?\n            file: self.filename\n          });\n        return;  // recover by ignoring\n      }\n      self._constraintMap[lineRecord.constraint.package] = lineRecord;\n    });\n  },\n\n  writeIfModified: function () {\n    var self = this;\n    self._modified && self._write();\n  },\n\n  _write: function () {\n    var self = this;\n    var lines = _.map(self._constraintLines, function (lineRecord) {\n      var lineParts = [lineRecord.leadingSpace];\n      if (lineRecord.constraint) {\n        lineParts.push(lineRecord.constraint.package);\n        if (lineRecord.constraint.constraintString) {\n          lineParts.push('@', lineRecord.constraint.constraintString);\n        }\n      }\n      lineParts.push(lineRecord.trailingSpaceAndComment, '\\n');\n      return lineParts.join('');\n    });\n    files.writeFileAtomically(self.filename, lines.join(''));\n    var messages = buildmessage.capture(\n      { title: 're-reading .meteor/packages' },\n      function () {\n        self._readFile();\n      });\n    // We shouldn't choke on something we just wrote!\n    if (messages.hasMessages())\n      throw Error(\"wrote bad .meteor/packages: \" + messages.formatMessages());\n  },\n\n  // Iterates over all constraints, in the format returned by\n  // utils.parsePackageConstraint.\n  eachConstraint: function (iterator) {\n    var self = this;\n    _.each(self._constraintLines, function (lineRecord) {\n      if (lineRecord.constraint)\n        iterator(lineRecord.constraint);\n    });\n  },\n\n  // Returns the constraint in the format returned by\n  // utils.parsePackageConstraint, or null.\n  getConstraint: function (name) {\n    var self = this;\n    if (_.has(self._constraintMap, name))\n      return self._constraintMap[name].constraint;\n    return null;\n  },\n\n  // Adds constraints, an array of objects as returned from\n  // utils.parsePackageConstraint.\n  // Does not write to disk immediately; changes are written to disk by\n  // writeIfModified() which is called in the _saveChangedMetadata step\n  // of project preparation.\n  addConstraints: function (constraintsToAdd) {\n    var self = this;\n    _.each(constraintsToAdd, function (constraintToAdd) {\n      if (! constraintToAdd.package) {\n        throw new Error(\"Expected PackageConstraint: \" + constraintToAdd);\n      }\n\n      var lineRecord;\n      if (! _.has(self._constraintMap, constraintToAdd.package)) {\n        lineRecord = {\n          leadingSpace: '',\n          constraint: constraintToAdd,\n          trailingSpaceAndComment: ''\n        };\n        self._constraintLines.push(lineRecord);\n        self._constraintMap[constraintToAdd.package] = lineRecord;\n        self._modified = true;\n        return;\n      }\n      lineRecord = self._constraintMap[constraintToAdd.package];\n      if (_.isEqual(constraintToAdd, lineRecord.constraint))\n        return;  // nothing changed\n      lineRecord.constraint = constraintToAdd;\n      self._modified = true;\n    });\n  },\n\n  // Like addConstraints, but takes an array of package name strings\n  // to add with no version constraint\n  addPackages: function (packagesToAdd) {\n    this.addConstraints(_.map(packagesToAdd, function (packageName) {\n      // make sure packageName is valid (and doesn't, for example,\n      // contain an '@' sign)\n      utils.validatePackageName(packageName);\n      return utils.parsePackageConstraint(packageName);\n    }));\n  },\n\n  // For every package we already have, update the constraint to be semver>=\n  // the constraint from the release\n  updateReleaseConstraints: function (releaseRecord) {\n    this.addConstraints(\n      _.compact(_.map(releaseRecord.packages, (version, packageName) => {\n        if (this.getConstraint(packageName)) {\n          return utils.parsePackageConstraint(packageName + '@' + version);\n        }\n      }))\n    );\n  },\n\n  // The packages in packagesToRemove are expected to actually be in the file;\n  // if you want to provide different output for packages in the file vs not,\n  // you should have already done that.\n  // Does not write to disk immediately; changes are written to disk by\n  // writeIfModified() which is called in the _saveChangedMetadata step\n  // of project preparation.\n  removePackages: function (packagesToRemove) {\n    var self = this;\n    self._constraintLines = _.filter(\n      self._constraintLines, function (lineRecord) {\n        return ! (lineRecord.constraint &&\n                  _.contains(packagesToRemove, lineRecord.constraint.package));\n      });\n    _.each(packagesToRemove, function (p) {\n      delete self._constraintMap[p];\n    });\n    self._modified = true;\n  },\n\n  // Removes all constraints. Generally this should only be used in situations\n  // where the project is not a real user app: while you can use\n  // removeAllPackages followed by addConstraints to fully replace the\n  // constraints in a project, this will also lose all user comments and\n  // (cosmetic) ordering from the file.\n  removeAllPackages: function () {\n    var self = this;\n    self._constraintLines = [];\n    self._constraintMap = {};\n    self._modified = true;\n  }\n});\n\n\n\n// Represents .meteor/versions.\nexports.PackageMapFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = options.filename;\n  self.watchSet = new watch.WatchSet;\n  self.fileHash = null;\n  self._versions = {};\n\n  self._readFile();\n};\n\n_.extend(exports.PackageMapFile.prototype, {\n  _readFile: function () {\n    var self = this;\n\n    var fileInfo = watch.readAndWatchFileWithHash(self.watchSet, self.filename);\n    var contents = fileInfo.contents;\n    self.fileHash = fileInfo.hash;\n    // No .meteor/versions? That's OK, you just get to start your calculation\n    // from scratch.\n    if (contents === null)\n      return;\n\n    buildmessage.assertInCapture();\n    var lines = files.splitBufferToLines(contents);\n    _.each(lines, function (line) {\n      // We don't allow comments here, since it's cruel to allow comments in a\n      // file when you're going to overwrite them anyway.\n      line = files.trimSpace(line);\n      if (line === '')\n        return;\n      var packageVersion = utils.parsePackageAndVersion(line, {\n        useBuildmessage: true,\n        buildmessageFile: self.filename\n      });\n      if (!packageVersion)\n        return;  // recover by ignoring\n\n      // If a package appears multiple times in .meteor/versions, we just ignore\n      // the second one. This file is more meteor-controlled than\n      // .meteor/packages and people shouldn't be surprised to see it\n      // automatically fixed.\n      if (_.has(self._versions, packageVersion.package))\n        return;\n\n      self._versions[packageVersion.package] = packageVersion.version;\n    });\n  },\n\n  // Note that this is really specific to wanting to know what versions are in\n  // the .meteor/versions file on disk, which is a slightly different question\n  // from \"so, what versions should I be building with?\"  Usually you want the\n  // PackageMap produced by resolving constraints instead! Returns a map from\n  // package name to version.\n  getCachedVersions: function () {\n    var self = this;\n    return _.clone(self._versions);\n  },\n\n  write: function (packageMap) {\n    var self = this;\n    var newVersions = packageMap.toVersionMap();\n\n    // Only write the file if some version changed. (We don't need to do no-op\n    // writes, even if they fix sorting in the file.)\n    if (_.isEqual(self._versions, newVersions))\n      return;\n\n    self._versions = newVersions;\n    var packageNames = _.keys(self._versions);\n    packageNames.sort();\n    var lines = [];\n    _.each(packageNames, function (packageName) {\n      lines.push(packageName + \"@\" + self._versions[packageName] + \"\\n\");\n    });\n    var fileContents = new Buffer(lines.join(''));\n    files.writeFileAtomically(self.filename, fileContents);\n\n    // Replace our watchSet with one for the new contents of the file.\n    var hash = watch.sha1(fileContents);\n    self.watchSet = new watch.WatchSet;\n    self.watchSet.addFile(self.filename, hash);\n  }\n});\n\n\n\n// Represents .meteor/platforms. We take no effort to maintain comments or\n// spacing here.\nexports.PlatformList = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'platforms');\n  self.watchSet = null;\n  self._platforms = null;\n\n  self._readFile();\n};\n\n// These platforms are always present and can be neither added or removed\nexports.PlatformList.DEFAULT_PLATFORMS = ['browser', 'server'];\n\n_.extend(exports.PlatformList.prototype, {\n  _readFile: function () {\n    var self = this;\n\n    // Reset the WatchSet.\n    self.watchSet = new watch.WatchSet;\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n\n    var platforms = contents ? files.splitBufferToLines(contents) : [];\n    // We don't allow comments here, since it's cruel to allow comments in a\n    // file when you're going to overwrite them anyway.\n    platforms = _.uniq(_.compact(_.map(platforms, files.trimSpace)));\n    platforms.sort();\n\n    // Missing some of the default platforms (or the whole file)? Add them and\n    // try again.\n    if (_.difference(exports.PlatformList.DEFAULT_PLATFORMS,\n                     platforms).length) {\n      // Write the platforms to disk (automatically adding DEFAULT_PLATFORMS and\n      // sorting), which automatically calls this function recursively to\n      // re-reads them.\n      self.write(platforms);\n      return;\n    }\n\n    self._platforms = platforms;\n  },\n\n  // Replaces the current platform file with the given list and resets this\n  // object (and its WatchSet) to track the new value.\n  write: function (platforms) {\n    var self = this;\n    self._platforms = null;\n    platforms = _.uniq(\n      platforms.concat(exports.PlatformList.DEFAULT_PLATFORMS));\n    platforms.sort();\n    files.writeFileAtomically(self.filename, platforms.join('\\n') + '\\n');\n    self._readFile();\n  },\n\n  getPlatforms: function () {\n    var self = this;\n    return _.clone(self._platforms);\n  },\n\n  getCordovaPlatforms: function () {\n    var self = this;\n    return _.difference(self._platforms,\n                        exports.PlatformList.DEFAULT_PLATFORMS);\n  },\n\n  usesCordova: function () {\n    var self = this;\n    return ! _.isEmpty(self.getCordovaPlatforms());\n  },\n\n  getWebArchs: function () {\n    var self = this;\n    var archs = [ \"web.browser\" ];\n    if (self.usesCordova()) {\n      archs.push(\"web.cordova\");\n    }\n    return archs;\n  }\n});\n\n\n// Represents .meteor/cordova-plugins.\nexports.CordovaPluginsFile = function (options) {\n  var self = this;\n  buildmessage.assertInCapture();\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'cordova-plugins');\n  self.watchSet = null;\n  // Map from plugin name to version.\n  self._plugins = null;\n\n  self._readFile();\n};\n\n_.extend(exports.CordovaPluginsFile.prototype, {\n  _readFile: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    self.watchSet = new watch.WatchSet;\n    self._plugins = {};\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n    // No file?  No plugins.\n    if (contents === null)\n      return;\n\n    var lines = files.splitBufferToLines(contents);\n    _.each(lines, function (line) {\n      line = files.trimSpace(line);\n      if (line === '')\n        return;\n\n      // We just do a standard split here, not utils.parsePackageConstraint,\n      // since cordova plugins don't necessary obey the same naming conventions\n      // as Meteor packages.\n      var parts = line.split('@');\n      if (parts.length !== 2) {\n        buildmessage.error(\"Cordova plugin must specify version: \" + line, {\n          // XXX should this be relative?\n          file: self.filename\n        });\n        return;  // recover by ignoring\n      }\n      if (_.has(self._plugins, parts[0])) {\n        buildmessage.error(\"Plugin name appears twice: \" + parts[0], {\n          // XXX should this be relative?\n          file: self.filename\n        });\n        return;  // recover by ignoring\n      }\n      self._plugins[parts[0]] = parts[1];\n    });\n  },\n\n  getPluginVersions: function () {\n    var self = this;\n    return _.clone(self._plugins);\n  },\n\n  write: function (plugins) {\n    var self = this;\n    var pluginNames = _.keys(plugins);\n    pluginNames.sort();\n    var lines = _.map(pluginNames, function (pluginName) {\n      return pluginName + '@' + plugins[pluginName] + '\\n';\n    });\n    files.writeFileAtomically(self.filename, lines.join(''));\n    var messages = buildmessage.capture(\n      { title: 're-reading .meteor/cordova-plugins' },\n      function () {\n        self._readFile();\n      });\n    // We shouldn't choke on something we just wrote!\n    if (messages.hasMessages())\n      throw Error(\"wrote bad .meteor/packages: \" + messages.formatMessages());\n  }\n});\n\n\n\n// Represents .meteor/release.\nexports.ReleaseFile = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(options.projectDir, '.meteor', 'release');\n  self.catalog = options.catalog || catalog.official;\n\n  self.watchSet = null;\n  // The release name actually written in the file.  Null if no fill.  Empty if\n  // the file is empty.\n  self.unnormalizedReleaseName = null;\n  // The full release name (with METEOR@ if it's missing in\n  // unnormalizedReleaseName).\n  self.fullReleaseName = null;\n  // FOO@bar unless FOO === \"METEOR\" in which case \"Meteor bar\".\n  self.displayReleaseName = null;\n  // Just the track.\n  self.releaseTrack = null;\n  self.releaseVersion = null;\n  self._readFile();\n};\n\n_.extend(exports.ReleaseFile.prototype, {\n  fileMissing: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === null;\n  },\n  noReleaseSpecified: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === '';\n  },\n  isCheckout: function () {\n    var self = this;\n    return self.unnormalizedReleaseName === 'none';\n  },\n  normalReleaseSpecified: function () {\n    var self = this;\n    return ! (self.fileMissing() || self.noReleaseSpecified()\n              || self.isCheckout());\n  },\n\n  _readFile: function () {\n    var self = this;\n\n    // Start a new watchSet, in case we just overwrote this.\n    self.watchSet = new watch.WatchSet;\n    var contents = watch.readAndWatchFile(self.watchSet, self.filename);\n    // If file doesn't exist, leave unnormalizedReleaseName empty; fileMissing\n    // will be true.\n    if (contents === null)\n      return;\n\n    var lines = _.compact(_.map(files.splitBufferToLines(contents),\n                                files.trimSpaceAndComments));\n    // noReleaseSpecified will be true.\n    if (!lines.length) {\n      self.unnormalizedReleaseName = '';\n      return;\n    }\n\n    self.unnormalizedReleaseName = lines[0];\n\n    const catalogUtils = require('./packaging/catalog/catalog-utils.js');\n    var parts = catalogUtils.splitReleaseName(self.unnormalizedReleaseName);\n    self.fullReleaseName = parts[0] + '@' + parts[1];\n    self.displayReleaseName = catalogUtils.displayRelease(parts[0], parts[1]);\n    self.releaseTrack = parts[0];\n    self.releaseVersion = parts[1];\n\n    self.ensureDevBundleLink();\n  },\n\n  // Returns an absolute path to the dev_bundle appropriate for the\n  // release specified in the .meteor/release file.\n  getDevBundle() {\n    let devBundle = files.getDevBundle();\n    const devBundleParts = devBundle.split(files.pathSep);\n    const meteorToolIndex = devBundleParts.lastIndexOf(\"meteor-tool\");\n\n    if (meteorToolIndex >= 0) {\n      const releaseVersion = this.catalog.getReleaseVersion(\n        this.releaseTrack,\n        this.releaseVersion\n      );\n\n      if (releaseVersion) {\n        const meteorToolVersion = releaseVersion.tool.split(\"@\").pop();\n        devBundleParts[meteorToolIndex + 1] = meteorToolVersion;\n        devBundle = devBundleParts.join(files.pathSep);\n      }\n    }\n\n    try {\n      return files.realpath(devBundle);\n    } catch (e) {\n      if (e.code !== \"ENOENT\") throw e;\n      return null;\n    }\n  },\n\n  // Make a symlink from .meteor/local/dev_bundle to the actual dev_bundle.\n  ensureDevBundleLink() {\n    import { makeLink, readLink } from \"./cli/dev-bundle-links.js\";\n\n    const dotMeteorDir = files.pathDirname(this.filename);\n    const localDir = files.pathJoin(dotMeteorDir, \"local\");\n    const devBundleLink = files.pathJoin(localDir, \"dev_bundle\");\n\n    if (this.isCheckout()) {\n      // Only create .meteor/local/dev_bundle if .meteor/release refers to\n      // an actual release, and remove it otherwise.\n      files.rm_recursive(devBundleLink);\n      return;\n    }\n\n    if (files.inCheckout()) {\n      // Never update .meteor/local/dev_bundle to point to a checkout.\n      return;\n    }\n\n    const newTarget = this.getDevBundle();\n    if (! newTarget) {\n      return;\n    }\n\n    try {\n      const oldOSPath = readLink(devBundleLink);\n      const oldTarget = files.convertToStandardPath(oldOSPath);\n      if (newTarget === oldTarget) {\n        // Don't touch .meteor/local/dev_bundle if it already points to\n        // the right target path.\n        return;\n      }\n\n      files.mkdir_p(localDir);\n      makeLink(newTarget, devBundleLink);\n\n    } catch (e) {\n      if (e.code !== \"ENOENT\") {\n        // It's ok if the above commands failed because the target path\n        // did not exist, but other errors should not be silenced.\n        throw e;\n      }\n    }\n  },\n\n  write: function (releaseName) {\n    var self = this;\n    files.writeFileAtomically(self.filename, releaseName + '\\n');\n    self._readFile();\n  }\n});\n\n\n// Represents .meteor/.finished-upgraders.\n// This is only used in a few places, so we don't cache its value in memory;\n// we just read it when we need it. There's also no need to add it to a\n// watchSet because we don't need to rebuild when it changes.\nexports.FinishedUpgraders = function (options) {\n  var self = this;\n\n  self.filename = files.pathJoin(\n    options.projectDir, '.meteor', '.finished-upgraders');\n};\n\n_.extend(exports.FinishedUpgraders.prototype, {\n  readUpgraders: function () {\n    var self = this;\n    var upgraders = [];\n    var lines = files.getLinesOrEmpty(self.filename);\n    _.each(lines, function (line) {\n      line = files.trimSpaceAndComments(line);\n      if (line === '')\n        return;\n      upgraders.push(line);\n    });\n    return upgraders;\n  },\n\n  appendUpgraders: function (upgraders) {\n    var self = this;\n\n    var current = null;\n    try {\n      current = files.readFile(self.filename, 'utf8');\n    } catch (e) {\n      if (e.code !== 'ENOENT')\n        throw e;\n    }\n\n    var appendText = '';\n    if (current === null) {\n      // We're creating this file for the first time. Include a helpful comment.\n      appendText =\n\"# This file contains information which helps Meteor properly upgrade your\\n\" +\n\"# app when you run 'meteor update'. You should check it into version control\\n\" +\n\"# with your project.\\n\" +\n\"\\n\";\n    } else if (current.length && current[current.length - 1] !== '\\n') {\n      // File has an unterminated last line. Let's terminate it.\n      appendText = '\\n';\n    }\n\n    _.each(upgraders, function (upgrader) {\n      appendText += upgrader + '\\n';\n    });\n\n    files.appendFile(self.filename, appendText);\n  }\n});\n"]}